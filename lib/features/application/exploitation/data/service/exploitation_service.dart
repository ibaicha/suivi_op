import 'dart:convert';

import 'package:http/http.dart' as http;

import '../../../../../core/data/model/ObjectBox/objectBoxModels.dart';
import '../../../../../core/data/service/ObjectBoxHelper.dart';
import '../../../../../core/res/constants.dart';
import '../../../../../objectbox.g.dart';

class ExploitationService {
  Future<List<MxExploitationObject>> getAllExploitationsFilters(
    String compte,
    List<String> listStringVarieteId,
    List<String> listStringAnneeId,
    List<String> listStringSaisonId,
    int opId,
    List<String> listStringProducteurId,
  ) async {
    /*
    Future<List<MxExploitationObject>?> ListExploitationBox =
        ObjectBox.getMxOpExploitationsData(opId);
    */
    Future<List<MxExploitationObject>?> ListExploitationBox =
        ObjectBox.getMxExploitationsLocalData();

    // final exploitationBox = ObjectBox.exploitationsBox;

    List<MxExploitationObject> mesExploitations =
        await ListExploitationBox ?? [];
    print('opId: ' + opId.toString());
    print('compte: ' + compte);
    print('listStringVarieteId: ' + listStringVarieteId.toString());
    print('listStringAnneeId: ' + listStringAnneeId.toString());
    print('listStringSaisonId: ' + listStringSaisonId.toString());
    print('listStringProducteurId: ' + listStringProducteurId.toString());

    mesExploitations = mesExploitations
        .where((e) =>
            e.compte.toString().contains(compte.toUpperCase()) ||
            e.compte.toString().contains(compte))
        .toList();

    if (opId != 0) {
      mesExploitations = mesExploitations
          .where((e) => e.mxopObject.target!.id == opId) //&&
          //listStringAnneeId.contains(e.mxanneeObject.target!.id.toString()))
          .toList();
    }

    if (listStringAnneeId.isNotEmpty) {
      mesExploitations = mesExploitations
          .where((e) =>
              listStringAnneeId.contains(e.mxanneeObject.target!.id.toString()))
          .toList();
    }

    if (listStringSaisonId.isNotEmpty) {
      mesExploitations = mesExploitations
          .where((e) => listStringSaisonId
              .contains(e.mxsaisonObject.target!.id.toString()))
          .toList();
    }
    if (listStringVarieteId.isNotEmpty) {
      mesExploitations = mesExploitations
          .where((e) => listStringVarieteId
              .contains(e.mxvarieteObject.target!.id.toString()))
          .toList();
    }

/*
    if (listStringAnneeId.isEmpty &&
        listStringVarieteId.isEmpty &&
        listStringSaisonId.isEmpty &&
        listStringProducteurId.isEmpty) {
      print(
          'listStringAnneeId.isEmpty && listStringVarieteId.isEmpty && listStringSaisonId.isEmpty && listStringProducteureId.isEmpty');
      mesExploitations = mesExploitations
          .where((e) =>
              e.compte.contains(compte.toUpperCase()) ||
              e.compte.contains(compte))
          .toList();
    } else if (listStringAnneeId.isNotEmpty &&
        listStringVarieteId.isNotEmpty &&
        listStringSaisonId.isNotEmpty &&
        listStringProducteurId.isNotEmpty) {
      print(
          'listStringAnneeId.isNotEmpty && listStringVarieteId.isNotEmpty && listStringSaisonId.isNotEmpty && listStringProducteurId.isNotEmpty');
      mesExploitations = mesExploitations
          .where((e) =>
              (e.compte.contains(compte.toUpperCase()) ||
                  e.compte.contains(compte)) &&
              (listStringAnneeId.contains(e.anneeid.toString())) &&
              (listStringVarieteId.contains(e.varieteid.toString())) &&
              (listStringSaisonId.contains(e.saisonid.toString())) &&
              (listStringProducteurId.contains(e.producteurid.toString())))
          .toList();
    } else if (listStringAnneeId.isNotEmpty &&
        listStringVarieteId.isEmpty &&
        listStringSaisonId.isEmpty &&
        listStringProducteurId.isEmpty) {
      print(
          'listStringAnneeId.isNotEmpty && listStringVarieteId.isEmpty && listStringProducteurId.isEmpty');
      mesExploitations = mesExploitations
          .where((e) =>
              (e.compte.contains(compte.toUpperCase()) ||
                  e.compte.contains(compte)) &&
              (listStringAnneeId.contains(e.anneeid.toString())))
          .toList();
    } else if (listStringAnneeId.isEmpty &&
        listStringVarieteId.isNotEmpty &&
        listStringProducteurId.isEmpty) {
      print(
          'listStringAnneeId.isEmpty && listStringVarieteId.isNotEmpty  && listStringProducteurId.isEmpty');
      mesExploitations = mesExploitations
          .where((e) =>
              (e.compte.contains(compte.toUpperCase()) ||
                  e.compte.contains(compte)) &&
              (listStringVarieteId.contains(e.varieteid.toString())))
          .toList();
    } else if (listStringAnneeId.isEmpty &&
        listStringVarieteId.isEmpty &&
        listStringSaisonId.isEmpty &&
        listStringProducteurId.isNotEmpty) {
      print(
          'listStringAnneeId.isEmpty && listStringVarieteId.isEmpty &&listStringProducteurId.isNotEmpty');
      mesExploitations = mesExploitations
          .where((e) =>
              (e.compte.contains(compte.toUpperCase()) ||
                  e.compte.contains(compte)) &&
              (listStringProducteurId.contains(e.producteurid.toString())))
          .toList();
    } else if (listStringAnneeId.isNotEmpty &&
        listStringVarieteId.isNotEmpty &&
        listStringSaisonId.isEmpty &&
        listStringProducteurId.isEmpty) {
      print(
          'listStringAnneeId.isNotEmpty && listStringVarieteId.isNotEmpty && listStringProducteurId.isEmpty');
      mesExploitations = mesExploitations
          .where((e) =>
              (e.compte.contains(compte.toUpperCase()) ||
                  e.compte.contains(compte)) &&
              (listStringAnneeId.contains(e.anneeid.toString())) &&
              (listStringVarieteId.contains(e.varieteid.toString())))
          .toList();
    } else if (listStringAnneeId.isEmpty &&
        listStringVarieteId.isNotEmpty &&
        listStringSaisonId.isEmpty &&
        listStringProducteurId.isNotEmpty) {
      print(
          'listStringAnneeId.isEmpty && listStringVarieteId.isNotEmpty && listStringProducteurId.isNotEmpt');
      mesExploitations = mesExploitations
          .where((e) =>
              (e.compte.contains(compte.toUpperCase()) ||
                  e.compte.contains(compte)) &&
              (listStringVarieteId.contains(e.varieteid.toString())) &&
              (listStringProducteurId.contains(e.producteurid.toString())))
          .toList();
    } else if (listStringAnneeId.isNotEmpty &&
        listStringVarieteId.isEmpty &&
        listStringSaisonId.isEmpty &&
        listStringProducteurId.isNotEmpty) {
      print(
          'listStringAnneeId.isNotEmpty && listStringVarieteId.isEmpty && listStringProducteurId.isNotEmpty');
      mesExploitations = mesExploitations
          .where((e) =>
              (e.compte.contains(compte.toUpperCase()) ||
                  e.compte.contains(compte)) &&
              (listStringAnneeId.contains(e.anneeid.toString())) &&
              (listStringProducteurId.contains(e.producteurid.toString())))
          .toList();
    } else if (listStringAnneeId.isNotEmpty &&
        listStringVarieteId.isEmpty &&
        listStringSaisonId.isEmpty &&
        listStringProducteurId.isNotEmpty) {
      print(
          'listStringAnneeId.isNotEmpty && listStringVarieteId.isEmpty && listStringProducteurId.isNotEmpty');
      mesExploitations = mesExploitations
          .where((e) =>
              (e.compte.contains(compte.toUpperCase()) ||
                  e.compte.contains(compte)) &&
              (listStringAnneeId.contains(e.anneeid.toString())) &&
              (listStringProducteurId.contains(e.producteurid.toString())))
          .toList();
    }
    */

    Constants.mesExploitations = mesExploitations;
    mesExploitations.forEach((element) {
      print('Element: ' +
          element.id.toString() +
          ' ' +
          element.compte.toString());
      //print(element.toJson());
    });
    Constants.nb_page = mesExploitations.length;
    return mesExploitations;
  }

  Future<List<MxExploitationObject>> getAllExploitationsFilterss(
      String compte,
      List<String> listStringVarieteId,
      List<String> listStringAnneeId,
      int opId) async {
    Future<List<MxExploitationObject>?> ListExploitationBox =
        ObjectBox.getMxOpExploitationsData(opId);

    // final exploitationBox = ObjectBox.exploitationsBox;
    List<MxExploitationObject> _mesExploitations = [];

    ListExploitationBox.then((value) async {
      value!.forEach((element) {
        print(element.id.toString() + ' ' + element.compte.toString());
        _mesExploitations.add(element);
      });
      // print(_mesExploitations.length);
      Constants.mesExploitations = _mesExploitations;
    });

/*
    if (listStringAnneeId.isEmpty && listStringVarieteId.isEmpty) {
      Query<ExploitationObject> query = exploitationBox!
          .query(ExploitationObject_.compte
              .contains(compte.toLowerCase())
              .or(ExploitationObject_.compte.contains(compte.toUpperCase()))
              .or(ExploitationObject_.compte.contains(compte)))
          .build();
      mesExploitations = query.find();
      print('--- mesExploitations AnneeId == '
          ' && VarieteId == '
          '  ---- $mesExploitations');
      query.close();
      // return mesExploitations;
    }
    if (listStringAnneeId.isNotEmpty && listStringVarieteId.isNotEmpty) {
      List<int> listIntVarieteId =
          listStringVarieteId.map((e) => int.parse(e)).toList();
      List<int> listIntAnneeId =
          listStringAnneeId.map((e) => int.parse(e)).toList();
      Query<ExploitationObject> query = exploitationBox!
          .query(ExploitationObject_.compte
              .contains(compte.toLowerCase())
              .or(ExploitationObject_.compte.contains(compte.toUpperCase()))
              .or(ExploitationObject_.compte.contains(compte))
              .and(ExploitationObject_.varieteid.oneOf(listIntVarieteId))
              .and(ExploitationObject_.anneeid.oneOf(listIntAnneeId)))
          .build();
      mesExploitations = query.find();
      print('--- mesExploitations AnneeId != '
          ' && VarieteId != '
          ' ---- $mesExploitations');
      query.close();
      // return mesExploitations;
    }
    if (listStringAnneeId.isNotEmpty && listStringVarieteId.isEmpty) {
      List<int> listIntVarieteId =
          listStringVarieteId.map((e) => int.parse(e)).toList();
      List<int> listIntAnneeId =
          listStringAnneeId.map((e) => int.parse(e)).toList();
      Query<ExploitationObject> query = exploitationBox!
          .query(ExploitationObject_.compte
              .contains(compte.toLowerCase())
              .or(ExploitationObject_.compte.contains(compte.toUpperCase()))
              .or(ExploitationObject_.compte.contains(compte))
              .and(ExploitationObject_.anneeid.oneOf(listIntAnneeId)))
          .build();
      mesExploitations = query.find();
      print('--- mesExploitations ---- AnneeId != '
          ' && VarieteId == '
          ' $mesExploitations');
      query.close();
      // return mesExploitations;
    }
    if (listStringAnneeId.isEmpty && listStringVarieteId.isNotEmpty) {
      List<int> listIntVarieteId =
          listStringVarieteId.map((e) => int.parse(e)).toList();
      Query<ExploitationObject> query = exploitationBox!
          .query(ExploitationObject_.compte
              .contains(compte.toLowerCase())
              .or(ExploitationObject_.compte.contains(compte.toUpperCase()))
              .or(ExploitationObject_.compte.contains(compte))
              .and(ExploitationObject_.varieteid.oneOf(listIntVarieteId)))
          .build();
      mesExploitations = query.find();
      print('--- mesExploitations ---- AnneeId == '
          ' && VarieteId == '
          ' $mesExploitations');
      query.close();
      // return mesExploitations;
    }
    */

    print(Constants.mesExploitations.length);
    return Constants.mesExploitations;
  }

  Future<List<ExploitationObject>> getAllExploitationsFiltersX(int compte,
      List<String> listStringVarieteId, List<String> listStringAnneeId) async {
    final exploitationBox = ObjectBox.exploitationsBox;
    List<ExploitationObject> mesExploitations = [];

    if (listStringAnneeId.isEmpty && listStringVarieteId.isEmpty) {
      Query<ExploitationObject> query = exploitationBox!
          .query(ExploitationObject_.compte.equals(compte))
          .build();
      mesExploitations = query.find();
      print('--- mesExploitations AnneeId == '
          ' && VarieteId == '
          '  ---- $mesExploitations');
      query.close();
      // return mesExploitations;
    }
    if (listStringAnneeId.isNotEmpty && listStringVarieteId.isNotEmpty) {
      List<int> listIntVarieteId =
          listStringVarieteId.map((e) => int.parse(e)).toList();
      List<int> listIntAnneeId =
          listStringAnneeId.map((e) => int.parse(e)).toList();
      Query<ExploitationObject> query = exploitationBox!
          .query(ExploitationObject_.compte.equals(compte))
          /*
              .and(ExploitationObject_.varieteid.oneOf(listIntVarieteId))
              .and(ExploitationObject_.anneeid.oneOf(listIntAnneeId))
              */
          .build();
      mesExploitations = query.find();
      print('--- mesExploitations AnneeId != '
          ' && VarieteId != '
          ' ---- $mesExploitations');
      query.close();
      // return mesExploitations;
    }
    if (listStringAnneeId.isNotEmpty && listStringVarieteId.isEmpty) {
      List<int> listIntVarieteId =
          listStringVarieteId.map((e) => int.parse(e)).toList();
      List<int> listIntAnneeId =
          listStringAnneeId.map((e) => int.parse(e)).toList();
      Query<ExploitationObject> query = exploitationBox!
          .query(ExploitationObject_.compte.equals(compte))
          /*
              .and(ExploitationObject_.anneeid.oneOf(listIntAnneeId)))
              */
          .build();
      mesExploitations = query.find();
      print('--- mesExploitations ---- AnneeId != '
          ' && VarieteId == '
          ' $mesExploitations');
      query.close();
      // return mesExploitations;
    }
    if (listStringAnneeId.isEmpty && listStringVarieteId.isNotEmpty) {
      List<int> listIntVarieteId =
          listStringVarieteId.map((e) => int.parse(e)).toList();
      Query<ExploitationObject> query = exploitationBox!
          .query(ExploitationObject_.compte.equals(compte))
          /*
              .and(ExploitationObject_.varieteid.oneOf(listIntVarieteId)))
              */
          .build();
      mesExploitations = query.find();
      print('--- mesExploitations ---- AnneeId == '
          ' && VarieteId == '
          ' $mesExploitations');
      query.close();
      // return mesExploitations;
    }
    return mesExploitations;
  }
}
