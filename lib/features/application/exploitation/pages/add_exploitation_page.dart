import 'package:flutter/material.dart';


import 'add_exploitation_layout.dart';


class AddExploitationPage extends StatelessWidget {
  const AddExploitationPage({Key? key}) : super(key: key);
  static const routeName = '/add_exploitation';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.deepOrangeAccent,
      body: SafeArea(
        child: const AddExploitationLayout(),
      ),

/*
        body: MultiRepositoryProvider(
            providers: [
              RepositoryProvider<ExploitationRepository>(
                create: (context) =>
                    ExploitationRepository(service: ExploitationService()),
              ),
              RepositoryProvider<ProducteurRepository>(
                create: (context) =>
                    ProducteurRepository(service: ProducteurService()),
              ),
              RepositoryProvider<VarieteRepository>(
                create: (context) =>
                    VarieteRepository(service: VarieteService()),
              ),
              RepositoryProvider<AnneeRepository>(
                create: (context) => AnneeRepository(service: AnneeService()),
              ),
              RepositoryProvider<EmballageRepository>(
                create: (context) =>
                    EmballageRepository(service: EmballageService()),
              ),
              RepositoryProvider<SaisonRepository>(
                create: (context) => SaisonRepository(service: SaisonService()),
              ),
              RepositoryProvider<TypeChargeExploitationRepository>(
                create: (context) => TypeChargeExploitationRepository(
                    service: TypeChargeExploitationService()),
              ),
              RepositoryProvider<ExploitationChargeExploitationRepository>(
                create: (context) => ExploitationChargeExploitationRepository(
                    service: ExploitationChargeExploitationService()),
              ),
            ],
            child: MultiBlocProvider(
              providers: [
                //-----------------BON -------------------
                BlocProvider<ExploitationBloc>(
                  create: (context) =>
                      ExploitationBloc(context.read<ExploitationRepository>()),
                ),
                BlocProvider<EceByExploitationBloc>(
                  create: (context) => EceByExploitationBloc(
                      context.read<ExploitationChargeExploitationRepository>()),
                ),
                BlocProvider<AllAnneesBloc>(
                  create: (context) =>
                      AllAnneesBloc(context.read<AnneeRepository>()),
                ),
                BlocProvider<AllVarietesBloc>(
                  create: (context) =>
                      AllVarietesBloc(context.read<VarieteRepository>()),
                ),
                BlocProvider<AllEmballagesBloc>(
                  create: (context) =>
                      AllEmballagesBloc(context.read<EmballageRepository>()),
                ),
                BlocProvider<AllSaisonsBloc>(
                  create: (context) =>
                      AllSaisonsBloc(context.read<SaisonRepository>()),
                ),
                BlocProvider<ProducteurBloc>(
                  create: (context) =>
                      ProducteurBloc(context.read<ProducteurRepository>()),
                ),
                BlocProvider<Producteur_idOpBloc>(
                  create: (context) =>
                      Producteur_idOpBloc(context.read<ProducteurRepository>()),
                ),
                // ----------------- BON FIN ------------------

                BlocProvider<TypeChargeExploitationsIdproduitBloc>(
                  create: (context) => TypeChargeExploitationsIdproduitBloc(
                    typeChargeExploitationRepository:
                        context.read<TypeChargeExploitationRepository>(),
                  )..add(GenerateTypeChargeExploitationsIdProduitEvent(
                      idProduit: 0,
                    )),
                ),
                BlocProvider<EceIdProduitIdTypeChargeIdExploitationBloc>(
                  create: (context) =>
                      EceIdProduitIdTypeChargeIdExploitationBloc(
                    exploitationChargeExploitationRepository: context
                        .read<ExploitationChargeExploitationRepository>(),
                  )..add(GenerateEceIdProduitIdTypeChargeIdExploitationEvent(
                          idProduit: 0,
                          idTypeChargeExploitation: 0,
                          idExploitation: 0)),
                ),
              ],
              child: const AddExploitationLayout(),
            )
            )
            
            */
    );
  }
}
