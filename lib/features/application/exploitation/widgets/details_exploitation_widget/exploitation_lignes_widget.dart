import 'package:flutter/material.dart';

import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter/src/widgets/basic.dart' as material;

import 'package:flutter/services.dart';
import 'package:intl/intl.dart';

import '../../../../../core/data/model/ObjectBox/objectBoxModels.dart';
import '../../../../../core/data/service/ObjectBoxHelper.dart';
import '../../../../../objectbox.g.dart';
import '../../../exploitation_charge_exploitation/widgets/ece_idExploitation/bloc/ece_by_exploitation_bloc.dart';

class ExploitationLigneWidget extends StatefulWidget {
  late int idExploitation;
  ExploitationLigneWidget({
    Key? key,
    required this.idExploitation,
  }) : super(key: key);

  @override
  State<ExploitationLigneWidget> createState() =>
      _ExploitationLigneWidgetState();
}

class _ExploitationLigneWidgetState extends State<ExploitationLigneWidget> {
  final TextEditingController _textFieldPuController = TextEditingController();
  final TextEditingController _textFieldQteController = TextEditingController();
  final TextEditingController _textFieldTotalController =
      TextEditingController();
  late EceByExploitationBloc blocEceByExploitation;
  final int _currentSortColumn = 0;
  final bool _isAscending = true;

  final formatter = NumberFormat('#,##0.0', 'fr_FR');
  // List<Item> _items = [];

  @override
  void initState() {
    //print('JE DEBUTE');
    super.initState();

    // blocEceByExploitation = context.read<EceByExploitationBloc>();
  }

  @override
  void dispose() {
    //print('JE FERME');

    super.dispose();
  }

  List<DataColumn> _createColumns() {
    return [
      const DataColumn(
        label: Text('Nom'),
        numeric: false,
        tooltip: 'Nom of the item',
      ),
      const DataColumn(
        label: Text('Pu'),
        numeric: true,
        tooltip: 'Prix of the item',
      ),
      const DataColumn(
        label: Text('Qte'),
        numeric: true,
        tooltip: 'Quantite of the item',
      ),
      const DataColumn(
        label: Text('Total'),
        numeric: true,
        tooltip: 'Total of the item',
      ),
      const DataColumn(
        label: Text(''),
        tooltip: 'Modifier...',
      ),
    ];
  }

  DataRow _createRow(Item item) {
    return DataRow(
      // index: item.id, // for DataRow.byIndex
      key: ValueKey(item.id),

      color: MaterialStateColor.resolveWith((Set<MaterialState> states) =>
          states.contains(MaterialState.selected)
              ? Colors.red
              : const Color.fromARGB(100, 215, 217, 219)),
      cells: [
        DataCell(Text(item.name)),
        DataCell(Text(formatter.format(item.pu))),
        DataCell(
          Text(formatter.format(item.qte)),
        ),
        DataCell(
          Text(formatter.format(item.valeur)),
        ),
        DataCell(
          const Text(''),
          placeholder: false,
          showEditIcon: true,
          onTap: () {
            Item myItem = Item(
              id: item.id,
              name: item.name,
              pu: item.pu,
              qte: item.qte,
              valeur: item.valeur,
              /* */
              exploitationid: item.exploitationid,
              unite: item.unite,
              date: item.date,
              observation: item.observation,
              exploitationchargeexploitationid:
                  item.exploitationchargeexploitationid,
              chargeexploitationid: item.chargeexploitationid,
              chargeexploitationname: item.chargeexploitationname,
              typechargeexploitationid: item.typechargeexploitationid,
              typechargeexploitationname: item.typechargeexploitationname,
              famillechargeexploitationid: item.famillechargeexploitationid,
              famillechargeexploitationname: item.famillechargeexploitationname,
            );
            _showDialogEditItem(context, widget.idExploitation, myItem);
            // print('Key: ${item.id} -- ${item.name} -- ${widget.idExploitation}');
            print(
                'id: ${myItem.id}  chargeexploitationid: ${myItem.chargeexploitationid}  chargeexploitationname: ${myItem.chargeexploitationname} ');
          },
        ),
      ],
    );
  }

  _replaceVirguleToPoint(String value) {
    return value.replaceAll(",", ".");
  }

  Future<MxExploitationChargeExploitationObject> _retourneECE(
      int idExploitation, int idChargeExploitation) async {
    final mxexploitationChargeExploitationBox =
        ObjectBox.mxexploitationChargeExploitationObjectBox;

    final query = (mxexploitationChargeExploitationBox!
        .query(MxExploitationChargeExploitationObject_.mxexploitation
            .equals(idExploitation)
            .and(MxExploitationChargeExploitationObject_
                .mxchargeexploitationObject
                .equals(idChargeExploitation)))
        .build());
    MxExploitationChargeExploitationObject? result = query.findFirst();
    query.close();
    print('result ${result?.toJson()}');
/*
    Query<ExploitationChargeExploitationObject> queryt =
        exploitationChargeExploitationBox!
            .query(ExploitationChargeExploitationObject_.exploitationid
                .equals(idExploitation)
                .and(ExploitationChargeExploitationObject_.chargeexploitationid
                    .equals(idChargeExploitation)))
            .build();

    final mesExploitationChargeExploitationBoxt = queryt.find();
    queryt.close();
    */
    /*
    final builder = mxexploitationChargeExploitationBox!.query(
        ExploitationChargeExploitationObject_.exploitationid
            .equals(idExploitation)
            .and(ExploitationChargeExploitationObject_.chargeexploitationid
                .equals(idChargeExploitation)));

    final builder = mxexploitationChargeExploitationBox!.query();
    final query = builder.build();
    final mesExploitationChargeExploitationBox = query.find();
*/
    if (result != null) {
      return result;
    } else {
      MxExploitationChargeExploitationObject myObject =
          MxExploitationChargeExploitationObject(
        id: 0,
        date: DateTime.now(),
        unite: '',
        pu: 0,
        quantite: 0,
        valeur: 0,
        observation: '',
      );
      return myObject;
    }
  }

/*
  Future<List<ExploitationChargeExploitationObject>> retourneECE(
      int idExploitation, int idChargeExploitation) async {
    final List<ExploitationChargeExploitationObject> ListECE = [];
    final ExploitationChargeExploitationObject myObject =
        ExploitationChargeExploitationObject(
            id: 0,
            exploitationchargeexploitationid: 0,
            date: DateTime.now(),
            unite: '',
            pu: 0,
            quantite: 0,
            valeur: 0,
            observation: '',
            chargeexploitationid: 0,
            chargeexploitationname: '',
            typechargeexploitationid: 0,
            typechargeexploitationname: '',
            famillechargeexploitationid: 0,
            famillechargeexploitationname: '',
            exploitationid: 0);
    final exploitationChargeExploitationBox =
        ObjectBox.exploitationChargeExploitationBox;
    final builder = exploitationChargeExploitationBox!.query(
        ExploitationChargeExploitationObject_.exploitationid
            .equals(idExploitation)
            .and(ExploitationChargeExploitationObject_.chargeexploitationid
                .equals(idChargeExploitation)));

    final query = builder.build();
    final mesExploitationChargeExploitationBox = query.find();

    if (mesExploitationChargeExploitationBox.length > 0) {
      ListECE.add(mesExploitationChargeExploitationBox.first);
    } else {
      ListECE.add(myObject);
    }
    return ListECE;
  }
  */

  _montantTotal(String prix, String quantite) {
    prix = _replaceVirguleToPoint(prix);
    quantite = _replaceVirguleToPoint(quantite);
    double pu = prix.isNotEmpty ? double.parse(prix) : 0;
    double qte = quantite.isNotEmpty ? double.parse(quantite) : 0;
    double produit = pu * qte;
    return produit;
  }

  void _showDialogEditItem(
      BuildContext context, int idExploitation, Item item) {
    _textFieldPuController.text = item.pu.toString();
    _textFieldQteController.text = item.qte.toString();
    _textFieldTotalController.text = item.valeur.toString();
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(item.name),
          content: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            //position
            mainAxisSize: MainAxisSize.min,
            // wrap content in flutter
            children: <Widget>[
              TextField(
                onChanged: (value) {
                  // print('value: $value');
                  double total = _montantTotal(
                      value, _textFieldQteController.text.toString());
                  print('total: $total');

                  _textFieldTotalController.text = total.toString();
                },
                controller: _textFieldPuController,
                readOnly: false,
                textAlign: TextAlign.right,
                inputFormatters: <TextInputFormatter>[
                  FilteringTextInputFormatter.allow(RegExp(_getRegexString())),
                  TextInputFormatter.withFunction(
                    (oldValue, newValue) => newValue.copyWith(
                      text: newValue.text.replaceAll('.', ','),
                    ),
                  ),
                ],
                decoration: InputDecoration(
                  labelText: 'Prix Unit√©',
                  labelStyle:
                      TextStyle(fontSize: 15, color: Colors.grey.shade400),
                  contentPadding: const EdgeInsets.symmetric(
                      vertical: 10.0, horizontal: 10.0),
                  border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10)),
                ),
                keyboardType:
                    const TextInputType.numberWithOptions(decimal: true),
              ),
              
              
              const SizedBox(
                height: 10,
              ),
              TextField(
                onChanged: (value) {
                  // print('value: $value');
                  double total = _montantTotal(
                      _textFieldPuController.text.toString(), value);
                  print('total: $total');

                  _textFieldTotalController.text = total.toString();
                },
                controller: _textFieldQteController,
                readOnly: false,
                textAlign: TextAlign.right,
                inputFormatters: <TextInputFormatter>[
                  FilteringTextInputFormatter.allow(RegExp(_getRegexString())),
                  TextInputFormatter.withFunction(
                    (oldValue, newValue) => newValue.copyWith(
                      text: newValue.text.replaceAll('.', ','),
                    ),
                  ),
                ],
                decoration: InputDecoration(
                  labelText: 'Quantit√©',
                  labelStyle:
                      TextStyle(fontSize: 15, color: Colors.grey.shade400),
                  contentPadding: const EdgeInsets.symmetric(
                      vertical: 10.0, horizontal: 10.0),
                  border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10)),
                ),
                keyboardType:
                    const TextInputType.numberWithOptions(decimal: true),
              ),
              
              const SizedBox(
                height: 10,
              ),
              TextField(
                controller: _textFieldTotalController,
                readOnly: true,
                textAlign: TextAlign.right,
                inputFormatters: <TextInputFormatter>[
                  FilteringTextInputFormatter.allow(RegExp(_getRegexString())),
                  TextInputFormatter.withFunction(
                    (oldValue, newValue) => newValue.copyWith(
                      text: newValue.text.replaceAll('.', ','),
                    ),
                  ),
                ],
                decoration: InputDecoration(
                  labelText: 'Total',
                  labelStyle:
                      TextStyle(fontSize: 15, color: Colors.grey.shade400),
                  contentPadding: const EdgeInsets.symmetric(
                      vertical: 10.0, horizontal: 10.0),
                  border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10)),
                ),
                keyboardType:
                    const TextInputType.numberWithOptions(decimal: true),
              ),
              const SizedBox(
                height: 20,
              ),
              Container(
                child: Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: <Widget>[
                    Align(
                      alignment: Alignment.topLeft,
                      child: Container(
                        padding: const EdgeInsets.symmetric(horizontal: 10.0),
                        child: SizedBox.fromSize(
                          size: const Size(56, 56),
                          child: ClipOval(
                            child: Material(
                              color: Colors.greenAccent,
                              child: InkWell(
                                splashColor: Colors.amberAccent,
                                onTap: () {
                                  print(
                                      'idExploitation: $idExploitation  idECE: ${item.chargeexploitationid} nameECE: ${item.chargeexploitationname} Qte: ${_textFieldQteController.text} Pu: ${_textFieldPuController.text} Total: ${_textFieldTotalController.text}');

                                  MxExploitationChargeExploitationObject
                                      exploitationChargeExploitationToInsert =
                                      MxExploitationChargeExploitationObject(
                                    id: 0,
                                    unite: item.unite,
                                    date: DateTime.parse(item.date.toString()),
                                    pu: double.parse(_replaceVirguleToPoint(
                                        _textFieldPuController.text)),
                                    quantite: double.parse(
                                        _replaceVirguleToPoint(
                                            _textFieldQteController.text)),
                                    valeur: double.parse(_replaceVirguleToPoint(
                                        _textFieldTotalController.text)),
                                    observation: '',
                                  );

                                  _retourneECE(
                                          int.parse(
                                              item.exploitationid.toString()),
                                          int.parse(item.chargeexploitationid
                                              .toString()))
                                      .then((value) {
                                    //print(value.toJson());

                                    if (value.id == 0) {
                                      print('RETOUR NOUVEAU');
                                      print(
                                          exploitationChargeExploitationToInsert
                                              .toJson());

                                      final mxexploitationBox =
                                          ObjectBox.mxexploitationBox;
                                      MxExploitationObject myExploitation =
                                          mxexploitationBox!.get(int.parse(
                                              item.exploitationid.toString()))!;
                                      print(myExploitation);
                                      exploitationChargeExploitationToInsert
                                          .mxexploitation
                                          .target = myExploitation;

                                      final mxchargeExploitationsBox =
                                          ObjectBox.mxchargeExploitationsBox;
                                      MxChargeExploitationObject
                                          myChargeExploitation =
                                          mxchargeExploitationsBox!.get(
                                              int.parse(item
                                                  .chargeexploitationid
                                                  .toString()))!;
                                      print(myChargeExploitation);
                                      exploitationChargeExploitationToInsert
                                          .mxchargeexploitationObject
                                          .target = myChargeExploitation;

                                      int id = ObjectBox
                                          .mxexploitationChargeExploitationObjectBox!
                                          .put(
                                              exploitationChargeExploitationToInsert);
                                      print('ADD NOUVEAU ${id}');
                                    } else {
                                      print('RETOUR UPDATE');

                                      final mxexploitationChargeExploitationObjectBox =
                                          ObjectBox.mxexploitationChargeExploitationObjectBox;
                                      MxExploitationChargeExploitationObject exploitationChargeExploitationToUpdate =
                                          mxexploitationChargeExploitationObjectBox!.get(
                                              int.parse(value.id
                                                  .toString()))!;

                                      exploitationChargeExploitationToUpdate.pu =
                                          double.parse(
                                              _replaceVirguleToPoint(
                                                  _textFieldPuController.text));
                                      exploitationChargeExploitationToUpdate
                                          .quantite =
                                          double.parse(
                                              _replaceVirguleToPoint(
                                                  _textFieldQteController.text));
                                      exploitationChargeExploitationToUpdate
                                          .valeur =
                                          double.parse(
                                              _replaceVirguleToPoint(
                                                  _textFieldTotalController
                                                      .text));
                

                                      print('retour ${exploitationChargeExploitationToUpdate.toJson()}');

                                      ObjectBox.mxexploitationChargeExploitationObjectBox!.put(exploitationChargeExploitationToUpdate);
                                    }
                                  });

/*
                                  _generateExploitationChargeExploitation(
                                      int.parse(
                                          item.exploitationid.toString()));
*/
                                  //setState(() {});
                                  Navigator.of(context).pop();
                                },
                                child: Column(
                                  mainAxisAlignment: MainAxisAlignment.center,
                                  children: const <Widget>[
                                    Icon(Icons.add), // <-- Icon
                                    Text("Ok"), // <-- Text
                                  ],
                                ),
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                    Align(
                      alignment: Alignment.center,
                      child: Container(
                          padding: const EdgeInsets.symmetric(horizontal: 10.0),
                          child: SizedBox.fromSize(
                            size: const Size(56, 56),
                            child: ClipOval(
                              child: Material(
                                color: Colors.redAccent,
                                child: InkWell(
                                  splashColor:
                                      const Color.fromRGBO(255, 215, 64, 1),
                                  onTap: () {
                                    print('item: ' + item.toString());
                                    _retourneECE(
                                            int.parse(
                                                item.exploitationid.toString()),
                                            int.parse(item.chargeexploitationid
                                                .toString()))
                                        .then((value) {
                                      print(value.toJson());
                                      if (value.id == 0) {
                                        print('RETOUR RIEN');
                                      } else {
                                        print('RETOUR DELETE: ${value.id}');

                                        ObjectBox
                                            .exploitationChargeExploitationBox!
                                            .remove(value.id);
                                      }
                                    });
                                    _generateExploitationChargeExploitation(
                                        int.parse(
                                            item.exploitationid.toString()));
                                    Navigator.of(context).pop();
                                  },
                                  child: Column(
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    children: const <Widget>[
                                      Icon(Icons.delete), // <-- Icon
                                      Text("Delete"), // <-- Text
                                    ],
                                  ),
                                ),
                              ),
                            ),
                          )),
                    ),
                    Align(
                      alignment: Alignment.bottomRight,
                      child: Container(
                          padding: const EdgeInsets.symmetric(horizontal: 10.0),
                          child: SizedBox.fromSize(
                            size: const Size(56, 56),
                            child: ClipOval(
                              child: Material(
                                color: Colors.amberAccent,
                                child: InkWell(
                                  splashColor: Colors.green,
                                  onTap: () {
                                    Navigator.of(context).pop();
                                  },
                                  child: Column(
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    children: const <Widget>[
                                      Icon(Icons.close), // <-- Icon
                                      Text("Fermer"), // <-- Text
                                    ],
                                  ),
                                ),
                              ),
                            ),
                          )),
                    ),
                  ],
                ),
              ),
            ],
          ),
          /*
          actions: <Widget>[
            TextButton(
              child: const Text("Valider"),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
            TextButton(
              child: const Text("Annuler"),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
          ],
          */
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    context.read<EceByExploitationBloc>().add(ResetEventEceByExploitation());

    return BlocConsumer<EceByExploitationBloc, EceByExploitationState>(
      listener: (context, state) {},
      builder: (context, state) {
        print(state);

        if (state is EceByExploitationInitialState) {
          print(
              'xxxxxxxxxxxxxxxxxxxxxxxxx INITIAL:  ${widget.idExploitation}  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx');
          //if (widget.idExploitation == 0) widget.idExploitation = 1;

          context.read<EceByExploitationBloc>().add(LoadEceByExploitationEvent(
                idExploitation: widget.idExploitation,
              ));

          return const CircularProgressIndicator();
        } else if (state is EceByExploitationLoadingState) {
          print(
              'xxxxxxxxxxxxxxxxxxxxxxxxx LOADING:  ${widget.idExploitation}  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx');

          return const Center(child: CircularProgressIndicator());
        } else if (state is EceByExploitationLoadedState) {
          print(
              'xxxxxxxxxxx LODEAD:  ${widget.idExploitation} xxxxxxxxxxxxxxxxx');

          // _generateExploitationChargeExploitation();

          List<ExploitationChargeExploitationObject>
              listExploitationChargeExploitationObject = state.apiResult;
          // print(listExploitationChargeExploitationObject.toString());

          List<MxTypeChargeExploitationObject>
              listTypeChargeExploitationObject = [];
/*
          listExploitationChargeExploitationObject.forEach((element) {
            print(element.typechargeexploitationid.toString() +
                ' ' +
                element.typechargeexploitationname);
          });
*/
          for (var element in listExploitationChargeExploitationObject) {
            listTypeChargeExploitationObject
                .removeWhere((e) => element.typechargeexploitationid == e.id);

            listTypeChargeExploitationObject.add(MxTypeChargeExploitationObject(
                id: element.typechargeexploitationid,
                name: element.typechargeexploitationname));
          }

          listTypeChargeExploitationObject.sort((a, b) => a.id.compareTo(b.id));

/*
          listTypeChargeExploitationObject.forEach((element) {
            print(element.toJson());
          });
*/
          List<ExploitationChargeExploitationObject> retourne(int typeCharge) {
            var retour = listExploitationChargeExploitationObject
                .where((o) => o.typechargeexploitationid == typeCharge)
                .toList();

            for (var element in retour) {
              print(
                  '-- ${typeCharge} ---- ${element.chargeexploitationname} ---- ${element.quantite} -- ${element.valeur} --------');
            }

            return retour;
          }

/*
          listTypeChargeExploitationObject.forEach((element) {
            print(element.name);
            retourne(element.id);
          });
*/
          List<Item> retourneTable(int typeCharge) {
            var retour = listExploitationChargeExploitationObject
                .where((o) => o.typechargeexploitationid == typeCharge)
                .toList();

            List<Item> retourTable = [];

            for (var element in retour) {
              print(
                  ' OK - ${typeCharge} -  ${element.typechargeexploitationname} - ${element.chargeexploitationname} - ${element.pu} - ${element.quantite} - ${element.valeur} ---');
              double myPu = element.pu;
              double myQte = element.quantite;
              double myValeur = element.pu * element.quantite;
              String myUnite = element.unite;
              String myObservation = element.observation!;

              Item myItem = Item(
                id: element.chargeexploitationid,
                exploitationid: element.exploitationid,
                name: element.chargeexploitationname,
                pu: myPu,
                qte: myQte,
                valeur: myValeur,
                unite: myUnite,
                date: element.date,
                observation: myObservation,
                exploitationchargeexploitationid:
                    element.exploitationchargeexploitationid,
                chargeexploitationid: element.chargeexploitationid,
                chargeexploitationname: element.chargeexploitationname,
                typechargeexploitationid: element.typechargeexploitationid,
                typechargeexploitationname: element.typechargeexploitationname,
                famillechargeexploitationid:
                    element.famillechargeexploitationid,
                famillechargeexploitationname:
                    element.famillechargeexploitationname,
              );

              if (myPu == 0) {
                // myPu = 10000;
                final mxchargeExploitationsBox =
                    ObjectBox.mxchargeExploitationsBox;
                final queryCharge = mxchargeExploitationsBox!
                    .query(MxChargeExploitationObject_.id
                        .equals(element.chargeexploitationid))
                    .build();
                final maChargeExploitationsBox = queryCharge.findFirst();
                // myPu = maChargeExploitationsBox!.pu;

                queryCharge.close();
                //print(maChargeExploitationsBox!.toJson());
                myPu = maChargeExploitationsBox!.pu;
              }
              myItem.pu = myPu;
              //print(myItem);

              retourTable.add(myItem);
            }

            return retourTable;
          }

/*
          listTypeChargeExploitationObject.forEach((element) {
            print(element.name);
            retourneTable(element.id);
          });

*/
          return SizedBox(
            height: MediaQuery.of(context).size.height * 0.6,
            child: Column(
              children: [
                Expanded(
                  child: MediaQuery.removePadding(
                    context: context,
                    removeTop: true,
                    child: ListView.builder(
                      itemCount: listTypeChargeExploitationObject == null
                          ? 0
                          : listTypeChargeExploitationObject.length,
                      itemBuilder: (context, index) {
                        return Container(
                          key:
                              ValueKey(listTypeChargeExploitationObject[index]),

                          margin: const EdgeInsets.only(bottom: 10, top: 12),
                          // height: 100,
                          padding: const EdgeInsets.only(
                              left: 10, right: 10, bottom: 5),
                          child: Container(
                            decoration: BoxDecoration(
                              color: const Color(0xFF363f93),
                              borderRadius: const BorderRadius.only(
                                  topRight: Radius.circular(20.0)),
                              boxShadow: [
                                BoxShadow(
                                    color: const Color(0xFF363f93)
                                        .withOpacity(0.3),
                                    offset: const Offset(-10.0, 10.0),
                                    blurRadius: 20.0,
                                    spreadRadius: 4.0),
                                //BoxShadow
                              ],
                            ),
                            padding: const EdgeInsets.only(
                                left: 6, top: 8.0, bottom: 6),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: <Widget>[
                                Text(
                                  '${listTypeChargeExploitationObject[index].id} - ${listTypeChargeExploitationObject[index].name}',
                                  style: const TextStyle(
                                      fontSize: 14,
                                      color: Colors.white,
                                      fontWeight: FontWeight.bold),
                                ),
                                const SizedBox(
                                  height: 2,
                                ),
                                loaderTable(
                                    context,
                                    retourneTable(
                                        listTypeChargeExploitationObject[index]
                                            .id)),
                                const SizedBox(
                                  height: 2,
                                ),
                              ],
                            ),
                          ),
                        );
                      },
                    ),
                  ),
                ),
              ],
            ),
          );
        } else if (state is EceByExploitationErrorState) {
          return const Center(
            child: Text("Uh oh! üò≠ Something went wrong!"),
          );
        }
        return const Text("Error");

        /*
    return Column(
      children: [
        Container(
            height: 160,
            decoration: BoxDecoration(
              borderRadius: BorderRadius.only(
                bottomRight: Radius.circular(50),
              ),
              color: Color(0xFF363f93),
              boxShadow: [
                new BoxShadow(
                    color: Color(0xFF363f93).withOpacity(0.3),
                    offset: new Offset(-10.0, 10.0),
                    blurRadius: 20.0,
                    spreadRadius: 4.0),
                //BoxShadow
              ],
            ),
            child: Stack(
              children: [
                Positioned(
                    top: 50,
                    left: 0,
                    child: Container(
                      height: 80,
                      width: 300,
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.only(
                          topRight: Radius.circular(50),
                          bottomRight: Radius.circular(50),
                        ),
                      ),
                    )),
              ],
            )),
        SizedBox(
          height: height * 0.02,
        ),
        Container(
          height: 290,
          child: Row(
            children: [
              /************************ INNER **********************/
              Expanded(
                child: FutureBuilder<List<ExploitationObject>>(
                  future: _foundExploitationObjects,
                  builder: (context, snapshot) {
                    if (snapshot.hasData) {
                      List<ExploitationObject>? data = snapshot.data;

                      return Column(mainAxisSize: MainAxisSize.min, children: [
                        Expanded(
                          child: PageView.builder(
                            //shrinkWrap: true,
                            scrollDirection: Axis.horizontal,
                            itemCount: data == null ? 0 : data.length,
                            onPageChanged: (index) {
                              idExploitation = snapshot.data![index].id;
                            },
                            itemBuilder: (context, index) {
                              var value = snapshot.data![index];
                              var compte =
                                  value.compte.isNotEmpty ? value.compte : '';
                              var filiere = '${value.filiere_name}';
                              var produit = '${value.produit_name}';
                              var variete = value.variete_name;
                              var surface = 'Surf.: ${value.superficie} Ha';
                              var op =
                                  'OP.: ${value.type_op_name} ${value.op_name}';
                              var producteur =
                                  'Producteur: ${value.prenom} ${value.nom}';
                              var production =
                                  'Prod.: ${value.production} ${value.unite}';
                              var annee = 'Annee: ${value.annee_name}';
                              var saison = value.saison_name;
                              var taux =
                                  ' ${_taux(value.production, value.superficie)} ${value.unite}/Ha';
                              return InkWell(
                                child: Card(
                                  key: ValueKey(snapshot.data![index].id),
                                  shape: RoundedRectangleBorder(
                                    side: BorderSide(
                                      color: Colors.green.shade300,
                                    ),
                                    borderRadius: BorderRadius.circular(15.0),
                                  ),
                                  child: Container(
                                    height: 290,
                                    child: Stack(
                                      children: [
                                        Positioned(
                                            child: Material(
                                          child: Container(
                                            height: 290,
                                            width: width,
                                            decoration: BoxDecoration(
                                              color: Colors.white,
                                              borderRadius:
                                                  BorderRadius.circular(0.0),
                                              boxShadow: [
                                                new BoxShadow(
                                                    color: Colors.grey
                                                        .withOpacity(0.3),
                                                    offset:
                                                        new Offset(-10.0, 10.0),
                                                    blurRadius: 20.0,
                                                    spreadRadius: 4.0),
                                                //BoxShadow
                                              ],
                                            ),
                                          ),
                                        )),
                                        Positioned(
                                            /*
                                                    top: 20,
                                                    left: 180,

                                                   */
                                            top: 20,
                                            left: 20,
                                            bottom: 20,
                                            child: Container(
                                              height: 290,
                                              // width: 160,
                                              child: Column(
                                                crossAxisAlignment:
                                                    CrossAxisAlignment.start,
                                                children: [
                                                  Text(
                                                    'N¬∞: ${(compte)}',
                                                    style: TextStyle(
                                                        fontSize: 18,
                                                        color:
                                                            Color(0xFF363f93),
                                                        fontWeight:
                                                            FontWeight.bold),
                                                  ),
                                                  Divider(color: Colors.black),
                                                  Text(
                                                    '${filiere} | ${produit} | ${variete}',
                                                    style: TextStyle(
                                                        fontSize: 18,
                                                        color: Colors.grey,
                                                        fontWeight:
                                                            FontWeight.bold),
                                                  ),
                                                  // Divider(color: Colors.black),
                                                  Text(
                                                    '${annee} | ${saison}',
                                                    style: TextStyle(
                                                        fontSize: 18,
                                                        color: Colors.grey,
                                                        fontWeight:
                                                            FontWeight.bold),
                                                  ),

                                                  Text(
                                                    '${surface} | ${production} | ${taux}',
                                                    style: TextStyle(
                                                        fontSize: 18,
                                                        color: Colors.grey,
                                                        fontWeight:
                                                            FontWeight.bold),
                                                  ),

                                                  Text(
                                                    '${op}',
                                                    style: TextStyle(
                                                        fontSize: 16,
                                                        color: Colors.grey,
                                                        fontWeight:
                                                            FontWeight.bold),
                                                  ),
                                                  // Divider(color: Colors.black),
                                                  Text(
                                                    '${producteur}',
                                                    style: TextStyle(
                                                        fontSize: 16,
                                                        color: Colors.grey,
                                                        fontWeight:
                                                            FontWeight.bold),
                                                  ),

                                                  Divider(color: Colors.black),
                                                  Text(
                                                    'Montant D√©penses',
                                                    style: TextStyle(
                                                        fontSize: 17,
                                                        color:
                                                            Color(0xFF363f93),
                                                        fontWeight:
                                                            FontWeight.bold),
                                                  ),

                                                  // Divider(color: Colors.black),
                                                  Text(
                                                    'Montant Produits',
                                                    style: TextStyle(
                                                        fontSize: 17,
                                                        color:
                                                            Color(0xFF363f93),
                                                        fontWeight:
                                                            FontWeight.bold),
                                                  ),

                                                  // Divider(color: Colors.black),
                                                  Text(
                                                    'RBE',
                                                    style: TextStyle(
                                                        fontSize: 17,
                                                        color:
                                                            Color(0xFF363f93),
                                                        fontWeight:
                                                            FontWeight.bold),
                                                  ),
                                                ],
                                              ),
                                            )),
                                      ],
                                    ),
                                  ),
                                ),
                                onDoubleTap: () {
                                  ApiConstants.exploitationObject.id = value.id;
                                  ApiConstants.exploitationObject.compte =
                                      value.compte;
                                  ApiConstants.exploitationObject.unite =
                                      value.unite;
                                  ApiConstants.exploitationObject
                                          .superficie_prevision =
                                      value.superficie_prevision;
                                  ApiConstants.exploitationObject
                                          .production_prevision =
                                      value.production_prevision;
                                  ApiConstants.exploitationObject.pu_prevision =
                                      value.pu_prevision;
                                  ApiConstants.exploitationObject.superficie =
                                      value.superficie;
                                  ApiConstants.exploitationObject.production =
                                      value.production;
                                  ApiConstants.exploitationObject.pu = value.pu;
                                  ApiConstants.exploitationObject.annne_id =
                                      value.annne_id;
                                  ApiConstants.exploitationObject.annee_name =
                                      value.annee_name;
                                  ApiConstants.exploitationObject.saison_id =
                                      value.saison_id;
                                  ApiConstants.exploitationObject.saison_name =
                                      value.saison_name;
                                  ApiConstants.exploitationObject.variete_id =
                                      value.variete_id;
                                  ApiConstants.exploitationObject.variete_name =
                                      value.variete_name;
                                  ApiConstants.exploitationObject.produit_id =
                                      value.produit_id;
                                  ApiConstants.exploitationObject.produit_name =
                                      value.produit_name;

                                  Get.toNamed('/editExploitationPage',
                                      arguments: {
                                        "AddOrUpdate": "UPDATE",
                                        "title": "Update Exploitation",
                                        "utilisateur": ApiConstants.utilisateur,
                                        "exploitationObject":
                                            ApiConstants.exploitationObject
                                      });
                                },
                              );
                            },
                          ),
                        ),
                      ]);
                    } else if (snapshot.hasError) {
                      return Text("${snapshot.error}");
                    }
                    // By default show a loading spinner.
                    return const CircularProgressIndicator();
                  },
                ),
              ),

              /************************ END INNER **********************/
            ],
          ),
        ),
        if (isDetail)
          Expanded(
            child: MediaQuery.removePadding(
                context: context,
                removeTop: true,
                child: ListView.builder(
                    itemCount: listTypeChargeExploitationObject == null
                        ? 0
                        : listTypeChargeExploitationObject.length,
                    itemBuilder: (context, index) {
                      return Container(
                        key: ValueKey(listTypeChargeExploitationObject[index]),

                        margin: const EdgeInsets.only(bottom: 10, top: 12),
                        // height: 100,
                        padding: const EdgeInsets.only(
                            left: 20, right: 20, bottom: 5),
                        child: Container(
                          decoration: BoxDecoration(
                            color: Color(0xFF363f93),
                            borderRadius: const BorderRadius.only(
                                topRight: Radius.circular(20.0)),
                            boxShadow: [
                              new BoxShadow(
                                  color: Color(0xFF363f93).withOpacity(0.3),
                                  offset: new Offset(-10.0, 10.0),
                                  blurRadius: 20.0,
                                  spreadRadius: 4.0),
                              //BoxShadow
                            ],
                          ),
                          padding: const EdgeInsets.only(
                              left: 6, top: 8.0, bottom: 6),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: <Widget>[
                              Text(
                                listTypeChargeExploitationObject[index].name,
                                style: TextStyle(
                                    fontSize: 14,
                                    color: Colors.white,
                                    fontWeight: FontWeight.bold),
                              ),
                              const SizedBox(
                                height: 2,
                              ),
                              for (var retour
                                  in _generateChargeExploitationItems(
                                      listTypeChargeExploitationObject[index]
                                          .id,
                                      IdProduit))
                                Text(
                                  '${retour.name} | Qt√©: ${mapQuantiteCharge[retour.id]} PU: ${mapPuCharge[retour.id]} | Total: ${mapValeurCharge[retour.id]} |',
                                  style: TextStyle(
                                    fontSize: 13,
                                    color: Colors.white,
                                  ),
                                ),
                              const SizedBox(
                                height: 2,
                              ),
                              Text(
                                'TOTAUX: ${_sumTypeChargeExploitationItems(listTypeChargeExploitationObject[index].id)} FCFA ',
                                style: TextStyle(
                                    fontSize: 14,
                                    color: Colors.white,
                                    fontWeight: FontWeight.bold),
                              ),
                            ],
                          ),
                        ),
                      );
                    })),
          )
      ],
    
    );
    */
      },
    );
  }

  Widget loaderTable(BuildContext context, List<Item> items) {
    return SizedBox(
      width: MediaQuery.of(context).size.width * 0.88,
      child: SingleChildScrollView(
        child: DataTable(
          sortColumnIndex: _currentSortColumn,
          sortAscending: _isAscending,
          columnSpacing: 0,
          dividerThickness: 5,
          decoration: BoxDecoration(
            border: Border.all(color: Colors.purple, width: 5),
            color: const Color.fromRGBO(237, 239, 245, 1),
            borderRadius: const BorderRadius.all(Radius.circular(8)),
          ),
          dataRowColor: MaterialStateColor.resolveWith(
              (Set<MaterialState> states) =>
                  states.contains(MaterialState.selected)
                      ? Colors.blue
                      : const Color.fromARGB(100, 215, 217, 219)),
          dataRowHeight: 40,
          dataTextStyle:
              const TextStyle(fontStyle: FontStyle.italic, color: Colors.black),
          headingRowColor:
              MaterialStateColor.resolveWith((states) => Colors.teal),
          headingRowHeight: 40,
          headingTextStyle:
              const TextStyle(fontWeight: FontWeight.bold, color: Colors.black),
          horizontalMargin: 10,
          showBottomBorder: true,
          showCheckboxColumn: false,
          columns: _createColumns(),
          rows: items.map((item) => _createRow(item)).toList(),
        ),
      ),
    );
  }

  String _getRegexString() => true ? r'[0-9]+[,.]{0,1}[0-9]*' : r'[0-9]';

  void _generateExploitationChargeExploitation(int idExploitation) {
    blocEceByExploitation
        .add((LoadEceByExploitationEvent(idExploitation: idExploitation)));
    blocEceByExploitation.add((ResetEventEceByExploitation()));
  }
}

class Item {
  Item({
    required this.id,
    required this.name,
    required this.pu,
    required this.qte,
    required this.valeur,
    /** */
    required this.exploitationid,
    required this.unite,
    required this.date,
    required this.observation,
    required this.exploitationchargeexploitationid,
    required this.chargeexploitationid,
    required this.chargeexploitationname,
    required this.typechargeexploitationid,
    required this.typechargeexploitationname,
    required this.famillechargeexploitationid,
    required this.famillechargeexploitationname,
  });

  int id;
  String name;
  double pu;
  double qte;
  double valeur;
  //** */
  int exploitationid;
  String unite;
  DateTime date;
  String observation;
  int exploitationchargeexploitationid;
  int chargeexploitationid;
  String chargeexploitationname;
  int typechargeexploitationid;
  String typechargeexploitationname;
  int famillechargeexploitationid;
  String famillechargeexploitationname;
}

class TextPartStyleDefinition {
  TextPartStyleDefinition({
    required this.pattern,
    required this.style,
  });

  final String pattern;
  final TextStyle style;
}

class StyleableTextFieldController extends TextEditingController {
  StyleableTextFieldController({
    required this.styles,
  }) : combinedPattern = styles.createCombinedPatternBasedOnStyleMap();

  final TextPartStyleDefinitions styles;
  final Pattern combinedPattern;
}

class TextPartStyleDefinitions {
  TextPartStyleDefinitions({required this.definitionList});

  final List<TextPartStyleDefinition> definitionList;

  RegExp createCombinedPatternBasedOnStyleMap() {
    final String combinedPatternString = definitionList
        .map<String>(
          (TextPartStyleDefinition textPartStyleDefinition) =>
              textPartStyleDefinition.pattern,
        )
        .join('|');

    return RegExp(
      combinedPatternString,
      multiLine: true,
      caseSensitive: false,
    );
  }
}
