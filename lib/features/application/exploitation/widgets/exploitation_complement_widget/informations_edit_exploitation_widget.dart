import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:intl/intl.dart';

import 'package:flutter_dropdown_plus/dropdown.dart';
import 'package:flutter_dropdown_plus/dropdown_item.dart';

import '../../../../../core/data/model/ObjectBox/objectBoxModels.dart';
import '../../../../../core/data/service/ObjectBoxHelper.dart';
import '../../../../../core/res/constants.dart';
import '../../../../../objectbox.g.dart';

class InformationsEditExploitationWidget extends StatefulWidget {
  late int idExploitation;

  InformationsEditExploitationWidget({Key? key, required this.idExploitation})
      : super(key: key);

  @override
  State<InformationsEditExploitationWidget> createState() =>
      _InformationsEditExploitationWidgetState();
}

class _InformationsEditExploitationWidgetState
    extends State<InformationsEditExploitationWidget> {
  final TextEditingController _dateTextEditingController =
      TextEditingController();
  final formatter = NumberFormat('#,##0.0', 'fr_FR');
  final dateFormat = DateFormat('dd MMMM yyyy', 'fr_FR');
  final int _currentSortColumn = 0;
  final bool _isAscending = true;

  String singleSelectedVarieteId = "";
  String singleSelectedAnneeId = "";
  String singleSelectedSaisonId = "";

  final TextEditingController _textFieldSurfaceEmblaveeController =
      TextEditingController();

  Item itemExploitation = Item(
      idExploitation: 0,
      date: DateTime.now(),
      compte: '',
      filiere: '',
      produit: '',
      variete: '',
      surface: '',
      op: '',
      annee: '',
      saison: '',
      formattedDate: '',
      taux: '',
      montants: []);

  @override
  void initState() {
    super.initState();

    print('idExploitation: ' + Constants.idExploitation.toString());
    final mxexploitationsBox = ObjectBox.mxexploitationBox;
    MxExploitationObject? value = mxexploitationsBox!
        .query(MxExploitationObject_.id
            .equals(Constants.exploitationObject.exploitation_id))
        .build()
        .findFirst();

    itemExploitation.compte = value!.compte.toString();
    itemExploitation.filiere =
        '${value.mxvarieteObject.target!.mxProduitObject.target!.mxFiliereObject.target!.name}'; //'filiere'; //value.mxvarieteObject.target!.mxProduitObject.target!.mxFiliereObject.target!.name;
    itemExploitation.produit =
        '${value.mxvarieteObject.target!.mxProduitObject.target!.name}';
    itemExploitation.variete = '${value.mxvarieteObject.target!.name}';
    itemExploitation.surface = '${value.surface} Ha';

    itemExploitation.formattedDate = dateFormat.format(value.date);

    itemExploitation.op = ' ';

    itemExploitation.annee = '${value.mxanneeObject.target!.name}';
    itemExploitation.saison = '${value.mxsaisonObject.target!.name}';
    itemExploitation.taux = 'Taux/Ha';
    Constants.idExploitation = value.id;

    singleSelectedVarieteId = value.mxvarieteObject.target!.id.toString();
    singleSelectedAnneeId = value.mxanneeObject.target!.id.toString();
    singleSelectedSaisonId = value.mxsaisonObject.target!.id.toString();
    _dateTextEditingController.text = itemExploitation.formattedDate;
    _textFieldSurfaceEmblaveeController.text = itemExploitation.surface;

    Montant myMontantDepense = Montant(
        name: 'Montant Dépenses',
        somme: Constants.totalCharges(Constants.idExploitation));
    Montant myMontantRBE = Montant(name: 'R.B.E', somme: 0);
    Montant myMontantCredit = Montant(
        name: 'Crédits',
        somme: Constants.totalCredits(Constants.idExploitation));

    Montant myMontantRemboursement = Montant(
        name: 'Remboursements',
        somme: Constants.totalRemboursements(Constants.idExploitation));

    itemExploitation.montants.add(myMontantDepense);
    itemExploitation.montants.add(myMontantRBE);
    itemExploitation.montants.add(myMontantCredit);
    itemExploitation.montants.add(myMontantRemboursement);
  }

  @override
  Widget build(BuildContext context) {
    return _itemInfosExploitation(widget.idExploitation);
  }

  List<DataColumn> _createMontantColumns() {
    return [
      const DataColumn(
        label: Text('Désignation'),
        numeric: false,
      ),
      const DataColumn(
        label: Text('Somme'),
        numeric: true,
      ),
    ];
  }

  DataRow _createMontantRow(Montant montant) {
    return DataRow(
      // index: item.id, // for DataRow.byIndex
      key: ValueKey(montant.name),

      color:MaterialStateColor.resolveWith((states) => const Color.fromARGB(100, 215, 217, 219)),
      cells: [
        DataCell(Text(montant.name)),
        DataCell(Text('${formatter.format(montant.somme)} FCFA')),
      ],
    );
  }

  Widget loaderMontantTable(BuildContext context, List<Montant> montants) {
    return SizedBox(
      width: MediaQuery.of(context).size.width * 0.88,
      child: SingleChildScrollView(
        child: DataTable(
          sortColumnIndex: _currentSortColumn,
          sortAscending: _isAscending,
          columnSpacing: 0,
          dividerThickness: 5,
          decoration: BoxDecoration(
            border: Border.all(color: Colors.purple, width: 5),
            color: const Color.fromRGBO(237, 239, 245, 1),
            borderRadius: const BorderRadius.all(Radius.circular(8)),
          ),
          dataRowColor: MaterialStateColor.resolveWith((states) =>
              states.contains(MaterialState.selected) ? Colors.blue
                  : const Color.fromARGB(100, 215, 217, 219)),
          dataRowHeight: 35,
          dataTextStyle:
              const TextStyle(fontStyle: FontStyle.italic, color: Colors.black),
          headingRowColor: MaterialStateColor.resolveWith((states) => Colors.white),
          headingRowHeight: 35,
          headingTextStyle:
              const TextStyle(fontWeight: FontWeight.bold, color: Colors.black),
          horizontalMargin: 10,
          showBottomBorder: true,
          showCheckboxColumn: false,
          columns: _createMontantColumns(),
          rows: montants.map((montant) => _createMontantRow(montant)).toList(),
        ),
      ),
    );
  }

  _renderVarietesItems() {
    //final double height = MediaQuery.of(context).size.height;
    List<DropdownItem> itemVarietesList = [];
    List<DropdownItem> list = [];

    final mxvarietesBox = ObjectBox.mxvarietesBox;
    Query<MxVarieteObject> query = mxvarietesBox!.query().build();

    var mesVarietes = query.find();

    mesVarietes?.forEach((element) {
      list.add(DropdownItem(
          id: element.id.toString(),
          //value:'${element.produitname.toString().toUpperCase()} | ${element.name.toString().toUpperCase()}',
          value:
              '${element.mxProduitObject.target!.name.toString().toUpperCase()} | ${element.name.toString().toUpperCase()}',
          data: MxVarieteObject(
              id: element.id,
              name: element.name,
              surface_unite: element.surface_unite,
              quantite_unite: element.quantite_unite,
              pu_unite: element.pu_unite,
              rendement_unite: element.rendement_unite,
              isActive: element.isActive)));
    });

    itemVarietesList = list;
    return Dropdown.singleSelection(
        title: "CHOISIR UNE VARIETE",
        labelText: "VARIETE",
        hintText: "Selection variété",
        list: itemVarietesList,
        selectedId: singleSelectedVarieteId,
        onTapAddItem: (searchValue) {
          print(searchValue);
        },
        onSingleItemListener: (selectedItem) {
          setState(() {
            singleSelectedVarieteId = selectedItem.id;
          });

          String itemId = selectedItem.id;
          String itemName = selectedItem.value;
          MxVarieteObject varieteObject = selectedItem.data as MxVarieteObject;

          print(
              "Item Id: $itemId -- Item Name: $itemName ## Other Details ## Variete Id: ${varieteObject.id} -- Variete name: ${varieteObject.name}");
        });
  }

  _renderAnneesItems() {
    List<DropdownItem> itemAnneesList = [];
    List<DropdownItem> list = [];

    final mxanneeBox = ObjectBox.mxanneesBox;
    var mesAnnees = mxanneeBox?.getAll();
    mesAnnees?.forEach((element) {
      list.add(DropdownItem(
          id: element.id.toString(),
          value: element.name.toString(),
          data: MxAnneeObject(
            id: element.id,
            valeur: element.valeur,
            name: element.name,
          )));
    });

    itemAnneesList = list;
    return Dropdown.singleSelection(
        title: "CHOISIR UNE ANNEE",
        labelText: "ANNEE",
        hintText: "Selection année",
        list: itemAnneesList,
        selectedId: singleSelectedAnneeId,
        onTapAddItem: (searchValue) {
          print(searchValue);
        },
        onSingleItemListener: (selectedItem) {
          setState(() {
            singleSelectedAnneeId = selectedItem.id;
          });

          String itemId = selectedItem.id;
          String itemName = selectedItem.value;
          MxAnneeObject anneeObject = selectedItem.data as MxAnneeObject;

          print(
              "Item Id: $itemId -- Item Name: $itemName ## Other Details ## Annne Id: ${anneeObject.id} -- Annee name: ${anneeObject.name}");
        });
  }

  _renderSaisonsItems() {
    List<DropdownItem> itemSaisonsList = [];
    List<DropdownItem> list = [];

    final mxsaisonBox = ObjectBox.mxsaisonsBox;
    var mesSaisons = mxsaisonBox?.getAll();

    mesSaisons?.forEach((element) {
      print(element.name);
      list.add(DropdownItem(
          id: element.id.toString(),
          value: element.name.toString(),
          data: MxSaisonObject(
            id: element.id,
            name: element.name,
            description: element.description,
          )));
    });
    itemSaisonsList = list;
    return Dropdown.singleSelection(
        title: "CHOISIR UNE SAISON",
        labelText: "SAISON",
        hintText: "Selection saison",
        list: itemSaisonsList,
        selectedId: singleSelectedSaisonId,
        onTapAddItem: (searchValue) {
          print(searchValue);
        },
        onSingleItemListener: (selectedItem) {
          setState(() {
            singleSelectedSaisonId = selectedItem.id;
          });

          String itemId = selectedItem.id;
          String itemName = selectedItem.value;
          MxSaisonObject saisonObject = selectedItem.data as MxSaisonObject;

          print(
              "Item Id: $itemId -- Item Name: $itemName ## Other Details ## Variete Id: ${saisonObject.id} -- Variete name: ${saisonObject.name}");
        });
  }

  _replaceVirguleToPoint(String value) {
    return value.replaceAll(",", ".");
  }

  void _showDialogEditItem(BuildContext context, int idExploitation) {
    // set up the buttons
    Widget remindButton = TextButton(
      child: Text("Remind me later"),
      onPressed: () {},
    );
    Widget cancelButton = TextButton(
      child: Text("Cancel"),
      onPressed: () {},
    );
    Widget validerButton = TextButton(
      child: Container(
        color: Colors.green,
        padding: const EdgeInsets.all(14),
        child: const Text("okay"),
      ),
      onPressed: () {},
    );
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          //title: Text(item.name),
          content: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            //position
            mainAxisSize: MainAxisSize.min,
            // wrap content in flutter
            children: <Widget>[
              // Marge avant le conteneur
              SizedBox(height: 25),
              // Titre de la page avec marge
              Padding(
                padding: EdgeInsets.symmetric(horizontal: 8.0),
                child: Container(
                  width: double.infinity,
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      colors: [Colors.blue, Colors.blueAccent],
                      begin: Alignment.topCenter,
                      end: Alignment.bottomCenter,
                    ),
                    borderRadius: BorderRadius.vertical(
                      top: Radius.circular(15),
                      bottom: Radius.circular(15),
                    ),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.grey.withOpacity(0.5),
                        spreadRadius: 5,
                        blurRadius: 7,
                        offset: Offset(0, 3), // changes position of shadow
                      ),
                    ],
                  ),
                  padding:
                      EdgeInsets.symmetric(vertical: 10.0, horizontal: 10.0),
                  child: Text(
                    'Modifier ...',
                    style: TextStyle(
                      fontSize: 20.0,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
                ),
              ),
              // Marge après le conteneur
              SizedBox(height: 25),
              TextField(
                controller: _dateTextEditingController,
                //editing controller of this TextField
                decoration: InputDecoration(
                  //icon: Icon(Icons.calendar_today),
                  labelText: "Date", //label text of field
                  labelStyle:
                      TextStyle(fontSize: 18, color: Colors.grey.shade800),
                  border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10)),
                ),

                readOnly: true,
                //set it true, so that user will not able to edit text
                onTap: () async {
                  DateTime? pickedDate = await showDatePicker(
                      context: context,
                      locale: const Locale("fr", "FR"),
                      initialDate: DateTime.now(),
                      firstDate: DateTime(2022),
                      lastDate: DateTime(2030),
                      builder: (BuildContext context, Widget? child) {
                        return Theme(
                          data: ThemeData.dark(),
                          child: child!,
                        );
                      });

                  if (pickedDate != null) {
                    print(
                        pickedDate); //pickedDate output format => 2021-03-10 00:00:00.000
                    String formattedDate =
                        DateFormat('dd MMMM yyyy', 'fr_FR').format(pickedDate);
                    //String formattedDate = DateFormat('dd MMMM yyyy', 'fr_FR');
                    print(
                        formattedDate); //formatted date output using intl package =>  2021-03-16
                    /*
                    setState(() {
                      _dateTextEditingController.text =formattedDate; //set output date to TextField value.
                    });
                    */

                    _dateTextEditingController.text = formattedDate;
                  } else {}
                },
              ),
              const SizedBox(
                height: 15,
              ),
              _renderVarietesItems(),
              const SizedBox(
                height: 15,
              ),
              _renderAnneesItems(),
              const SizedBox(
                height: 15,
              ),
              _renderSaisonsItems(),
              const SizedBox(
                height: 10,
              ),
              TextField(
                onChanged: (value) {
                  print('value: $value');
                },
                controller: _textFieldSurfaceEmblaveeController,
                readOnly: false,
                textAlign: TextAlign.right,
                inputFormatters: <TextInputFormatter>[
                  FilteringTextInputFormatter.allow(RegExp(_getRegexString())),
                  TextInputFormatter.withFunction(
                    (oldValue, newValue) => newValue.copyWith(
                      text: newValue.text.replaceAll('.', ','),
                    ),
                  ),
                ],
                decoration: InputDecoration(
                  labelText: 'Surface',
                  labelStyle:
                      TextStyle(fontSize: 15, color: Colors.grey.shade400),
                  contentPadding: const EdgeInsets.symmetric(
                      vertical: 10.0, horizontal: 10.0),
                  border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10)),
                ),
                keyboardType:
                    const TextInputType.numberWithOptions(decimal: true),
              ),
              const SizedBox(
                height: 20,
              ),
              /*
              Container(
                child: Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: <Widget>[
                    Align(
                      alignment: Alignment.bottomLeft,
                      child: Container(
                        padding: const EdgeInsets.symmetric(horizontal: 10.0),
                        child: SizedBox.fromSize(
                          size: const Size(56, 56),
                          child: ClipOval(
                            child: Material(
                              color: Colors.greenAccent,
                              child: InkWell(
                                splashColor: Colors.amberAccent,
                                onTap: () {},
                                child: Column(
                                  mainAxisAlignment: MainAxisAlignment.center,
                                  children: const <Widget>[
                                    Icon(Icons.add), // <-- Icon
                                    Text("Ok"), // <-- Text
                                  ],
                                ),
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                    Align(
                      alignment: Alignment.bottomRight,
                      child: Container(
                          padding: const EdgeInsets.symmetric(horizontal: 10.0),
                          child: SizedBox.fromSize(
                            size: const Size(56, 56),
                            child: ClipOval(
                              child: Material(
                                color: Colors.amberAccent,
                                child: InkWell(
                                  splashColor: Colors.green,
                                  onTap: () {
                                    Navigator.of(context).pop();
                                  },
                                  child: Column(
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    children: const <Widget>[
                                      Icon(Icons.close), // <-- Icon
                                      Text("Fermer"), // <-- Text
                                    ],
                                  ),
                                ),
                              ),
                            ),
                          )),
                    ),
                  ],
                ),
              ),
            */
              Container(
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: <Widget>[
                    ElevatedButton(
                      onPressed: () {
                        // UPDATE THE EXPLOITATION
                        final mxexploitationsBox = ObjectBox.mxexploitationBox;
                        MxExploitationObject exploitationToUpdate =
                            mxexploitationsBox!.get(idExploitation)!;

                        print(exploitationToUpdate.toJson());
                        print(exploitationToUpdate.mxanneeObject.target!
                            .toJson());
                        print(exploitationToUpdate.mxsaisonObject.target!
                            .toJson());
                        print(exploitationToUpdate.mxvarieteObject.target!
                            .toJson());

                        //print(_dateTextEditingControllerX.text.trim());

                        String originalDateString = _dateTextEditingController
                            .text
                            .trim(); // Example date string in dd-MM-yyyy format

                        // Define the original and target date formats
                        DateFormat originalFormat =
                            DateFormat('dd MMMM yyyy', 'fr_FR');
                        DateFormat targetFormat = DateFormat('yyyy-MM-dd');

                        // Parse the original date string into a DateTime object
                        DateTime parsedDate =
                            originalFormat.parse(originalDateString);

                        // Format the DateTime object into the target date string
                        String targetDateString =
                            targetFormat.format(parsedDate);

                        //print(targetDateString); // Output: 2023-06-21

                        exploitationToUpdate.date =
                            DateTime.parse(targetDateString);
                        // exploitationToUpdate.unite = _uniteTextEditingController.text.trim();
                        String surfaceValue = _replaceVirguleToPoint(
                            _textFieldSurfaceEmblaveeController.text.trim());
                        exploitationToUpdate.surface =
                            double.parse(surfaceValue);

                        exploitationToUpdate.updatedAt =
                            DateTime.parse(DateTime.now().toString());

                        final mxanneesBox = ObjectBox.mxanneesBox;
                        MxAnneeObject myAnnee =
                            mxanneesBox!.get(int.parse(singleSelectedAnneeId))!;
                        exploitationToUpdate.mxanneeObject.target = myAnnee;

                        final mxsaisonsBox = ObjectBox.mxsaisonsBox;
                        MxSaisonObject mySaison = mxsaisonsBox!
                            .get(int.parse(singleSelectedSaisonId))!;
                        exploitationToUpdate.mxsaisonObject.target = mySaison;

                        final mxvarietesBox = ObjectBox.mxvarietesBox;
                        MxVarieteObject myVAriete = mxvarietesBox!
                            .get(int.parse(singleSelectedVarieteId))!;
                        exploitationToUpdate.mxvarieteObject.target = myVAriete;

                        mxexploitationsBox!.put(exploitationToUpdate);

                        MxExploitationObject? exploitationUpdated =
                            mxexploitationsBox!
                                .query(MxExploitationObject_.id.equals(Constants
                                    .exploitationObject.exploitation_id))
                                .build()
                                .findFirst();

                        itemExploitation.compte =
                            exploitationUpdated!.compte.toString();
                        itemExploitation.filiere =
                            '${exploitationUpdated.mxvarieteObject.target!.mxProduitObject.target!.mxFiliereObject.target!.name}'; //'filiere'; //value.mxvarieteObject.target!.mxProduitObject.target!.mxFiliereObject.target!.name;
                        itemExploitation.produit =
                            '${exploitationUpdated.mxvarieteObject.target!.mxProduitObject.target!.name}';
                        itemExploitation.variete =
                            '${exploitationUpdated.mxvarieteObject.target!.name}';
                        itemExploitation.surface =
                            '${exploitationUpdated.surface} Ha';

                        itemExploitation.formattedDate =
                            dateFormat.format(exploitationUpdated.date);

                        itemExploitation.op = ' ';

                        itemExploitation.annee =
                            '${exploitationUpdated.mxanneeObject.target!.name}';
                        itemExploitation.saison =
                            '${exploitationUpdated.mxsaisonObject.target!.name}';
                        itemExploitation.taux = 'Taux/Ha';

                        print(exploitationUpdated.toJson());

                        /*
                        print(exploitationToUpdate.mxanneeObject.target!
                            .toJson());
                        print(exploitationToUpdate.mxsaisonObject.target!
                            .toJson());
                        print(exploitationToUpdate.mxvarieteObject.target!
                            .toJson());

                        */

                        // Constants.exploitationObject.unite = _uniteTextEditingController.text.trim();

                        Constants.exploitationObject.date =
                            DateTime.parse(targetDateString);
                        Constants.exploitationObject.surface =
                            double.parse(surfaceValue);

                        Navigator.of(context).pop();
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor:
                            Colors.orangeAccent, // Couleur de fond du bouton
                        textStyle:
                            TextStyle(color: Colors.black), // Couleur du texte
                        padding: EdgeInsets.symmetric(
                            horizontal: 20,
                            vertical: 15), // Espacement interne du bouton
                        shape: RoundedRectangleBorder(
                            borderRadius:
                                BorderRadius.circular(10)), // Forme du bouton
                      ),
                      child: Text('Valider'),
                    ),
                    SizedBox(width: 10),
                    ElevatedButton(
                      onPressed: () {
                        Navigator.of(context).pop();
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor:
                            Colors.greenAccent, // Couleur de fond du bouton
                        textStyle:
                            TextStyle(color: Colors.black), // Couleur du texte
                        padding: EdgeInsets.symmetric(
                            horizontal: 20,
                            vertical: 15), // Espacement interne du bouton
                        shape: RoundedRectangleBorder(
                            borderRadius:
                                BorderRadius.circular(10)), // Forme du bouton
                      ),
                      child: Text('Annuler'),
                    ),
                    // Espacement entre les boutons
                  ],
                ),
              )
            ],
          ),
        );
      },
    );
  }

  Widget _itemInfosExploitation(int idExploitation) {
    /*
    print('idExploitation: ' + idExploitation.toString());
    final mxexploitationsBox = ObjectBox.mxexploitationBox;
    MxExploitationObject? value = mxexploitationsBox!
        .query(MxExploitationObject_.id.equals(idExploitation))
        .build()
        .findFirst();

    var exploitationId = value!.id;
    var compte = value.compte;
    var filiere =
        '${value.mxvarieteObject.target!.mxProduitObject.target!.mxFiliereObject.target!.name}'; //'filiere'; //value.mxvarieteObject.target!.mxProduitObject.target!.mxFiliereObject.target!.name;
    var produit =
        '${value.mxvarieteObject.target!.mxProduitObject.target!.name}';
    var variete = '${value.mxvarieteObject.target!.name}';
    var surface = '${value.surface} Ha';

    final dateFormat = DateFormat('dd MMMM yyyy', 'fr_FR');

    String formattedDate = dateFormat.format(value.date);

    var date = '${formattedDate}';
    var op = ' ';

    var annee = '${value.mxanneeObject.target!.name}';
    var saison = '${value.mxsaisonObject.target!.name}';
    var taux = 'Taux/Ha';
    //var montantproduction = 1000 * value.production * value.pu;
    Constants.idExploitation = value.id;

    singleSelectedVarieteId = value.mxvarieteObject.target!.id.toString();
    //_dateTextEditingController.text = formattedDate;

    List<Montant> montants = [];

    Montant myMontantDepense = Montant(
        name: 'Montant Dépenses',
        somme: Constants.totalCharges(idExploitation));
    //Montant myMontantProduit =Montant(name: 'Montant Produits', somme: montantproduction);
    Montant myMontantRBE = Montant(name: 'R.B.E', somme: 0);
    Montant myMontantCredit = Montant(name: 'Crédits', somme: 0);
    Montant myMontantRemboursement = Montant(name: 'Remboursements', somme: 0);

    montants.add(myMontantDepense);
    //montants.add(myMontantProduit);
    montants.add(myMontantRBE);
    montants.add(myMontantCredit);
    montants.add(myMontantRemboursement);
    */

    final double width = MediaQuery.of(context).size.width * 0.99;

    return Stack(children: [
      SingleChildScrollView(
        child: Column(children: [
          // Marge avant le conteneur
          SizedBox(height: 15),
          // Titre de la page avec marge
          Padding(
            padding: EdgeInsets.symmetric(horizontal: 20.0),
            child: Container(
              width: double.infinity,
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [Colors.blue, Colors.blueAccent],
                  begin: Alignment.topCenter,
                  end: Alignment.bottomCenter,
                ),
                borderRadius: BorderRadius.vertical(
                  top: Radius.circular(15),
                  bottom: Radius.circular(15),
                ),
                boxShadow: [
                  BoxShadow(
                    color: Colors.grey.withOpacity(0.5),
                    spreadRadius: 5,
                    blurRadius: 7,
                    offset: Offset(0, 3), // changes position of shadow
                  ),
                ],
              ),
              padding: EdgeInsets.symmetric(vertical: 10.0, horizontal: 10.0),
              child: Text(
                'RESUME DE L\'EXPLOITATION',
                style: TextStyle(
                  fontSize: 20.0,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
            ),
          ),

          SizedBox(height: 12),

          Container(
            child: Table(
              //border: TableBorder.all(width: 1, color: Colors.black45),
              border: TableBorder(
                top: BorderSide(color: Colors.black),
                bottom: BorderSide(color: Colors.black),
                //left: BorderSide(color: Colors.black),
                //right: BorderSide(color: Colors.black),
                horizontalInside: BorderSide(color: Colors.grey),
                verticalInside: BorderSide(color: Colors.grey),
              ),
              /*
                  columnWidths: {
                    0: FixedColumnWidth(width * 0.4), // fixed to 100 width
                    1: FixedColumnWidth(width * 0.5), //fixed to 100 width
                  },
                  */
              columnWidths: {
                0: FixedColumnWidth(width * 0.9), // fixed to 100 width
              }, //table border
              children: [
                TableRow(children: [
                  TableCell(
                    child: Padding(
                      padding: EdgeInsets.all(7),
                      child: Text(
                        'N°: ${(itemExploitation.compte)}',
                        style: const TextStyle(
                            fontSize: 16,
                            color: Color(0xFF363f93),
                            fontWeight: FontWeight.bold),
                      ),
                    ),
                  ),
                ]),
                if (itemExploitation.op.trim().length > 0)
                  TableRow(children: [
                    TableCell(
                      child: Padding(
                        padding: EdgeInsets.all(7),
                        child: Text(
                          itemExploitation.op,
                          style: const TextStyle(
                              fontSize: 16,
                              color: Color(0xFF363f93),
                              fontWeight: FontWeight.bold),
                        ),
                      ),
                    ),
                  ]),
              ],
            ),
          ),
          const SizedBox(
            height: 20,
          ),
          Container(
            child: Table(
              //border: TableBorder.all(width: 0, color: Colors.black45),
              border: TableBorder(
                top: BorderSide(color: Colors.black),
                bottom: BorderSide(color: Colors.black),
                //left: BorderSide(color: Colors.black),
                //right: BorderSide(color: Colors.black),
                horizontalInside: BorderSide(color: Colors.grey),
                verticalInside: BorderSide(color: Colors.grey),
              ),
              columnWidths: {
                0: FixedColumnWidth(width * 0.9), // fixed to 100 width
              }, //table border
              children: [
                TableRow(children: [
                  TableCell(
                    child: Padding(
                      padding: EdgeInsets.all(7),
                      child: Text(
                        'Date: ${itemExploitation.formattedDate}',
                        style: const TextStyle(
                          fontSize: 16,
                          color: Colors.black,
                          //fontWeight: FontWeight.bold
                        ),
                      ),
                    ),
                  ),
                ]),
                TableRow(children: [
                  TableCell(
                    child: Padding(
                      padding: EdgeInsets.all(7),
                      child: Text(
                        'Filière: ${itemExploitation.filiere}',
                        style: const TextStyle(
                          fontSize: 16,
                          color: Colors.black,
                          //fontWeight: FontWeight.bold
                        ),
                      ),
                    ),
                  ),
                ]),
                TableRow(children: [
                  TableCell(
                    child: Padding(
                      padding: EdgeInsets.all(7),
                      child: Text(
                        'Produit: ${itemExploitation.produit}',
                        style: const TextStyle(
                          fontSize: 16,
                          color: Colors.black,
                          //fontWeight: FontWeight.bold
                        ),
                      ),
                    ),
                  ),
                ]),
                TableRow(children: [
                  TableCell(
                    child: Padding(
                      padding: EdgeInsets.all(7),
                      child: Text(
                        'Variété: ${itemExploitation.variete}',
                        style: const TextStyle(
                          fontSize: 16,
                          color: Colors.black,
                          //fontWeight: FontWeight.bold
                        ),
                      ),
                    ),
                  ),
                ]),
                TableRow(children: [
                  TableCell(
                    child: Padding(
                      padding: EdgeInsets.all(7),
                      child: Text(
                        'Période:  ${itemExploitation.saison} | ${itemExploitation.annee}',
                        style: const TextStyle(
                          fontSize: 16,
                          color: Colors.black,
                          //fontWeight: FontWeight.bold
                        ),
                      ),
                    ),
                  ),
                ]),
                TableRow(children: [
                  TableCell(
                    child: Padding(
                      padding: EdgeInsets.all(7),
                      child: Text(
                        'Surface emblavée: ${itemExploitation.surface}',
                        style: const TextStyle(
                          fontSize: 16,
                          color: Colors.black,
                          //fontWeight: FontWeight.bold
                        ),
                      ),
                    ),
                  ),
                ]),
                /*
                    TableRow(children: [
                      TableCell(
                        child: Padding(
                          padding: EdgeInsets.all(7),
                          child: Text(
                            'Total Production: $production',
                            style: const TextStyle(
                              fontSize: 16,
                              color: Colors.black,
                              //fontWeight: FontWeight.bold
                            ),
                          ),
                        ),
                      ),
                    ]),
                    */
                TableRow(children: [
                  TableCell(
                    child: Padding(
                      padding: EdgeInsets.all(7),
                      child: Text(
                        'Rendement: ${itemExploitation.taux}',
                        style: const TextStyle(
                          fontSize: 16,
                          color: Colors.black,
                          //fontWeight: FontWeight.bold
                        ),
                      ),
                    ),
                  ),
                ]),
              ],
            ),
          ),
          Container(
              child: Column(
            children: [
              const SizedBox(
                height: 15,
              ),
              loaderMontantTable(context, itemExploitation.montants),
              const SizedBox(
                height: 2,
              ),
            ],
          ))
        ]),
      ),
      Positioned(
        bottom: 16,
        right: 16,
        child: FloatingActionButton(
          onPressed: () {
            _showDialogEditItem(context, widget.idExploitation);
          },
          child: Icon(Icons.add), // Icon displayed inside the button
          backgroundColor: Colors.blue, // Background color of the button
          foregroundColor: Colors.white, // Color of the icon
          elevation: 6.0, // Elevation (shadow) of the button
          splashColor: Colors.blueAccent, // Color when button is pressed
          tooltip: 'Add', // Tooltip displayed on long press
        ),
      ),
    ]);
  }

  String _getRegexString() => true ? r'[0-9]+[,.]{0,1}[0-9]*' : r'[0-9]';
}

class Montant {
  Montant({
    required this.name,
    required this.somme,
  });

  String name;
  double somme;
}

class Item {
  Item(
      {required this.idExploitation,
      required this.date,
      required this.compte,
      required this.filiere,
      required this.produit,
      required this.variete,
      required this.surface,
      required this.op,
      required this.annee,
      required this.saison,
      required this.formattedDate,
      required this.taux,
      required this.montants});

  int idExploitation;
  DateTime date;
  String compte;
  String filiere;
  String produit;
  String variete;
  String surface;
  String op;
  String annee;
  String saison;
  String formattedDate;
  String taux;
  List<Montant> montants = [];
}
