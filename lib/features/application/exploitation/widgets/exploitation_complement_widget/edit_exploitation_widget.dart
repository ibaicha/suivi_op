import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:intl/intl.dart';

import 'package:curved_navigation_bar/curved_navigation_bar.dart';
import 'package:flutter/services.dart';
import 'package:getwidget/getwidget.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:accordion/accordion.dart';
import 'package:accordion/controllers.dart';

import 'package:flutter_dropdown_plus/dropdown.dart';
import 'package:flutter_dropdown_plus/dropdown_item.dart';

import 'package:drop_down_list/drop_down_list.dart';
import 'package:drop_down_list/model/selected_list_item.dart';
import 'package:flutter/material.dart';

import '../../../../../core/data/model/ObjectBox/objectBoxModels.dart';
import '../../../../../core/data/service/ObjectBoxHelper.dart';
import '../../../../../core/res/colors.dart';
import '../../../../../core/res/constants.dart';
import '../../../../../objectbox.g.dart';
import '../../../../auth/presentation/widgets/fade_in.dart';
import '../../../../auth/presentation/widgets/theme.dart';
import '../../../../auth/presentation/widgets/transition_route_observer.dart';
import '../../../../auth/presentation/widgets/widgets.dart';
import '../../../annee/widgets/all_annees_widget/bloc/all_annees_bloc.dart';
import '../../../saison/widgets/all_saisons_widget/bloc/all_saisons_bloc.dart';
import '../../../variete/widgets/all_variete_widget/bloc/all_varietes_bloc.dart';
import '../details_exploitation_widget/exploitation_lignes_widget.dart';
import 'informations_edit_exploitation_widget.dart';
import 'recoltes_widget.dart';
import 'remboursement_widget.dart';
import 'update_edit_exploitation_widget.dart';

class EditExploitationWidget extends StatefulWidget {
  //const EditExploitationWidget({super.key});
  static const routeName = '/editExploitation';

  const EditExploitationWidget({super.key});

  @override
  State<EditExploitationWidget> createState() => _EditExploitationWidgetState();
}

class _EditExploitationWidgetState extends State<EditExploitationWidget>
    with TickerProviderStateMixin
    implements TransitionRouteAware {
  AnimationController? _loadingController;
  late TabController _tabController;

  late AllVarietesBloc blocAllVarietes;

  late String _compte = '';
  late String unitesurface = '';
  late String quantiteproduit = '';
  late double rendement_theorique = 0;
  late double rendement_reel = 0;

  List<DropdownItem> _itemAnneesList = [];
  String _singleSelectedAnneeId = "";
  List<DropdownItem> _itemSaisonsList = [];
  String _singleSelectedSaisonId = "";
  String _singleSelectedVarieteId = "";
  List<DropdownItem> _itemVarietesList = [];

  final TextEditingController _dateTextEditingController =
      TextEditingController();
  final TextEditingController _uniteTextEditingController =
      TextEditingController();
  final TextEditingController _varieteTextEditingController =
      TextEditingController();
  List<SelectedListItem> _listOfVarietes = [];
  String hintTextVariete = 'Choisir variete';

  String _singleSelectedProduitId = "";
  String _singleSelectedFiliereId = "";

  TextEditingController productionController = TextEditingController();
  TextEditingController puController = TextEditingController();
  TextEditingController surfaceController = TextEditingController();

  final formatter = NumberFormat('#,##0.0', 'fr_FR');
  /*
  TextEditingController surfaceController = StyleableTextFieldController(
    styles: TextPartStyleDefinitions(
      definitionList: <TextPartStyleDefinition>[
        TextPartStyleDefinition(
          style: const TextStyle(
            color: Colors.black38,
          ),
          pattern: r',(\d+)$',
        )
      ],
    ),
  );
  */

  Future<bool> _goToLogin(BuildContext context) {
    return Navigator.of(context)
        .pushReplacementNamed('/dashboard')
        // we dont want to pop the screen, just replace it completely
        .then((_) => false);
  }

  late String title = 'A propos';
  final routeObserver = TransitionRouteObserver<PageRoute?>();
  static const headerAniInterval = Interval(.1, .6, curve: Curves.easeOut);
  //late Animation<double> _headerScaleAnimation;

  final _pagination = TextEditingController();

  @override
  void initState() {
    print('init xxxxxxxxxxxxxxxxxxxxxxxxxxxxx');
    super.initState();
    _loadingController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 1250),
    );
    _tabController = TabController(length: 5, vsync: this, initialIndex: 0);
    _tabController.addListener(_handleTabSelection);

    _dateTextEditingController.text = "";

    _generateAnneesItems();
    _generateSaisonsItems();
    _generateVarietesItems();
    _getCompteExploitation('UPDATE');
  }

  _renderAnneesItems() {
    return BlocConsumer<AllAnneesBloc, AllAnneesState>(
        listener: (context, state) {},
        builder: (context, stateAnnee) {
          if (stateAnnee is AllAnneesInitialState) {
            print('xxxxx INITIAL ANNEE  xxxxxxx');
            BlocProvider.of<AllAnneesBloc>(context).add(LoadAllAnneesEvent());
            return const Center(
              child: CircularProgressIndicator(),
            );
          }
          if (stateAnnee is AllAnneesLoadingState) {
            print('xxxxx LOADING ANNEE  xxxxxxx');
            return const Center(
              child: CircularProgressIndicator(),
            );
          } else if (stateAnnee is AllAnneesLoadedState) {
            print('xxxxx load ANNEE  xxxxxxx');
            List<DropdownItem> _list = [];
            var mesAnnees = stateAnnee.apiResult;

            for (var element in mesAnnees) {
              print(element.name);
              _list.add(DropdownItem(
                  id: element.id.toString(),
                  value: ' ${element.name.toString().toUpperCase()}',
                  data: MxAnneeObject(
                      id: element.id,
                      name: element.name,
                      valeur: element.valeur)));
            }

            _itemAnneesList = _list;

            return Dropdown.singleSelection(
                title: "CHOISIR UNE ANNEE",
                labelText: "ANNEE",
                hintText: "Selection ann√©e",
                list: _itemAnneesList,
                selectedId: _singleSelectedAnneeId,
                onSingleItemListener: (selectedItem) {
                  setState(() {
                    _singleSelectedAnneeId = selectedItem.id;
                  });
                  String itemId = selectedItem.id;
                  String itemName = selectedItem.value;
                  MxAnneeObject anneeObject =
                      selectedItem.data as MxAnneeObject;
                  print(
                      "Item Id: $itemId -- Item Name: $itemName ## Other Details ## Annee Id: ${anneeObject.id} -- Annee valeur: ${anneeObject.valeur}");
                });
          } else if (stateAnnee is AllAnneesErrorState) {
            return const Center(
              child: Text("Uh oh! üò≠ Something went wrong!"),
            );
          }
          return const Text("Very Great Error");
        });
  }

  _generateAnneesItems() {
    List<DropdownItem> list = [];
    final mxanneeBox = ObjectBox.mxanneesBox;
    var mesAnnees = mxanneeBox?.getAll();
    mesAnnees?.forEach((element) {
      list.add(DropdownItem(
          id: element.id.toString(),
          value: element.name.toString(),
          data: MxAnneeObject(
            id: element.id,
            valeur: element.valeur,
            name: element.name,
          )));
    });

    setState(() {
      _itemAnneesList = list;
    });
  }

  _renderVarietesItems() {
    return BlocConsumer<AllVarietesBloc, AllVarietesState>(
        listener: (context, state) {},
        builder: (context, stateVariete) {
          if (stateVariete is AllVarietesInitialState) {
            print('xxxxx INITIAL VARIETE  xxxxxxx');
            BlocProvider.of<AllVarietesBloc>(context)
                .add(LoadAllVarietesEvent());
            return const Center(
              child: CircularProgressIndicator(),
            );
          }
          if (stateVariete is AllVarietesLoadingState) {
            print('xxxxx LODING VARIETE  xxxxxxx');
            return const Center(
              child: CircularProgressIndicator(),
            );
          } else if (stateVariete is AllVarietesLoadedState) {
            print('xxxxx load VARIETE  xxxxxxx');
            List<DropdownItem> _list = [];
            var mesVarietes = stateVariete.apiResult;

            for (var element in mesVarietes) {
              print(element.name);
              _list.add(DropdownItem(
                  id: element.id.toString(),
                  value:
                      '${element.mxProduitObject.target!.name.toString().toUpperCase()} | ${element.name.toString().toUpperCase()}',
                  data: MxVarieteObject(
                      id: element.id,
                      name: element.name,
                      surface_unite: element.surface_unite,
                      quantite_unite: element.quantite_unite,
                      pu_unite: element.pu_unite,
                      rendement_unite: element.rendement_unite,
                      isActive: element.isActive)));
            }

            _itemVarietesList = _list;

            return Dropdown.singleSelection(
                title: "CHOISIR UNE VARIETE",
                labelText: "VARIETE",
                hintText: "Selection vari√©t√©",
                list: _itemVarietesList,
                selectedId: _singleSelectedVarieteId,
                onTapAddItem: (searchValue) {
                  print(searchValue);
                },
                onSingleItemListener: (selectedItem) {
                  setState(() {
                    _singleSelectedVarieteId = selectedItem.id;
                  });

                  String itemId = selectedItem.id;
                  String itemName = selectedItem.value;
                  MxVarieteObject varieteObject =
                      selectedItem.data as MxVarieteObject;
                  unitesurface = varieteObject.surface_unite!;
                  rendement_theorique = varieteObject.rendement_unite!;
                  quantiteproduit = varieteObject.quantite_unite!;
                  print(
                      "Item Id: $itemId -- Item Name: $itemName ## Other Details ## Variete Id: ${varieteObject.id} -- Variete name: ${varieteObject.name}");
                });
          } else if (stateVariete is AllVarietesErrorState) {
            return const Center(
              child: Text("Uh oh! üò≠ Something went wrong!"),
            );
          }
          return const Text("Very Great Error");
        });
  }

  _generateSaisonsItems() {
    List<DropdownItem> list = [];
    final mxsaisonBox = ObjectBox.mxsaisonsBox;
    var mesSaisons = mxsaisonBox?.getAll();

    mesSaisons?.forEach((element) {
      print(element.name);
      list.add(DropdownItem(
          id: element.id.toString(),
          value: element.name.toString(),
          data: SaisonObject(
            id: element.id,
            name: element.name,
            description: element.description,
          )));
    });
    setState(() {
      _itemSaisonsList = list;
    });
  }

  _renderSaisonsItems() {
    return BlocConsumer<AllSaisonsBloc, AllSaisonsState>(
        listener: (context, state) {},
        builder: (context, stateSaison) {
          if (stateSaison is AllSaisonsInitialState) {
            print('xxxxx INITIAL SAISON  xxxxxxx');
            BlocProvider.of<AllSaisonsBloc>(context).add(LoadAllSaisonsEvent());
            return const Center(
              child: CircularProgressIndicator(),
            );
          }
          if (stateSaison is AllSaisonsLoadingState) {
            print('xxxxx LODING SAISON  xxxxxxx');
            return const Center(
              child: CircularProgressIndicator(),
            );
          } else if (stateSaison is AllSaisonsLoadedState) {
            print('xxxxx load SAISON  xxxxxxx');
            List<DropdownItem> _list = [];
            var mesSaisons = stateSaison.apiResult;

            for (var element in mesSaisons) {
              print(element.name);
              _list.add(DropdownItem(
                  id: element.id.toString(),
                  value: ' ${element.name.toString().toUpperCase()}',
                  data: MxSaisonObject(
                      id: element.id,
                      name: element.name,
                      description: element.description)));
            }

            _itemSaisonsList = _list;

            return Dropdown.singleSelection(
                title: "CHOISIR UNE SAISON",
                labelText: "SAISON",
                hintText: "Selection saison",
                list: _itemSaisonsList,
                selectedId: _singleSelectedSaisonId,
                onSingleItemListener: (selectedItem) {
                  setState(() {
                    _singleSelectedSaisonId = selectedItem.id;
                  });
                  String itemId = selectedItem.id;
                  String itemName = selectedItem.value;
                  MxSaisonObject saisonObject =
                      selectedItem.data as MxSaisonObject;
                  print(
                      "Item Id: $itemId -- Item Name: $itemName ## Other Details ## Saison Id: ${saisonObject.id} -- Annee annee: ${saisonObject.name}");
                });
          } else if (stateSaison is AllSaisonsErrorState) {
            return const Center(
              child: Text("Uh oh! üò≠ Something went wrong!"),
            );
          }
          return const Text("Very Great Error");
        });
  }

  _generateVarietesItems() {
    List<DropdownItem> list = [];
    final mxvarieteBox = ObjectBox.mxvarietesBox;
    var mesVarietes = mxvarieteBox?.getAll();
    mesVarietes?.forEach((element) {
      print(element.name);
      list.add(DropdownItem(
          id: element.id.toString(),
          value:
              '${element.mxProduitObject.target!.name.toString().toUpperCase()} | ${element.name.toString().toUpperCase()}',
          data: MxVarieteObject(
            id: element.id,
            name: element.name,
            surface_unite: element.surface_unite,
            quantite_unite: element.quantite_unite,
            pu_unite: element.pu_unite,
            rendement_unite: element.rendement_unite,
            isActive: element.isActive,
          )));
    });
    setState(() {
      _itemVarietesList = list;
    });
  }

  _getCompteExploitation(String AddOrUpdate) {
    if (AddOrUpdate == 'UPDATE') {
      _compte = Constants.exploitationObject.compte.toString();

      _singleSelectedAnneeId = Constants.exploitationObject.anneeid.toString();
      _singleSelectedSaisonId =
          Constants.exploitationObject.saisonid.toString();
      _singleSelectedVarieteId =
          Constants.exploitationObject.varieteid.toString();
      _singleSelectedProduitId =
          Constants.exploitationObject.produitid.toString();
      _singleSelectedFiliereId =
          Constants.exploitationObject.filiereid.toString();
      productionController.text =
          Constants.exploitationObject.production.toString();
      surfaceController.text = Constants.exploitationObject.surface.toString();
      //_uniteTextEditingController.text = Constants.exploitationObject.unite.toString();
      puController.text = Constants.exploitationObject.pu.toString();
      String formattedDate = DateFormat('dd MMMM yyyy', 'fr_FR')
          .format(Constants.exploitationObject.date);
      _dateTextEditingController.text = formattedDate;
    }
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    routeObserver.subscribe(
      this,
      ModalRoute.of(context) as PageRoute<dynamic>?,
    );
  }

  @override
  void dispose() {
    _loadingController!.dispose();
    _tabController.dispose();
    routeObserver.unsubscribe(this);
    _varieteTextEditingController.dispose();
    super.dispose();
  }

  @override
  void didPushAfterTransition() => _loadingController!.forward();

  AppBar _buildAppBar(ThemeData theme) {
    final menuBtn = IconButton(
      color: theme.colorScheme.secondary,
      icon: const Icon(FontAwesomeIcons.bars),
      onPressed: () {},
    );
    final signOutBtn = IconButton(
      icon: const Icon(FontAwesomeIcons.rightFromBracket),
      color: theme.colorScheme.secondary,
      onPressed: () => _goToLogin(context),
    );
    final title = Center(
      child: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: <Widget>[
          Padding(
            padding: const EdgeInsets.symmetric(vertical: 8.0),
            child: Hero(
              tag: Constants.logoTag,
              child: Image.asset(
                'assets/images/ecorp.png',
                filterQuality: FilterQuality.high,
                height: 30,
              ),
            ),
          ),
          Container(width: 20),
          HeroText(
            Constants.appName,
            tag: Constants.titleTag,
            viewState: ViewState.shrunk,
            style: LoginThemeHelper.loginTextStyle,
          ),
          const SizedBox(width: 20),
        ],
      ),
    );

    return AppBar(
      leading: FadeIn(
        controller: _loadingController,
        offset: .6,
        curve: headerAniInterval,
        child: menuBtn,
      ),
      actions: <Widget>[
        FadeIn(
          controller: _loadingController,
          offset: .6,
          curve: headerAniInterval,
          fadeDirection: FadeDirection.endToStart,
          child: signOutBtn,
        ),
      ],
      title: title,
      backgroundColor: theme.primaryColor.withOpacity(.1),
      elevation: 0,
      // toolbarTextStyle: TextStle(),
      // textTheme: theme.accentTextTheme,
      // iconTheme: theme.accentIconTheme,
    );
  }

  @override
  void _handleTabSelection() {
    if (_tabController.indexIsChanging) {
      switch (_tabController.index) {
        case 0:
          setState(() {
            title = 'Exploitation';
          });
          break;
        /*
        case 1:
          setState(() {
            title = 'Update';
          });
          break;
          */
        case 1:
          setState(() {
            title = 'D√©penses';
          });
        case 2:
          setState(() {
            title = 'R√©coltes';
          });
        case 3:
          setState(() {
            title = 'Cr√©dits';
          });
        case 4:
          setState(() {
            title = 'Remboursements';
          });
          break;
      }
    }
  }

  int _page = 1;
  final GlobalKey<CurvedNavigationBarState> _bottomNavigationKey = GlobalKey();

  Widget _buildEdit(BuildContext context) {
    final theme = Theme.of(context);
    return MaterialApp(
        home: Scaffold(
      bottomNavigationBar: CurvedNavigationBar(
        key: _bottomNavigationKey,
        index: 0,
        height: 70.0,
        items: const <Widget>[
          Icon(Icons.add, size: 30),
          Icon(Icons.perm_identity, size: 30),
          Icon(Icons.agriculture_outlined, size: 30),
          Icon(Icons.money_sharp, size: 30),
          Icon(Icons.list, size: 30),
          Icon(Icons.list, size: 30),
        ],
        color: theme.primaryColor.withOpacity(.6),
        buttonBackgroundColor: theme.primaryColor.withOpacity(.6),
        backgroundColor: theme.primaryColor.withOpacity(.1),
        animationCurve: Curves.easeInOut,
        animationDuration: const Duration(milliseconds: 600),
        onTap: (index) {
          setState(() {
            _page = index;
            _tabController.index = index;
            print('xxxxxxxxxxxxxxx index xxxxxxxxxx xxxxxxxxxx : $index');
          });
        },
        letIndexChange: (index) => true,
      ),
      body: GFTabBarView(controller: _tabController, children: <Widget>[
        Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              //const SizedBox(height: kToolbarHeight),
              Expanded(
                child: Container(
                    color: theme.primaryColor.withOpacity(.1),
                    child: InformationsEditExploitationWidget(
                      idExploitation:
                          Constants.exploitationObject.exploitation_id,
                    )),
              ),
            ],
          ),
        ),
        /*
        Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              //const SizedBox(height: kToolbarHeight),
              Expanded(
                child: Container(
                    color: theme.primaryColor.withOpacity(.1),
                    child: UpdateEditExploitationWidget(
                      idExploitation:
                          Constants.exploitationObject.exploitation_id,
                    )),
              ),
            ],
          ),
        ),
        */
        Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              //const SizedBox(height: kToolbarHeight),
              Expanded(
                child: Container(
                    color: theme.primaryColor.withOpacity(.1),
                    child: _itemDepensesExploitation(
                        Constants.exploitationObject.exploitation_id)),
              ),
            ],
          ),
        ),
        Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              //const SizedBox(height: kToolbarHeight),
              Expanded(
                child: Container(
                    color: theme.primaryColor.withOpacity(.1),
                    child: _itemRecoltesExploitation(
                        Constants.exploitationObject.exploitation_id)),
              ),
            ],
          ),
        ),
        Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              const SizedBox(height: kToolbarHeight),
              Expanded(
                child: Container(
                  color: theme.primaryColor.withOpacity(.1),
                  child: const Center(
                    child: Text(
                      'Cr√©dits',
                      style: TextStyle(color: Colors.white, fontSize: 70),
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
        Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              //const SizedBox(height: kToolbarHeight),
              Expanded(
                child: Container(
                    color: theme.primaryColor.withOpacity(.1),
                    child: _itemRemboursementsExploitation(
                        Constants.exploitationObject.exploitation_id)),
              ),
            ],
          ),
        ),
      ]),
    ));
  }

  _replaceVirguleToPoint(String value) {
    return value.replaceAll(",", ".");
  }

/*
  Widget _itemUpdateExploitation(int idExploitation) {
    final mxexploitationsBox = ObjectBox.mxexploitationBox;
    /*
    MxExploitationObject? value = mxexploitationsBox!
        .query(MxExploitationObject_.id.equals(idExploitation))
        .build()
        .findFirst();
    */

    final mxvarietesBox = ObjectBox.mxvarietesBox;
    MxVarieteObject? varieteObject = mxvarietesBox!
        .get(int.parse(Constants.exploitationObject.varieteid.toString()));

    unitesurface = varieteObject!.surface_unite!;
    rendement_theorique = varieteObject.rendement_unite!;
    quantiteproduit = varieteObject.quantite_unite!;

    return Stack(children: [
      // Contenu principal de la page
      Center(
          child: Container(
        padding: const EdgeInsets.all(10),
        child: SingleChildScrollView(
          child: Column(
            children: [
              TextField(
                controller: _dateTextEditingController,
                //editing controller of this TextField

                decoration: InputDecoration(
                  //icon: Icon(Icons.calendar_today),
                  labelText: "Date", //label text of field
                  labelStyle:
                      TextStyle(fontSize: 18, color: Colors.grey.shade800),
                  border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10)),
                ),

                readOnly: true,
                //set it true, so that user will not able to edit text
                onTap: () async {
                  DateTime? pickedDate = await showDatePicker(
                      context: context,
                      locale: const Locale("fr", "FR"),
                      initialDate: DateTime.now(),
                      firstDate: DateTime(2022),
                      lastDate: DateTime(2030),
                      builder: (BuildContext context, Widget? child) {
                        return Theme(
                          data: ThemeData.dark(),
                          child: child!,
                        );
                      });

                  if (pickedDate != null) {
                    print(
                        pickedDate); //pickedDate output format => 2021-03-10 00:00:00.000
                    String formattedDate =
                        DateFormat('dd MMMM yyyy', 'fr_FR').format(pickedDate);
                    //String formattedDate = DateFormat('dd MMMM yyyy', 'fr_FR');
                    print(
                        formattedDate); //formatted date output using intl package =>  2021-03-16
                    setState(() {
                      _dateTextEditingController.text =
                          formattedDate; //set output date to TextField value.
                    });
                  } else {}
                },
              ),
              const SizedBox(
                height: 30,
              ),
              _renderAnneesItems(),
              const SizedBox(
                height: 30,
              ),
              _renderSaisonsItems(),
              const SizedBox(
                height: 30,
              ),
              _renderVarietesItems(),
              if (_singleSelectedVarieteId.isNotEmpty)
                const SizedBox(
                  height: 30,
                ),
              if (_singleSelectedVarieteId.isNotEmpty)
                TextField(
                  controller: surfaceController,
                  readOnly: false,
                  textAlign: TextAlign.right,
                  inputFormatters: <TextInputFormatter>[
                    FilteringTextInputFormatter.allow(
                        RegExp(_getRegexString())),
                    TextInputFormatter.withFunction(
                      (oldValue, newValue) => newValue.copyWith(
                        text: newValue.text.replaceAll('.', ','),
                      ),
                    ),
                  ],
                  decoration: InputDecoration(
                    labelText: 'Surface ( $unitesurface )',
                    labelStyle:
                        TextStyle(fontSize: 18, color: Colors.grey.shade800),
                    border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(10)),
                  ),
                  keyboardType:
                      const TextInputType.numberWithOptions(decimal: true),
                ),
              if (_singleSelectedVarieteId.isNotEmpty)
                const SizedBox(
                  height: 55,
                ),
            ],
          ),
        ),
      )),
      // Widget flottant en bas de page
      Positioned(
        bottom: 16,
        right: 16,
        child: FloatingActionButton(
          onPressed: () {
            setState(() {
              final mxexploitationsBox = ObjectBox.mxexploitationBox;
              MxExploitationObject exploitationToUpdate =
                  mxexploitationsBox!.get(idExploitation)!;

              print(exploitationToUpdate.toJson());
              print(exploitationToUpdate.mxanneeObject.target!.toJson());
              print(exploitationToUpdate.mxsaisonObject.target!.toJson());
              print(exploitationToUpdate.mxvarieteObject.target!.toJson());

              //print(_dateTextEditingController.text.trim());

              String originalDateString = _dateTextEditingController.text
                  .trim(); // Example date string in dd-MM-yyyy format

// Define the original and target date formats
              DateFormat originalFormat = DateFormat('dd MMMM yyyy', 'fr_FR');
              DateFormat targetFormat = DateFormat('yyyy-MM-dd');

// Parse the original date string into a DateTime object
              DateTime parsedDate = originalFormat.parse(originalDateString);

// Format the DateTime object into the target date string
              String targetDateString = targetFormat.format(parsedDate);

              //print(targetDateString); // Output: 2023-06-21

              exploitationToUpdate.date = DateTime.parse(targetDateString);
              // exploitationToUpdate.unite = _uniteTextEditingController.text.trim();
              String surfaceValue =
                  _replaceVirguleToPoint(surfaceController.text.trim());
              exploitationToUpdate.surface = double.parse(surfaceValue);

              exploitationToUpdate.updatedAt =
                  DateTime.parse(DateTime.now().toString());

              final mxanneesBox = ObjectBox.mxanneesBox;
              MxAnneeObject myAnnee =
                  mxanneesBox!.get(int.parse(_singleSelectedAnneeId))!;
              exploitationToUpdate.mxanneeObject.target = myAnnee;

              final mxsaisonsBox = ObjectBox.mxsaisonsBox;
              MxSaisonObject mySaison =
                  mxsaisonsBox!.get(int.parse(_singleSelectedSaisonId))!;
              exploitationToUpdate.mxsaisonObject.target = mySaison;

              final mxvarietesBox = ObjectBox.mxvarietesBox;
              MxVarieteObject myVAriete =
                  mxvarietesBox!.get(int.parse(_singleSelectedVarieteId))!;
              exploitationToUpdate.mxvarieteObject.target = myVAriete;

              mxexploitationsBox!.put(exploitationToUpdate);

              ObjectBox.mxexploitationBox;
              MxExploitationObject exploitationToUpdate1 =
                  mxexploitationsBox!.get(idExploitation)!;
              print(exploitationToUpdate1.toJson());

              print(exploitationToUpdate.mxanneeObject.target!.toJson());
              print(exploitationToUpdate.mxsaisonObject.target!.toJson());
              print(exploitationToUpdate.mxvarieteObject.target!.toJson());

              // Constants.exploitationObject.unite = _uniteTextEditingController.text.trim();

              Constants.exploitationObject.date =
                  DateTime.parse(targetDateString);
              Constants.exploitationObject.surface = double.parse(surfaceValue);

              /*
              Constants.exploitationObject.filiereid = value.mxvarieteObject
                  .target!.mxProduitObject.target!.mxFiliereObject.target!.id;
              Constants.exploitationObject.filierename = value.mxvarieteObject
                  .target!.mxProduitObject.target!.mxFiliereObject.target!.name;
              Constants.exploitationObject.produitid =
                  value.mxvarieteObject.target!.mxProduitObject.target!.id;
              Constants.exploitationObject.produitname =
                  value.mxvarieteObject.target!.mxProduitObject.target!.name;
              Constants.exploitationObject.varieteid =
                  value.mxvarieteObject.target!.id;
              Constants.exploitationObject.varietename =
                  value.mxvarieteObject.target!.name;
              Constants.exploitationObject.saisonid =
                  value.mxsaisonObject.target!.id;
              Constants.exploitationObject.saisonname =
                  value.mxsaisonObject.target!.name;
              Constants.exploitationObject.anneeid =
                  value.mxanneeObject.target!.id;
              Constants.exploitationObject.anneename =
                  value.mxanneeObject.target!.name;
              */
              // print(Constants.exploitationObject.toJson());
            });
          },
          child: Icon(Icons.add),
        ),
      ),
    ]);
  }
*/
  Widget _itemDepensesExploitation(int idExploitation) {
    const headerStyle = TextStyle(
        color: Color(0xffffffff), fontSize: 15, fontWeight: FontWeight.bold);
    const contentStyleHeader = TextStyle(
        color: Color(0xff999999), fontSize: 14, fontWeight: FontWeight.w700);
    const contentStyle = TextStyle(
        color: Color(0xff999999), fontSize: 14, fontWeight: FontWeight.normal);
    final double width = MediaQuery.of(context).size.width * 0.98;
    return Container(
        child: Accordion(
      maxOpenSections: 1,
      headerBackgroundColorOpened: Colors.black54,
      scaleWhenAnimating: true,
      openAndCloseAnimation: true,
      headerPadding: const EdgeInsets.symmetric(vertical: 7, horizontal: 15),
      sectionOpeningHapticFeedback: SectionHapticFeedback.heavy,
      sectionClosingHapticFeedback: SectionHapticFeedback.light,
      children: [
        AccordionSection(
            isOpen: true,
            leftIcon: const Icon(Icons.compare_rounded, color: Colors.white),
            header: Text(
                'CHARGES: ${formatter.format(Constants.totalChargesUsuelles(idExploitation))} FCFA',
                style: headerStyle),
            contentBorderColor: const Color(0xffffffff),
            headerBackgroundColorOpened: Colors.amber,
            content: Container(
              child: ExploitationLigneWidget(idExploitation: idExploitation),
            )),
        AccordionSection(
            leftIcon: const Icon(Icons.compare_rounded, color: Colors.white),
            header: Text(
                'PRODUITS EXEPTIONNELS ${formatter.format(Constants.totalChargesExeptionnelles(idExploitation))} FCFA',
                style: headerStyle),
            contentBorderColor: const Color(0xffffffff),
            headerBackgroundColorOpened: Colors.amber,
            content: Container(
              child: Container(),
            )),
      ],
    ));
  }

  Widget _itemRecoltesExploitation(int idExploitation) {
    const headerStyle = TextStyle(
        color: Color(0xffffffff), fontSize: 15, fontWeight: FontWeight.bold);
    const contentStyleHeader = TextStyle(
        color: Color(0xff999999), fontSize: 14, fontWeight: FontWeight.w700);
    const contentStyle = TextStyle(
        color: Color(0xff999999), fontSize: 14, fontWeight: FontWeight.normal);
    final double width = MediaQuery.of(context).size.width * 0.98;

    return Container(
        child: RecolteWidget(
      idExploitation: idExploitation,
      idProduit: Constants.exploitationObject.produitid,
      idDefaultVariete: Constants.exploitationObject.varieteid,
      idDefaultEmballage: Constants.exploitationObject.emballageid,
    ));
  }

  Widget _itemRemboursementsExploitation(int idExploitation) {
    const headerStyle = TextStyle(
        color: Color(0xffffffff), fontSize: 15, fontWeight: FontWeight.bold);
    const contentStyleHeader = TextStyle(
        color: Color(0xff999999), fontSize: 14, fontWeight: FontWeight.w700);
    const contentStyle = TextStyle(
        color: Color(0xff999999), fontSize: 14, fontWeight: FontWeight.normal);
    final double width = MediaQuery.of(context).size.width * 0.98;

    return Container(
        child: RemboursementWidget(
      idExploitation: idExploitation,
      idProduit: Constants.exploitationObject.produitid,
      idDefaultVariete: Constants.exploitationObject.varieteid,
      idDefaultEmballage: Constants.exploitationObject.emballageid,
    ));
  }

  @override
  Widget build(BuildContext context) {
    var size = MediaQuery.of(context).size;
    //final theme = Theme.of(context);
    final theme = Theme.of(context);
    return WillPopScope(
      onWillPop: () => _goToLogin(context),
      child: SafeArea(
        child: Scaffold(
          appBar: _buildAppBar(theme),
          body: Container(
            width: double.infinity,
            height: double.infinity,
            color: theme.primaryColor.withOpacity(.1),
            child: Stack(
              children: <Widget>[
                Column(
                  children: <Widget>[
                    const SizedBox(height: 20),
                    Expanded(
                      flex: 8,
                      child: ShaderMask(
                        // blendMode: BlendMode.srcOver,
                        shaderCallback: (Rect bounds) {
                          return LinearGradient(
                            begin: Alignment.topLeft,
                            end: Alignment.bottomRight,
                            colors: <Color>[
                              Colors.white,
                              Colors.white,
                              /*
                              Colors.deepPurpleAccent.shade100,
                              Colors.deepPurple.shade100,
                              Colors.deepPurple.shade100,
                              Colors.deepPurple.shade100,
                              */
                              // Colors.red,
                              // Colors.yellow,
                            ],
                          ).createShader(bounds);
                        },
                        child: _buildEdit(context),
                      ),
                    ),
                  ],
                ),
                //if (!kReleaseMode) _buildDebugButtons(),
              ],
            ),
          ),
        ),
      ),
    );
  }

  String _getRegexString() => true ? r'[0-9]+[,.]{0,1}[0-9]*' : r'[0-9]';

  @override
  void didPop() {
    // TODO: implement didPop
  }

  @override
  void didPopNext() {
    // TODO: implement didPopNext
  }

  @override
  void didPush() {
    // TODO: implement didPush
  }

  @override
  void didPushNext() {
    // TODO: implement didPushNext
  }
}

/// This is Common App textfiled class.
class AppTextField extends StatefulWidget {
  final TextEditingController textEditingController;
  final String title;
  final String hint;
  final bool isItemSelected;
  final List<SelectedListItem>? datas;

  const AppTextField({
    required this.textEditingController,
    required this.title,
    required this.hint,
    required this.isItemSelected,
    this.datas,
    Key? key,
  }) : super(key: key);

  @override
  _AppTextFieldState createState() => _AppTextFieldState();
}

class _AppTextFieldState extends State<AppTextField> {
  /// This is on text changed method which will display on city text field on changed.
  void onTextFieldTap() {
    DropDownState(
      DropDown(
        isDismissible: true,
        bottomSheetTitle: Text(
          '${widget.hint}',
          style: TextStyle(
            fontWeight: FontWeight.bold,
            fontSize: 20.0,
          ),
        ),
        submitButtonChild: const Text(
          'Done',
          style: TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.bold,
          ),
        ),
        data: widget.datas ?? [],
        selectedItems: (List<dynamic> selectedList) {
          List<String> list = [];
          for (var item in selectedList) {
            if (item is SelectedListItem) {
              list.add(item.value!);
            }
          }
          widget.textEditingController.text = list[0];
          //showSnackBar(list.toString());
        },
        enableMultipleSelection: false,
      ),
    ).showModal(context);
  }

  void showSnackBar(String message) {
    ScaffoldMessenger.of(context)
        .showSnackBar(SnackBar(content: Text(message)));
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(widget.title),
        const SizedBox(
          height: 5.0,
        ),
        TextFormField(
          controller: widget.textEditingController,
          cursorColor: Colors.black,
          onTap: widget.isItemSelected
              ? () {
                  FocusScope.of(context).unfocus();
                  onTextFieldTap();
                }
              : null,
          decoration: InputDecoration(
            filled: true,
            fillColor: Colors.black12,
            contentPadding:
                const EdgeInsets.only(left: 8, bottom: 0, top: 0, right: 15),
            hintText: widget.hint,
            border: const OutlineInputBorder(
              borderSide: BorderSide(
                width: 0,
                style: BorderStyle.solid,
              ),
              borderRadius: BorderRadius.all(
                Radius.circular(8.0),
              ),
            ),
          ),
        ),
        const SizedBox(
          height: 15.0,
        ),
      ],
    );
  }
}
