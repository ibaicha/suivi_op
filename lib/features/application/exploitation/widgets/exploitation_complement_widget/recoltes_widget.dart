import 'dart:core';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_dropdown_plus/dropdown.dart';
import 'package:flutter_dropdown_plus/dropdown_item.dart';
import 'package:intl/intl.dart';

import '../../../../../core/data/model/ObjectBox/objectBoxModels.dart';
import '../../../../../core/data/service/ObjectBoxHelper.dart';
import '../../../../../core/res/constants.dart';
import '../../../../../objectbox.g.dart';
import '../../../variete/widgets/all_variete_widget/bloc/all_varietes_bloc.dart';

class RecolteWidget extends StatefulWidget {
  late int idExploitation;
  late int idProduit;
  late int idDefaultVariete;
  late int idDefaultEmballage;

  RecolteWidget({
    Key? key,
    required this.idExploitation,
    required this.idProduit,
    required this.idDefaultVariete,
    required this.idDefaultEmballage,
  }) : super(key: key);

  @override
  State<RecolteWidget> createState() => _RecolteWidgetState();
}

class _RecolteWidgetState extends State<RecolteWidget> {
  late AllVarietesBloc blocAllVarietes;
  final TextEditingController _dateTextEditingController =
      TextEditingController();
  final TextEditingController _textFieldPuController = TextEditingController();
  final TextEditingController _textFieldQteController = TextEditingController();
  final TextEditingController _textFieldTotalController =
      TextEditingController();

  final int _currentSortColumn = 0;
  final bool _isAscending = true;
  final formatter = NumberFormat('#,##0.0', 'fr_FR');
  final dateFormat = DateFormat('dd MMMM yyyy', 'fr_FR');

  String singleSelectedVarieteId = "";
  String singleSelectedEmballageId = "";

  String AddUpdate = "Add";
  int idRecolteUpdate = 0;

  List<Item> recoltes = [];

  @override
  void initState() {
    super.initState();
    print('widget.idExploitation: ' + widget.idExploitation.toString());
    print('widget.idProduit: ' + widget.idProduit.toString());
    print('widget.idDefaultVariete: ' + widget.idDefaultVariete.toString());
    print('Constants.exploitationObject.varietepu.toString(): ' +
        Constants.exploitationObject.varietepu.toString());

    singleSelectedVarieteId = widget.idDefaultVariete.toString();
    singleSelectedEmballageId = widget.idDefaultEmballage.toString();

    _textFieldPuController.text =
        Constants.exploitationObject.varietepu.toString();

    final mxrecolteBox = ObjectBox.mxrecoltesBox;
    List<MxRecolteObject> mesRecoltes = [];

    Query<MxRecolteObject> query = mxrecolteBox!
        .query(
            MxRecolteObject_.mxExploitationObject.equals(widget.idExploitation))
        .build();
    mesRecoltes = query.find();
    query.close();

    recoltes = mesRecoltes
        .map((item) => Item(
              id: item.id,
              date: item.date,
              qte: item.nombre_emballage,
              pu: item.pu,
              valeur: item.valeur,
              exploitationid: item.mxExploitationObject.target!.id,
              varieteid: item.mxvarieteObject.target!.id,
              varietename: item.mxvarieteObject.target!.name,
              produitid:
                  item.mxvarieteObject.target!.mxProduitObject.target!.id,
              produitname:
                  item.mxvarieteObject.target!.mxProduitObject.target!.name,
              filiereid: item.mxvarieteObject.target!.mxProduitObject.target!
                  .mxFiliereObject.target!.id,
              filierename: item.mxvarieteObject.target!.mxProduitObject.target!
                  .mxFiliereObject.target!.name,
              emballageid: item.mxemballageObject.target!.id,
              emballagename: item.mxemballageObject.target!.name,
            ))
        .toList();
  }

  _renderVarietesItems() {
    //final double height = MediaQuery.of(context).size.height;
    List<DropdownItem> itemVarietesList = [];
    List<DropdownItem> list = [];

    final mxvarietesBox = ObjectBox.mxvarietesBox;
    Query<MxVarieteObject> query = mxvarietesBox!
        .query(MxVarieteObject_.mxProduitObject.equals(widget.idProduit))
        .build();

    var mesVarietes = query.find();

    mesVarietes?.forEach((element) {
      list.add(DropdownItem(
          id: element.id.toString(),
          //value:'${element.produitname.toString().toUpperCase()} | ${element.name.toString().toUpperCase()}',
          value:
              '${element.mxProduitObject.target!.name.toString().toUpperCase()} | ${element.name.toString().toUpperCase()}',
          data: MxVarieteObject(
              id: element.id,
              name: element.name,
              surface_unite: element.surface_unite,
              quantite_unite: element.quantite_unite,
              pu_unite: element.pu_unite,
              rendement_unite: element.rendement_unite,
              isActive: element.isActive)));
    });

    itemVarietesList = list;
    return Dropdown.singleSelection(
        title: "CHOISIR UNE VARIETE",
        labelText: "VARIETE",
        hintText: "Selection variété",
        list: itemVarietesList,
        selectedId: singleSelectedVarieteId,
        onTapAddItem: (searchValue) {
          print(searchValue);
        },
        onSingleItemListener: (selectedItem) {
          setState(() {
            singleSelectedVarieteId = selectedItem.id;

            _textFieldPuController.text = selectedItem.data.pu_unite.toString();

            final mxemballageBox = ObjectBox.mxemballagesBox;
            MxEmballageObject? myEmballage = mxemballageBox!
                .query(MxEmballageObject_.id
                    .equals(int.parse(singleSelectedEmballageId)))
                .build()
                .findFirst();

            double total = _montantTotal(_textFieldPuController.text.toString(),
                _textFieldQteController.text.toString());
            total = _montantTotal(
                total.toString(), myEmballage!.quantite.toString());

            print('total: $total');
            _textFieldTotalController.text = total.toString();
          });

          String itemId = selectedItem.id;
          String itemName = selectedItem.value;
          MxVarieteObject varieteObject = selectedItem.data as MxVarieteObject;

          print(
              "Item Id: $itemId -- Item Name: $itemName ## Other Details ## Variete Id: ${varieteObject.id} -- Variete name: ${varieteObject.name}");
        });
  }

  _renderEmballagesItems() {
    List<DropdownItem> itemEmballagesList = [];
    List<DropdownItem> list = [];

    final mxemballagesBox = ObjectBox.mxemballagesBox;

    Query<MxEmballageObject> query = mxemballagesBox!
        .query(MxEmballageObject_.mxProduitObject.equals(widget.idProduit))
        .build();

    print('widget.idProduit ' + widget.idProduit.toString());
    //print(mxemballagesBox!.toString());

    var mesEmballages = query.find();
    //print('Emballages: ${mesEmballages.length}');
    mesEmballages.forEach((element) {
      print('Emballage: ${element}');
      list.add(DropdownItem(
          id: element.id.toString(),
          //value:'${element.produitname.toString().toUpperCase()} | ${element.name.toString().toUpperCase()}',
          value:
              '${element.mxProduitObject.target!.name.toString().toUpperCase()} | ${element.name.toString().toUpperCase()}',
          data: MxEmballageObject(
              id: element.id,
              name: element.name,
              conditionnement: element.conditionnement,
              quantite: element.quantite,
              pu: element.pu,
              valeur: element.valeur,
              isActive: element.isActive,
              isDefault: element.isDefault)));
    });

    itemEmballagesList = list;
    return Dropdown.singleSelection(
        title: "CHOISIR UNE EMBALLAGE",
        labelText: "EMBALLAGE",
        hintText: "Selection emballage",
        list: itemEmballagesList,
        selectedId: singleSelectedEmballageId,
        onTapAddItem: (searchValue) {
          print(searchValue);
        },
        onSingleItemListener: (selectedItem) {
          setState(() {
            singleSelectedEmballageId = selectedItem.id;

            final mxemballageBox = ObjectBox.mxemballagesBox;
            MxEmballageObject? myEmballage = mxemballageBox!
                .query(MxEmballageObject_.id
                    .equals(int.parse(singleSelectedEmballageId)))
                .build()
                .findFirst();

            double total = _montantTotal(_textFieldPuController.text.toString(),
                _textFieldQteController.text.toString());
            total = _montantTotal(
                total.toString(), myEmballage!.quantite.toString());

            print('total: $total');

            _textFieldTotalController.text = total.toString();
          });

          String itemId = selectedItem.id;
          String itemName = selectedItem.value;
          MxEmballageObject emballageObject =
              selectedItem.data as MxEmballageObject;

          print(
              "Item Id: $itemId -- Item Name: $itemName ## Other Details ## Emballage Id: ${emballageObject.id} -- Emballage name: ${emballageObject.name}");
        });
  }

  @override
  void dispose() {
    super.dispose();
  }

  List<DataColumn> _createColumns() {
    return [
      const DataColumn(
        label: Text('Date'),
        numeric: false,
        tooltip: 'Date of the item',
      ),
      const DataColumn(
        label: Text('Qte'),
        numeric: false,
        tooltip: 'Quantite of the item',
      ),
      const DataColumn(
        label: Text('Unite'),
        numeric: false,
        tooltip: 'Unite of the item',
      ),
      const DataColumn(
        label: Text('Variete'),
        numeric: false,
        tooltip: 'Variete of the item',
      ),
      const DataColumn(
        label: Text('|||'),
        tooltip: 'Modifier...',
      ),
    ];
  }

  DataRow _createRow(Item item) {
    return DataRow(
      // index: item.id, // for DataRow.byIndex
      key: ValueKey(item.id),

      color: MaterialStateColor.resolveWith((Set<MaterialState> states) =>
          states.contains(MaterialState.selected)
              ? Colors.red
              : const Color.fromARGB(100, 215, 217, 219)),
      cells: [
        DataCell(Text(
            DateFormat('dd/MM/yyyy', 'fr_FR').format(item.date).toString())),
        DataCell(Text(formatter.format(item.qte))),
        DataCell(Text(
          item.emballagename,
        )),
        DataCell(
          Text(item.varietename),
        ),
        DataCell(
          const Text(''),
          placeholder: false,
          showEditIcon: true,
          onTap: () {
            Item myItem = Item(
              id: item.id,
              date: item.date,
              pu: item.pu,
              qte: item.qte,
              valeur: item.valeur,
              exploitationid: item.exploitationid,
              varieteid: item.varieteid,
              varietename: item.varietename,
              produitid: item.produitid,
              produitname: item.produitname,
              filiereid: item.filiereid,
              filierename: item.filierename,
              emballageid: item.emballageid,
              emballagename: item.emballagename,
            );
            idRecolteUpdate = myItem.id;
            _showDialogEditItem(
                context, widget.idExploitation, 'Update', myItem);

            // print('Key: ${item.id} -- ${item.name} -- ${widget.idExploitation}');
            //print('id: ${myItem.id}  chargeexploitationid: ${myItem.chargeexploitationid}  chargeexploitationname: ${myItem.chargeexploitationname} ');
          },
        ),
      ],
    );
  }

  _replaceVirguleToPoint(String value) {
    return value.replaceAll(",", ".");
  }

  _montantTotal(String prix, String quantite) {
    prix = _replaceVirguleToPoint(prix);
    quantite = _replaceVirguleToPoint(quantite);
    double pu = prix.isNotEmpty ? double.parse(prix) : 0;
    double qte = quantite.isNotEmpty ? double.parse(quantite) : 0;
    double produit = pu * qte;
    return produit;
  }

  void _showDialogEditItem(
      BuildContext context, int idExploitation, String AddUpdate, Item myItem) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        _dateTextEditingController.text = dateFormat.format(myItem.date);
        if (AddUpdate == 'Update') {
          _textFieldPuController.text = myItem.pu.toString();
          _textFieldQteController.text = myItem.qte.toString();
          _textFieldTotalController.text = myItem.valeur.toString();
          singleSelectedEmballageId = myItem.emballageid.toString();
          singleSelectedVarieteId = myItem.varieteid.toString();
        }

        if (AddUpdate == 'Add') {
          _textFieldQteController.text = myItem.qte.toString();
          _textFieldTotalController.text = myItem.valeur.toString();
        }
        return AlertDialog(
          //title: Text(item.name),
          content: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            //position
            mainAxisSize: MainAxisSize.min,
            // wrap content in flutter
            children: <Widget>[
              // Marge avant le conteneur
              SizedBox(height: 25),
              // Titre de la page avec marge
              Padding(
                padding: EdgeInsets.symmetric(horizontal: 8.0),
                child: Container(
                  width: double.infinity,
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      colors: [Colors.blue, Colors.blueAccent],
                      begin: Alignment.topCenter,
                      end: Alignment.bottomCenter,
                    ),
                    borderRadius: BorderRadius.vertical(
                      top: Radius.circular(15),
                      bottom: Radius.circular(15),
                    ),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.grey.withOpacity(0.5),
                        spreadRadius: 5,
                        blurRadius: 7,
                        offset: Offset(0, 3), // changes position of shadow
                      ),
                    ],
                  ),
                  padding:
                      EdgeInsets.symmetric(vertical: 10.0, horizontal: 10.0),
                  child: Text(
                    AddUpdate == 'Add' ? 'Ajouter ...' : 'Modifier ...',
                    style: TextStyle(
                      fontSize: 20.0,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
                ),
              ),
              // Marge après le conteneur
              SizedBox(height: 25),

              TextField(
                controller: _dateTextEditingController,
                //editing controller of this TextField
                decoration: InputDecoration(
                  //icon: Icon(Icons.calendar_today),
                  labelText: "Date", //label text of field
                  labelStyle:
                      TextStyle(fontSize: 18, color: Colors.grey.shade800),
                  border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10)),
                ),

                readOnly: true,
                //set it true, so that user will not able to edit text
                onTap: () async {
                  DateTime? pickedDate = await showDatePicker(
                      context: context,
                      locale: const Locale("fr", "FR"),
                      initialDate: DateTime.now(),
                      firstDate: DateTime(2022),
                      lastDate: DateTime(2030),
                      builder: (BuildContext context, Widget? child) {
                        return Theme(
                          data: ThemeData.dark(),
                          child: child!,
                        );
                      });

                  if (pickedDate != null) {
                    print(
                        pickedDate); //pickedDate output format => 2021-03-10 00:00:00.000
                    String formattedDate =
                        DateFormat('dd MMMM yyyy', 'fr_FR').format(pickedDate);
                    //String formattedDate = DateFormat('dd MMMM yyyy', 'fr_FR');
                    print(
                        formattedDate); //formatted date output using intl package =>  2021-03-16
                    setState(() {
                      _dateTextEditingController.text =
                          formattedDate; //set output date to TextField value.
                    });
                  } else {}
                },
              ),
              const SizedBox(
                height: 10,
              ),
              _renderVarietesItems(),
              const SizedBox(
                height: 10,
              ),
              _renderEmballagesItems(),
              const SizedBox(
                height: 10,
              ),
              TextField(
                onChanged: (value) {
                  // print('value: $value');

                  final mxemballageBox = ObjectBox.mxemballagesBox;
                  MxEmballageObject? myEmballage = mxemballageBox!
                      .query(MxEmballageObject_.id
                          .equals(int.parse(singleSelectedEmballageId)))
                      .build()
                      .findFirst();

                  double total = _montantTotal(
                      _textFieldPuController.text.toString(), value);
                  total = _montantTotal(
                      total.toString(), myEmballage!.quantite.toString());

                  print('total: $total');

                  _textFieldTotalController.text = total.toString();
                },
                controller: _textFieldPuController,
                readOnly: false,
                textAlign: TextAlign.right,
                inputFormatters: <TextInputFormatter>[
                  FilteringTextInputFormatter.allow(RegExp(_getRegexString())),
                  TextInputFormatter.withFunction(
                    (oldValue, newValue) => newValue.copyWith(
                      text: newValue.text.replaceAll('.', ','),
                    ),
                  ),
                ],
                decoration: InputDecoration(
                  labelText: 'Prix Unité',
                  labelStyle:
                      TextStyle(fontSize: 15, color: Colors.grey.shade400),
                  contentPadding: const EdgeInsets.symmetric(
                      vertical: 10.0, horizontal: 10.0),
                  border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10)),
                ),
                keyboardType:
                    const TextInputType.numberWithOptions(decimal: true),
              ),
              const SizedBox(
                height: 10,
              ),
              TextField(
                onChanged: (value) {
                  // print('value: $value');

                  final mxemballageBox = ObjectBox.mxemballagesBox;
                  MxEmballageObject? myEmballage = mxemballageBox!
                      .query(MxEmballageObject_.id
                          .equals(int.parse(singleSelectedEmballageId)))
                      .build()
                      .findFirst();

                  double total = _montantTotal(
                      _textFieldPuController.text.toString(), value);

                  total = _montantTotal(
                      total.toString(), myEmballage!.quantite.toString());

                  print('total: $total');

                  _textFieldTotalController.text = total.toString();
                },
                controller: _textFieldQteController,
                readOnly: false,
                textAlign: TextAlign.right,
                inputFormatters: <TextInputFormatter>[
                  FilteringTextInputFormatter.allow(RegExp(_getRegexString())),
                  TextInputFormatter.withFunction(
                    (oldValue, newValue) => newValue.copyWith(
                      text: newValue.text.replaceAll('.', ','),
                    ),
                  ),
                ],
                decoration: InputDecoration(
                  labelText: 'Nombre (Emballage)',
                  labelStyle:
                      TextStyle(fontSize: 15, color: Colors.grey.shade400),
                  contentPadding: const EdgeInsets.symmetric(
                      vertical: 10.0, horizontal: 10.0),
                  border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10)),
                ),
                keyboardType:
                    const TextInputType.numberWithOptions(decimal: true),
              ),
              
              const SizedBox(
                height: 10,
              ),
              TextField(
                controller: _textFieldTotalController,
                readOnly: true,
                textAlign: TextAlign.right,
                inputFormatters: <TextInputFormatter>[
                  FilteringTextInputFormatter.allow(RegExp(_getRegexString())),
                  TextInputFormatter.withFunction(
                    (oldValue, newValue) => newValue.copyWith(
                      text: newValue.text.replaceAll('.', ','),
                    ),
                  ),
                ],
                decoration: InputDecoration(
                  labelText: 'Total',
                  labelStyle:
                      TextStyle(fontSize: 15, color: Colors.grey.shade400),
                  contentPadding: const EdgeInsets.symmetric(
                      vertical: 10.0, horizontal: 10.0),
                  border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10)),
                ),
                keyboardType:
                    const TextInputType.numberWithOptions(decimal: true),
              ),
              const SizedBox(
                height: 20,
              ),
              Container(
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: <Widget>[
                    ElevatedButton(
                      onPressed: () {
                        Navigator.of(context).pop();
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor:
                            Colors.redAccent, // Couleur de fond du bouton
                        textStyle:
                            TextStyle(color: Colors.black), // Couleur du texte
                        padding: EdgeInsets.symmetric(
                            horizontal: 20,
                            vertical: 15), // Espacement interne du bouton
                        shape: RoundedRectangleBorder(
                            borderRadius:
                                BorderRadius.circular(10)), // Forme du bouton
                      ),
                      child: Text('Delete'),
                    ),
                    SizedBox(width: 10),
                    if (AddUpdate == "Add")
                      ElevatedButton(
                        onPressed: () {
                          // print('idExploitation: $idExploitation _dateTextEditingController: ${_dateTextEditingController.text} singleSelectedVarieteId: $singleSelectedVarieteId singleSelectedEmballageId: $singleSelectedEmballageId  Qte: ${_textFieldQteController.text} Pu: ${_textFieldPuController.text} Total: ${_textFieldTotalController.text}');

                          final mxemballageBox = ObjectBox.mxemballagesBox;
                          MxEmballageObject? myEmballage = mxemballageBox!
                              .query(MxEmballageObject_.id
                                  .equals(int.parse(singleSelectedEmballageId)))
                              .build()
                              .findFirst();
                          final mxvarietesBox = ObjectBox.mxvarietesBox;
                          MxVarieteObject? myVariete = mxvarietesBox!
                              .query(MxVarieteObject_.id
                                  .equals(int.parse(singleSelectedVarieteId!)))
                              .build()
                              .findFirst();
                          final mxExploitationObject =
                              ObjectBox.mxexploitationBox;
                          MxExploitationObject? myExploitation =
                              mxExploitationObject!
                                  .query(MxExploitationObject_.id
                                      .equals(idExploitation))
                                  .build()
                                  .findFirst();
                          /* DEBUT FORMATAGE DATE */

                          String originalDateString = _dateTextEditingController
                              .text
                              .trim(); // Example date string in dd-MM-yyyy format
                          DateFormat originalFormat =
                              DateFormat('dd MMMM yyyy', 'fr_FR');
                          DateFormat targetFormat = DateFormat('yyyy-MM-dd');
                          DateTime parsedDate =
                              originalFormat.parse(originalDateString);
                          String targetDateString =
                              targetFormat.format(parsedDate);

                          /* FIN FORMATAGE DATE */

                          MxRecolteObject object = MxRecolteObject(
                            id: 0,
                            date: DateTime.parse(targetDateString),
                            pu: double.parse(_textFieldPuController.text),
                            nombre_unite:
                                double.parse(_textFieldQteController.text),
                            nombre_emballage:
                                double.parse(_textFieldQteController.text),
                            valeur:
                                double.parse(_textFieldTotalController.text),
                          );

                          object.mxExploitationObject.target = myExploitation;
                          object.mxemballageObject.target = myEmballage;
                          object.mxvarieteObject.target = myVariete;

                          final mxrecolteObject = ObjectBox.mxrecoltesBox;
                          int idRecolte = mxrecolteObject!.put(object);

                          print('idRecolte: $idRecolte');

                          final mxrecolteBox = ObjectBox.mxrecoltesBox;
                          List<MxRecolteObject> mesRecoltes = [];

                          Query<MxRecolteObject> query = mxrecolteBox!
                              .query(MxRecolteObject_.mxExploitationObject
                                  .equals(widget.idExploitation))
                              .build();
                          mesRecoltes = query.find();
                          query.close();

                          recoltes = mesRecoltes
                              .map((item) => Item(
                                    id: item.id,
                                    date: item.date,
                                    qte: item.nombre_emballage,
                                    pu: item.pu,
                                    valeur: item.valeur,
                                    exploitationid:
                                        item.mxExploitationObject.target!.id,
                                    varieteid: item.mxvarieteObject.target!.id,
                                    varietename:
                                        item.mxvarieteObject.target!.name,
                                    produitid: item.mxvarieteObject.target!
                                        .mxProduitObject.target!.id,
                                    produitname: item.mxvarieteObject.target!
                                        .mxProduitObject.target!.name,
                                    filiereid: item
                                        .mxvarieteObject
                                        .target!
                                        .mxProduitObject
                                        .target!
                                        .mxFiliereObject
                                        .target!
                                        .id,
                                    filierename: item
                                        .mxvarieteObject
                                        .target!
                                        .mxProduitObject
                                        .target!
                                        .mxFiliereObject
                                        .target!
                                        .name,
                                    emballageid:
                                        item.mxemballageObject.target!.id,
                                    emballagename:
                                        item.mxemballageObject.target!.name,
                                  ))
                              .toList();
                          Navigator.of(context).pop();
                        },
                        style: ElevatedButton.styleFrom(
                          backgroundColor:
                              Colors.orangeAccent, // Couleur de fond du bouton
                          textStyle: TextStyle(
                              color: Colors.black), // Couleur du texte
                          padding: EdgeInsets.symmetric(
                              horizontal: 20,
                              vertical: 15), // Espacement interne du bouton
                          shape: RoundedRectangleBorder(
                              borderRadius:
                                  BorderRadius.circular(10)), // Forme du bouton
                        ),
                        child: Text('Ajouter'),
                      ),
                    if (AddUpdate == "Update")
                      ElevatedButton(
                        onPressed: () {
                          // print('idExploitation: $idExploitation _dateTextEditingController: ${_dateTextEditingController.text} singleSelectedVarieteId: $singleSelectedVarieteId singleSelectedEmballageId: $singleSelectedEmballageId  Qte: ${_textFieldQteController.text} Pu: ${_textFieldPuController.text} Total: ${_textFieldTotalController.text}');
                          print('idRecolteUpdate : ' +
                              idRecolteUpdate.toString());

                          // UPDATE THE RECOLTE
                          MxRecolteObject recolteToUpdate =
                              ObjectBox.mxrecoltesBox!.get(idRecolteUpdate)!;

                          print(recolteToUpdate.toJson().toString());

                          final mxemballageBox = ObjectBox.mxemballagesBox;
                          MxEmballageObject? myEmballage = mxemballageBox!
                              .query(MxEmballageObject_.id
                                  .equals(int.parse(singleSelectedEmballageId)))
                              .build()
                              .findFirst();

                          final mxvarietesBox = ObjectBox.mxvarietesBox;
                          MxVarieteObject? myVariete = mxvarietesBox!
                              .query(MxVarieteObject_.id
                                  .equals(int.parse(singleSelectedVarieteId!)))
                              .build()
                              .findFirst();

                          final mxExploitationObject =
                              ObjectBox.mxexploitationBox;
                          MxExploitationObject? myExploitation =
                              mxExploitationObject!
                                  .query(MxExploitationObject_.id
                                      .equals(idExploitation))
                                  .build()
                                  .findFirst();
                          /* DEBUT FORMATAGE DATE */

                          String originalDateString = _dateTextEditingController
                              .text
                              .trim(); // Example date string in dd-MM-yyyy format
                          DateFormat originalFormat =
                              DateFormat('dd MMMM yyyy', 'fr_FR');
                          DateFormat targetFormat = DateFormat('yyyy-MM-dd');
                          DateTime parsedDate =
                              originalFormat.parse(originalDateString);
                          String targetDateString =
                              targetFormat.format(parsedDate);

                          recolteToUpdate.date =
                              DateTime.parse(targetDateString);
                          ;
                          recolteToUpdate.pu =
                              double.parse(_textFieldPuController.text);
                          recolteToUpdate.nombre_unite =
                              double.parse(_textFieldQteController.text);
                          recolteToUpdate.nombre_emballage =
                              double.parse(_textFieldQteController.text);
                          recolteToUpdate.valeur =
                              double.parse(_textFieldTotalController.text);

                          recolteToUpdate.mxExploitationObject.target =
                              myExploitation;
                          recolteToUpdate.mxemballageObject.target =
                              myEmballage;
                          recolteToUpdate.mxvarieteObject.target = myVariete;

                          print(recolteToUpdate.toJson().toString());

                          final mxrecolteObject = ObjectBox.mxrecoltesBox;

                          mxrecolteObject!.put(recolteToUpdate);

                          final mxrecolteBox = ObjectBox.mxrecoltesBox;
                          List<MxRecolteObject> mesRecoltes = [];

                          Query<MxRecolteObject> query = mxrecolteBox!
                              .query(MxRecolteObject_.mxExploitationObject
                                  .equals(widget.idExploitation))
                              .build();
                          mesRecoltes = query.find();
                          query.close();

                          recoltes = mesRecoltes
                              .map((item) => Item(
                                    id: item.id,
                                    date: item.date,
                                    qte: item.nombre_emballage,
                                    pu: item.pu,
                                    valeur: item.valeur,
                                    exploitationid:
                                        item.mxExploitationObject.target!.id,
                                    varieteid: item.mxvarieteObject.target!.id,
                                    varietename:
                                        item.mxvarieteObject.target!.name,
                                    produitid: item.mxvarieteObject.target!
                                        .mxProduitObject.target!.id,
                                    produitname: item.mxvarieteObject.target!
                                        .mxProduitObject.target!.name,
                                    filiereid: item
                                        .mxvarieteObject
                                        .target!
                                        .mxProduitObject
                                        .target!
                                        .mxFiliereObject
                                        .target!
                                        .id,
                                    filierename: item
                                        .mxvarieteObject
                                        .target!
                                        .mxProduitObject
                                        .target!
                                        .mxFiliereObject
                                        .target!
                                        .name,
                                    emballageid:
                                        item.mxemballageObject.target!.id,
                                    emballagename:
                                        item.mxemballageObject.target!.name,
                                  ))
                              .toList();
                          Navigator.of(context).pop();
                        },
                        style: ElevatedButton.styleFrom(
                          backgroundColor:
                              Colors.orangeAccent, // Couleur de fond du bouton
                          textStyle: TextStyle(
                              color: Colors.black), // Couleur du texte
                          padding: EdgeInsets.symmetric(
                              horizontal: 20,
                              vertical: 15), // Espacement interne du bouton
                          shape: RoundedRectangleBorder(
                              borderRadius:
                                  BorderRadius.circular(10)), // Forme du bouton
                        ),
                        child: Text('Modifier'),
                      ),
                    SizedBox(width: 10),
                    ElevatedButton(
                      onPressed: () {
                        Navigator.of(context).pop();
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor:
                            Colors.greenAccent, // Couleur de fond du bouton
                        textStyle:
                            TextStyle(color: Colors.black), // Couleur du texte
                        padding: EdgeInsets.symmetric(
                            horizontal: 20,
                            vertical: 15), // Espacement interne du bouton
                        shape: RoundedRectangleBorder(
                            borderRadius:
                                BorderRadius.circular(10)), // Forme du bouton
                      ),
                      child: Text('Annuler'),
                    ),
                    // Espacement entre les boutons
                  ],
                ),
              )
            ],
          ),
          /*
          actions: <Widget>[
            TextButton(
              child: const Text("Valider"),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
            TextButton(
              child: const Text("Annuler"),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
          ],
          */
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        SingleChildScrollView(
          child: Column(
            children: [
              // Marge avant le conteneur
              SizedBox(height: 25),
              // Titre de la page avec marge
              Padding(
                padding: EdgeInsets.symmetric(horizontal: 8.0),
                child: Container(
                  width: double.infinity,
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      colors: [Colors.blue, Colors.blueAccent],
                      begin: Alignment.topCenter,
                      end: Alignment.bottomCenter,
                    ),
                    borderRadius: BorderRadius.vertical(
                      top: Radius.circular(15),
                      bottom: Radius.circular(15),
                    ),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.grey.withOpacity(0.5),
                        spreadRadius: 5,
                        blurRadius: 7,
                        offset: Offset(0, 3), // changes position of shadow
                      ),
                    ],
                  ),
                  padding:
                      EdgeInsets.symmetric(vertical: 10.0, horizontal: 10.0),
                  child: Text(
                    'RECOLTES EFFECTUES',
                    style: TextStyle(
                      fontSize: 20.0,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
                ),
              ),
              // Marge après le conteneur
              SizedBox(height: 25),
              SizedBox(
                height: MediaQuery.of(context).size.height * 0.6,
                child: Column(
                  children: [
                    Expanded(
                      child: MediaQuery.removePadding(
                        context: context,
                        removeTop: true,
                        child: loaderTable(context, recoltes),
                      ),
                    ),
                  ],
                ),
              ),
              Container(
                width: MediaQuery.of(context).size.width,
              )
            ],
          ),
        ),
        Positioned(
          bottom: 16,
          right: 16,
          child: FloatingActionButton(
            onPressed: () {
              _showDialogEditItem(
                  context,
                  widget.idExploitation,
                  AddUpdate,
                  Item(
                    id: 0,
                    date: DateTime.now(),
                    pu: 0,
                    qte: 0,
                    valeur: 0,
                    exploitationid: 0,
                    varieteid: 0,
                    varietename: '',
                    produitid: 0,
                    produitname: '',
                    filiereid: 0,
                    filierename: '',
                    emballageid: 0,
                    emballagename: '',
                  ));
            },
            child: Icon(Icons.add), // Icon displayed inside the button
            backgroundColor: Colors.blue, // Background color of the button
            foregroundColor: Colors.white, // Color of the icon
            elevation: 6.0, // Elevation (shadow) of the button
            splashColor: Colors.blueAccent, // Color when button is pressed
            tooltip: 'Add',
          ),
        ),
      
      ],
    );
  }

  Widget loaderTable(BuildContext context, List<Item> items) {
    return SizedBox(
      width: MediaQuery.of(context).size.width * 0.98,
      child: SingleChildScrollView(
        child: DataTable(
          sortColumnIndex: _currentSortColumn,
          sortAscending: _isAscending,
          columnSpacing: 0,
          dividerThickness: 5,
          decoration: BoxDecoration(
            border: Border.all(color: Colors.purple, width: 5),
            color: const Color.fromRGBO(237, 239, 245, 1),
            borderRadius: const BorderRadius.all(Radius.circular(8)),
          ),
          dataRowColor: MaterialStateColor.resolveWith(
              (Set<MaterialState> states) =>
                  states.contains(MaterialState.selected)
                      ? Colors.blue
                      : const Color.fromARGB(100, 215, 217, 219)),
          dataRowHeight: 35,
          dataTextStyle:
              const TextStyle(fontStyle: FontStyle.italic, color: Colors.black),
          headingRowColor: MaterialStateColor.resolveWith(
              (states) => const Color.fromARGB(100, 215, 217, 219)),
          headingRowHeight: 45,
          headingTextStyle:
              const TextStyle(fontWeight: FontWeight.bold, color: Colors.black),
          horizontalMargin: 10,
          showBottomBorder: true,
          showCheckboxColumn: false,
          columns: _createColumns(),
          rows: items.map((item) => _createRow(item)).toList(),
        ),
      ),
    );
  }

  String _getRegexString() => true ? r'[0-9]+[,.]{0,1}[0-9]*' : r'[0-9]';
}

class Item {
  Item({
    required this.id,
    required this.date,
    required this.pu,
    required this.qte,
    required this.valeur,
    required this.exploitationid,
    required this.varieteid,
    required this.varietename,
    required this.produitid,
    required this.produitname,
    required this.filiereid,
    required this.filierename,
    required this.emballageid,
    required this.emballagename,
  });

  int id;
  DateTime date;
  double pu;
  double qte;
  double valeur;
  int exploitationid;
  int varieteid;
  String varietename;
  int produitid;
  String produitname;
  int filiereid;
  String filierename;
  int emballageid;
  String emballagename;
}
