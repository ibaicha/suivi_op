import 'package:drop_down_list/drop_down_list.dart';
import 'package:drop_down_list/model/selected_list_item.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter_dropdown_plus/dropdown.dart';
import 'package:flutter_dropdown_plus/dropdown_item.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:intl/intl.dart';

import '../../../../../core/data/model/ObjectBox/objectBoxModels.dart';
import '../../../../../core/data/service/ObjectBoxHelper.dart';
import '../../../../../core/res/constants.dart';
import '../../../../../objectbox.g.dart';
import '../../../annee/widgets/all_annees_widget/bloc/all_annees_bloc.dart';
import '../../../saison/widgets/all_saisons_widget/bloc/all_saisons_bloc.dart';
import '../../../variete/widgets/all_variete_widget/bloc/all_varietes_bloc.dart';

class UpdateEditExploitationWidget extends StatefulWidget {
  late int idExploitation;

  UpdateEditExploitationWidget({Key? key, required this.idExploitation})
      : super(key: key);

  @override
  State<UpdateEditExploitationWidget> createState() =>
      _UpdateEditExploitationWidgetState();
}

class _UpdateEditExploitationWidgetState
    extends State<UpdateEditExploitationWidget> {
  late String _compte = '';
  late String unitesurface = '';
  late String quantiteproduit = '';
  late double rendement_theorique = 0;
  late double rendement_reel = 0;

  List<DropdownItem> _itemAnneesList = [];
  String _singleSelectedAnneeId = "";
  List<DropdownItem> _itemSaisonsList = [];
  String _singleSelectedSaisonId = "";
  String _singleSelectedVarieteId = "";
  List<DropdownItem> _itemVarietesList = [];

  String _singleSelectedProduitId = "";
  String _singleSelectedFiliereId = "";

  final TextEditingController _dateTextEditingController =
      TextEditingController();

  TextEditingController productionController = TextEditingController();
  TextEditingController puController = TextEditingController();
  TextEditingController surfaceController = TextEditingController();

  List<SelectedListItem> _listOfVarietes = [];
  String hintTextVariete = 'Choisir variete';

  @override
  void initState() {
    //_generateAnneesItems();
    //_generateSaisonsItems();
    _generateVarietesItems();
    //_getCompteExploitation('UPDATE');
  }

  _renderAnneesItems() {
    return BlocConsumer<AllAnneesBloc, AllAnneesState>(
        listener: (context, state) {},
        builder: (context, stateAnnee) {
          if (stateAnnee is AllAnneesInitialState) {
            print('xxxxx INITIAL ANNEE  xxxxxxx');
            BlocProvider.of<AllAnneesBloc>(context).add(LoadAllAnneesEvent());
            return const Center(
              child: CircularProgressIndicator(),
            );
          }
          if (stateAnnee is AllAnneesLoadingState) {
            print('xxxxx LOADING ANNEE  xxxxxxx');
            return const Center(
              child: CircularProgressIndicator(),
            );
          } else if (stateAnnee is AllAnneesLoadedState) {
            print('xxxxx load ANNEE  xxxxxxx');
            List<DropdownItem> _list = [];
            var mesAnnees = stateAnnee.apiResult;

            for (var element in mesAnnees) {
              print(element.name);
              _list.add(DropdownItem(
                  id: element.id.toString(),
                  value: ' ${element.name.toString().toUpperCase()}',
                  data: MxAnneeObject(
                      id: element.id,
                      name: element.name,
                      valeur: element.valeur)));
            }

            _itemAnneesList = _list;

            return Dropdown.singleSelection(
                title: "CHOISIR UNE ANNEE",
                labelText: "ANNEE",
                hintText: "Selection annÃ©e",
                list: _itemAnneesList,
                selectedId: _singleSelectedAnneeId,
                onSingleItemListener: (selectedItem) {
                  setState(() {
                    _singleSelectedAnneeId = selectedItem.id;
                  });
                  String itemId = selectedItem.id;
                  String itemName = selectedItem.value;
                  MxAnneeObject anneeObject =
                      selectedItem.data as MxAnneeObject;
                  print(
                      "Item Id: $itemId -- Item Name: $itemName ## Other Details ## Annee Id: ${anneeObject.id} -- Annee valeur: ${anneeObject.valeur}");
                });
          } else if (stateAnnee is AllAnneesErrorState) {
            return const Center(
              child: Text("Uh oh! ðŸ˜­ Something went wrong!"),
            );
          }
          return const Text("Very Great Error");
        });
  }

  _generateAnneesItems() {
    List<DropdownItem> list = [];
    final mxanneeBox = ObjectBox.mxanneesBox;
    var mesAnnees = mxanneeBox?.getAll();
    mesAnnees?.forEach((element) {
      list.add(DropdownItem(
          id: element.id.toString(),
          value: element.name.toString(),
          data: MxAnneeObject(
            id: element.id,
            valeur: element.valeur,
            name: element.name,
          )));
    });

    setState(() {
      _itemAnneesList = list;
    });
  }

  _generateSaisonsItems() {
    List<DropdownItem> list = [];
    final mxsaisonBox = ObjectBox.mxsaisonsBox;
    var mesSaisons = mxsaisonBox?.getAll();

    mesSaisons?.forEach((element) {
      print(element.name);
      list.add(DropdownItem(
          id: element.id.toString(),
          value: element.name.toString(),
          data: SaisonObject(
            id: element.id,
            name: element.name,
            description: element.description,
          )));
    });
    setState(() {
      _itemSaisonsList = list;
    });
  }

  _renderSaisonsItems() {
    return BlocConsumer<AllSaisonsBloc, AllSaisonsState>(
        listener: (context, state) {},
        builder: (context, stateSaison) {
          if (stateSaison is AllSaisonsInitialState) {
            print('xxxxx INITIAL SAISON  xxxxxxx');
            BlocProvider.of<AllSaisonsBloc>(context).add(LoadAllSaisonsEvent());
            return const Center(
              child: CircularProgressIndicator(),
            );
          }
          if (stateSaison is AllSaisonsLoadingState) {
            print('xxxxx LODING SAISON  xxxxxxx');
            return const Center(
              child: CircularProgressIndicator(),
            );
          } else if (stateSaison is AllSaisonsLoadedState) {
            print('xxxxx load SAISON  xxxxxxx');
            List<DropdownItem> _list = [];
            var mesSaisons = stateSaison.apiResult;

            for (var element in mesSaisons) {
              print(element.name);
              _list.add(DropdownItem(
                  id: element.id.toString(),
                  value: ' ${element.name.toString().toUpperCase()}',
                  data: MxSaisonObject(
                      id: element.id,
                      name: element.name,
                      description: element.description)));
            }

            _itemSaisonsList = _list;

            return Dropdown.singleSelection(
                title: "CHOISIR UNE SAISON",
                labelText: "SAISON",
                hintText: "Selection saison",
                list: _itemSaisonsList,
                selectedId: _singleSelectedSaisonId,
                onSingleItemListener: (selectedItem) {
                  setState(() {
                    _singleSelectedSaisonId = selectedItem.id;
                  });
                  String itemId = selectedItem.id;
                  String itemName = selectedItem.value;
                  MxSaisonObject saisonObject =
                      selectedItem.data as MxSaisonObject;
                  print(
                      "Item Id: $itemId -- Item Name: $itemName ## Other Details ## Saison Id: ${saisonObject.id} -- Annee annee: ${saisonObject.name}");
                });
          } else if (stateSaison is AllSaisonsErrorState) {
            return const Center(
              child: Text("Uh oh! ðŸ˜­ Something went wrong!"),
            );
          }
          return const Text("Very Great Error");
        });
  }

  _generateVarietesItems() {
    List<DropdownItem> list = [];
    final mxvarieteBox = ObjectBox.mxvarietesBox;
    var mesVarietes = mxvarieteBox?.getAll();
    mesVarietes?.forEach((element) {
      print(element.name);
      list.add(DropdownItem(
          id: element.id.toString(),
          value:
              '${element.mxProduitObject.target!.name.toString().toUpperCase()} | ${element.name.toString().toUpperCase()}',
          data: MxVarieteObject(
            id: element.id,
            name: element.name,
            surface_unite: element.surface_unite,
            quantite_unite: element.quantite_unite,
            pu_unite: element.pu_unite,
            rendement_unite: element.rendement_unite,
            isActive: element.isActive,
          )));
    });
    setState(() {
      _itemVarietesList = list;
    });
  }

  _renderVarietesItems() {
    //final double height = MediaQuery.of(context).size.height;
    List<DropdownItem> itemVarietesList = [];
    List<DropdownItem> list = [];

    final mxvarietesBox = ObjectBox.mxvarietesBox;
    Query<MxVarieteObject> query = mxvarietesBox!.query().build();

    var mesVarietes = query.find();

    mesVarietes?.forEach((element) {
      list.add(DropdownItem(
          id: element.id.toString(),
          //value:'${element.produitname.toString().toUpperCase()} | ${element.name.toString().toUpperCase()}',
          value:
              '${element.mxProduitObject.target!.name.toString().toUpperCase()} | ${element.name.toString().toUpperCase()}',
          data: MxVarieteObject(
              id: element.id,
              name: element.name,
              surface_unite: element.surface_unite,
              quantite_unite: element.quantite_unite,
              pu_unite: element.pu_unite,
              rendement_unite: element.rendement_unite,
              isActive: element.isActive)));
    });

    itemVarietesList = list;
    return Dropdown.singleSelection(
        title: "CHOISIR UNE VARIETE",
        labelText: "VARIETE",
        hintText: "Selection variÃ©tÃ©",
        list: itemVarietesList,
        selectedId: _singleSelectedVarieteId,
        //onTapAddItem: (searchValue) {print(searchValue);},
        onSingleItemListener: (selectedItem) {
          /*
          setState(() {
            _singleSelectedVarieteId = selectedItem.id;
          });
          */
          //_singleSelectedVarieteId = selectedItem.id;
          //String itemId = selectedItem.id;
          //String itemName = selectedItem.value;
          //MxVarieteObject varieteObject = selectedItem.data as MxVarieteObject;

          //print("Item Id: $itemId -- Item Name: $itemName ## Other Details ## Variete Id: ${varieteObject.id} -- Variete name: ${varieteObject.name}");
        });
  }

  _getCompteExploitation(String AddOrUpdate) {
    if (AddOrUpdate == 'UPDATE') {
      _compte = Constants.exploitationObject.compte.toString();

      _singleSelectedAnneeId = Constants.exploitationObject.anneeid.toString();
      _singleSelectedSaisonId =
          Constants.exploitationObject.saisonid.toString();
      _singleSelectedVarieteId =
          Constants.exploitationObject.varieteid.toString();
      _singleSelectedProduitId =
          Constants.exploitationObject.produitid.toString();
      _singleSelectedFiliereId =
          Constants.exploitationObject.filiereid.toString();
      productionController.text =
          Constants.exploitationObject.production.toString();
      surfaceController.text = Constants.exploitationObject.surface.toString();
      //_uniteTextEditingController.text = Constants.exploitationObject.unite.toString();
      puController.text = Constants.exploitationObject.pu.toString();

      String formattedDate = DateFormat('dd MMMM yyyy', 'fr_FR')
          .format(Constants.exploitationObject.date);
      _dateTextEditingController.text = formattedDate;
    }
  }

  @override
  Widget build(BuildContext context) {
    return _itemUpdateExploitation(widget.idExploitation);
  }

  _replaceVirguleToPoint(String value) {
    return value.replaceAll(",", ".");
  }

  Widget _itemUpdateExploitation(int idExploitation) {
    final mxvarietesBox = ObjectBox.mxvarietesBox;
    MxVarieteObject? varieteObject = mxvarietesBox!
        .get(int.parse(Constants.exploitationObject.varieteid.toString()));

    unitesurface = varieteObject!.surface_unite!;
    rendement_theorique = varieteObject.rendement_unite!;
    quantiteproduit = varieteObject.quantite_unite!;

    return Stack(children: [
      // Contenu principal de la page
      Center(
          child: Container(
        padding: const EdgeInsets.all(10),
        child: SingleChildScrollView(
          child: Column(
            children: [
              // Marge avant le conteneur
              SizedBox(height: 10),
              // Titre de la page avec marge
              Padding(
                padding: EdgeInsets.symmetric(horizontal: 8.0),
                child: Container(
                  width: double.infinity,
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      colors: [Colors.blue, Colors.blueAccent],
                      begin: Alignment.topCenter,
                      end: Alignment.bottomCenter,
                    ),
                    borderRadius: BorderRadius.vertical(
                      top: Radius.circular(15),
                      bottom: Radius.circular(15),
                    ),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.grey.withOpacity(0.5),
                        spreadRadius: 5,
                        blurRadius: 7,
                        offset: Offset(0, 3), // changes position of shadow
                      ),
                    ],
                  ),
                  padding:
                      EdgeInsets.symmetric(vertical: 10.0, horizontal: 10.0),
                  child: Text(
                    'MODIFIFER DE L\'EXPLOITATION',
                    style: TextStyle(
                      fontSize: 20.0,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
                ),
              ),
              // Marge aprÃ¨s le conteneur
              SizedBox(height: 50),

              TextField(
                controller: _dateTextEditingController,
                //editing controller of this TextField
                decoration: InputDecoration(
                  //icon: Icon(Icons.calendar_today),
                  labelText: "Date", //label text of field
                  labelStyle:
                      TextStyle(fontSize: 18, color: Colors.grey.shade800),
                  border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10)),
                ),

                readOnly: true,
                //set it true, so that user will not able to edit text
                onTap: () async {
                  DateTime? pickedDate = await showDatePicker(
                      context: context,
                      locale: const Locale("fr", "FR"),
                      initialDate: DateTime.now(),
                      firstDate: DateTime(2022),
                      lastDate: DateTime(2030),
                      builder: (BuildContext context, Widget? child) {
                        return Theme(
                          data: ThemeData.dark(),
                          child: child!,
                        );
                      });

                  if (pickedDate != null) {
                    print(
                        pickedDate); //pickedDate output format => 2021-03-10 00:00:00.000
                    String formattedDate =
                        DateFormat('dd MMMM yyyy', 'fr_FR').format(pickedDate);
                    //String formattedDate = DateFormat('dd MMMM yyyy', 'fr_FR');
                    print(
                        formattedDate); //formatted date output using intl package =>  2021-03-16
                    setState(() {
                      _dateTextEditingController.text =
                          formattedDate; //set output date to TextField value.
                    });
                  } else {}
                },
              ),

              const SizedBox(
                height: 30,
              ),
              _renderVarietesItems(),

/*
              TextField(
                controller: _dateTextEditingController,
                //editing controller of this TextField
                decoration: InputDecoration(
                  //icon: Icon(Icons.calendar_today),
                  labelText: "Date", //label text of field
                  labelStyle:
                      TextStyle(fontSize: 18, color: Colors.grey.shade800),
                  border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10)),
                ),

                readOnly: true,
                //set it true, so that user will not able to edit text
                onTap: () async {
                  DateTime? pickedDate = await showDatePicker(
                      context: context,
                      locale: const Locale("fr", "FR"),
                      initialDate: DateTime.now(),
                      firstDate: DateTime(2022),
                      lastDate: DateTime(2030),
                      builder: (BuildContext context, Widget? child) {
                        return Theme(
                          data: ThemeData.dark(),
                          child: child!,
                        );
                      });

                  if (pickedDate != null) {
                    print(
                        pickedDate); //pickedDate output format => 2021-03-10 00:00:00.000
                    String formattedDate =
                        DateFormat('dd MMMM yyyy', 'fr_FR').format(pickedDate);
                    //String formattedDate = DateFormat('dd MMMM yyyy', 'fr_FR');
                    print(
                        formattedDate); //formatted date output using intl package =>  2021-03-16
                    setState(() {
                      _dateTextEditingController.text =
                          formattedDate; //set output date to TextField value.
                    });
                  } else {}
                },
              ),
            
              const SizedBox(
                height: 30,
              ),

              _renderAnneesItems(),
              const SizedBox(
                height: 30,
              ),

              _renderSaisonsItems(),
              const SizedBox(
                height: 30,
              ),
              _renderVarietesItems(),
              if (_singleSelectedVarieteId.isNotEmpty)
                const SizedBox(
                  height: 30,
                ),
              if (_singleSelectedVarieteId.isNotEmpty)
                TextField(
                  controller: surfaceController,
                  readOnly: false,
                  textAlign: TextAlign.right,
                  inputFormatters: <TextInputFormatter>[
                    FilteringTextInputFormatter.allow(
                        RegExp(_getRegexString())),
                    TextInputFormatter.withFunction(
                      (oldValue, newValue) => newValue.copyWith(
                        text: newValue.text.replaceAll('.', ','),
                      ),
                    ),
                  ],
                  decoration: InputDecoration(
                    labelText: 'Surface ( $unitesurface )',
                    labelStyle:
                        TextStyle(fontSize: 18, color: Colors.grey.shade800),
                    border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(10)),
                  ),
                  keyboardType:
                      const TextInputType.numberWithOptions(decimal: true),
                ),
              if (_singleSelectedVarieteId.isNotEmpty)
                const SizedBox(
                  height: 55,
                ),
            
            */
            ],
          ),
        ),
      )),
      // Widget flottant en bas de page

      Positioned(
        bottom: 16,
        right: 16,
        child: FloatingActionButton(
          onPressed: () {
            setState(() {
              final mxexploitationsBox = ObjectBox.mxexploitationBox;
              MxExploitationObject exploitationToUpdate =
                  mxexploitationsBox!.get(idExploitation)!;

              print(exploitationToUpdate.toJson());
              print(exploitationToUpdate.mxanneeObject.target!.toJson());
              print(exploitationToUpdate.mxsaisonObject.target!.toJson());
              print(exploitationToUpdate.mxvarieteObject.target!.toJson());

              //print(_dateTextEditingControllerX.text.trim());

              String originalDateString = _dateTextEditingController.text
                  .trim(); // Example date string in dd-MM-yyyy format

// Define the original and target date formats
              DateFormat originalFormat = DateFormat('dd MMMM yyyy', 'fr_FR');
              DateFormat targetFormat = DateFormat('yyyy-MM-dd');

// Parse the original date string into a DateTime object
              DateTime parsedDate = originalFormat.parse(originalDateString);

// Format the DateTime object into the target date string
              String targetDateString = targetFormat.format(parsedDate);

              //print(targetDateString); // Output: 2023-06-21

              exploitationToUpdate.date = DateTime.parse(targetDateString);
              // exploitationToUpdate.unite = _uniteTextEditingController.text.trim();
              String surfaceValue =
                  _replaceVirguleToPoint(surfaceController.text.trim());
              exploitationToUpdate.surface = double.parse(surfaceValue);

              exploitationToUpdate.updatedAt =
                  DateTime.parse(DateTime.now().toString());

              final mxanneesBox = ObjectBox.mxanneesBox;
              MxAnneeObject myAnnee =
                  mxanneesBox!.get(int.parse(_singleSelectedAnneeId))!;
              exploitationToUpdate.mxanneeObject.target = myAnnee;

              final mxsaisonsBox = ObjectBox.mxsaisonsBox;
              MxSaisonObject mySaison =
                  mxsaisonsBox!.get(int.parse(_singleSelectedSaisonId))!;
              exploitationToUpdate.mxsaisonObject.target = mySaison;

              final mxvarietesBox = ObjectBox.mxvarietesBox;
              MxVarieteObject myVAriete =
                  mxvarietesBox!.get(int.parse(_singleSelectedVarieteId))!;
              exploitationToUpdate.mxvarieteObject.target = myVAriete;

              mxexploitationsBox!.put(exploitationToUpdate);

              ObjectBox.mxexploitationBox;
              MxExploitationObject exploitationToUpdate1 =
                  mxexploitationsBox!.get(idExploitation)!;
              print(exploitationToUpdate1.toJson());

              print(exploitationToUpdate.mxanneeObject.target!.toJson());
              print(exploitationToUpdate.mxsaisonObject.target!.toJson());
              print(exploitationToUpdate.mxvarieteObject.target!.toJson());

              // Constants.exploitationObject.unite = _uniteTextEditingController.text.trim();

              Constants.exploitationObject.date =
                  DateTime.parse(targetDateString);
              Constants.exploitationObject.surface = double.parse(surfaceValue);
            });
          },
          child: Icon(Icons.add),
        ),
      ),
    ]);
  }

  String _getRegexString() => true ? r'[0-9]+[,.]{0,1}[0-9]*' : r'[0-9]';
  @override
  void didPop() {
    // TODO: implement didPop
  }

  @override
  void didPopNext() {
    // TODO: implement didPopNext
  }

  @override
  void didPush() {
    // TODO: implement didPush
  }

  @override
  void didPushNext() {
    // TODO: implement didPushNext
  }
}

/// This is Common App textfiled class.
class AppTextField extends StatefulWidget {
  final TextEditingController textEditingController;
  final String title;
  final String hint;
  final bool isItemSelected;
  final List<SelectedListItem>? datas;

  const AppTextField({
    required this.textEditingController,
    required this.title,
    required this.hint,
    required this.isItemSelected,
    this.datas,
    Key? key,
  }) : super(key: key);

  @override
  _AppTextFieldState createState() => _AppTextFieldState();
}

class _AppTextFieldState extends State<AppTextField> {
  /// This is on text changed method which will display on city text field on changed.
  void onTextFieldTap() {
    DropDownState(
      DropDown(
        isDismissible: true,
        bottomSheetTitle: Text(
          '${widget.hint}',
          style: TextStyle(
            fontWeight: FontWeight.bold,
            fontSize: 20.0,
          ),
        ),
        submitButtonChild: const Text(
          'Done',
          style: TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.bold,
          ),
        ),
        data: widget.datas ?? [],
        selectedItems: (List<dynamic> selectedList) {
          List<String> list = [];
          for (var item in selectedList) {
            if (item is SelectedListItem) {
              list.add(item.value!);
            }
          }
          widget.textEditingController.text = list[0];
          //showSnackBar(list.toString());
        },
        enableMultipleSelection: false,
      ),
    ).showModal(context);
  }

  void showSnackBar(String message) {
    ScaffoldMessenger.of(context)
        .showSnackBar(SnackBar(content: Text(message)));
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(widget.title),
        const SizedBox(
          height: 5.0,
        ),
        TextFormField(
          controller: widget.textEditingController,
          cursorColor: Colors.black,
          onTap: widget.isItemSelected
              ? () {
                  FocusScope.of(context).unfocus();
                  onTextFieldTap();
                }
              : null,
          decoration: InputDecoration(
            filled: true,
            fillColor: Colors.black12,
            contentPadding:
                const EdgeInsets.only(left: 8, bottom: 0, top: 0, right: 15),
            hintText: widget.hint,
            border: const OutlineInputBorder(
              borderSide: BorderSide(
                width: 0,
                style: BorderStyle.solid,
              ),
              borderRadius: BorderRadius.all(
                Radius.circular(8.0),
              ),
            ),
          ),
        ),
        const SizedBox(
          height: 15.0,
        ),
      ],
    );
  }
}
