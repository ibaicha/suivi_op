import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';

import '../../../../../../core/data/model/ObjectBox/objectBoxModels.dart';
import '../../../../../../core/data/repository/repositories.dart';
import '../../../../../../core/res/constants.dart';

part 'exploitation_event.dart';
part 'exploitation_state.dart';

class ExploitationBloc extends Bloc<ExploitationEvent, ExploitationState> {
  final ExploitationRepository exploitationRepository;

  ExploitationBloc(
    this.exploitationRepository,
  ) : super(ExploitationInitialState()) {
    on<LoadExploitationEvent>(_ExploitationEvent);
  }

  void _ExploitationEvent(
    LoadExploitationEvent event,
    Emitter<ExploitationState> emitter,
  ) async {
    if (event is LoadExploitationEvent) {
      emitter(ExploitationLoadingState());
      // await Future.delayed(const Duration(milliseconds: 500));
      List<MxExploitationObject>? apiResult =
          await exploitationRepository.getExploitationsBox(
              event.compte,
              event.listStringVarieteId,
              event.listStringAnneeId,
              event.listStringSaisonId,
              event.opId,
              event.listStringProducteurId);
      if (apiResult == null) {
        emitter(ExploitationErrorState());
      } else {
        emitter(ExploitationLoadedState(
            apiResult: apiResult,
            compte: event.compte,
            listStringVarieteId: event.listStringVarieteId,
            listStringAnneeId: event.listStringAnneeId,
            listStringSaisonId: event.listStringSaisonId,
            opId: event.opId,
            listStringProducteurId: event.listStringProducteurId));
      }
    }
  }

}
