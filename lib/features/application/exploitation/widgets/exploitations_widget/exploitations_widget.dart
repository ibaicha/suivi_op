//import 'package:empty_widget/empty_widget.dart';
import 'package:flutter/services.dart';
import 'package:intl/intl.dart';

import 'dart:async';
import 'dart:ffi';
// import 'dart:html';
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:getwidget/getwidget.dart';

import 'package:dropdown_pro/dropdown.dart';
import 'package:dropdown_pro/dropdown_item.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
//import 'package:ges_op/ui/exploitation_charge_exploitation/widgets/ece_idExploitation/bloc/ece_id_exploitation_bloc.dart';
import 'package:get/get.dart';
import 'package:getwidget/components/accordion/gf_accordion.dart';
//import 'package:model_flutter/features/application/producteur/widgets/producteurs_widget/bloc/producteur_bloc.dart';

import '../../../../../core/data/model/ObjectBox/objectBoxModels.dart';
import '../../../../../core/data/service/ObjectBoxHelper.dart';
import '../../../../../core/res/constants.dart';
import '../../../../../objectbox.g.dart';
//import '../../../exploitation_charge_exploitation/widgets/ece_idExploitation/bloc/ece_id_exploitation_event.dart';
//import '../../../exploitation_charge_exploitation/widgets/ece_idExploitation/bloc/ece_id_exploitation_state.dart';

import '../../../exploitation_charge_exploitation/widgets/ece_idExploitation/bloc/ece_by_exploitation_bloc.dart';
import '../../../exploitation_charge_exploitation/widgets/ece_idProduitIdTypeChargeIdExploitation/bloc/ece_id_produit_id_type_charge_id_exploitation_bloc.dart';
import '../../../producteur/widgets/producteurs_widget/bloc/producteur_bloc.dart';
import '../../../type_charge_exploitation/widgets/type_charge_exploitations_idproduit/bloc/type_charge_exploitations_idproduit_bloc.dart';
//import '../details_exploitation_widget/exploitation_lignes_widget.dart';
import 'bloc/exploitation_bloc.dart';

class ExploitationsWidget extends StatefulWidget {
  const ExploitationsWidget({super.key});

  @override
  State<ExploitationsWidget> createState() => _ExploitationsWidgetState();
}

class _ExploitationsWidgetState extends State<ExploitationsWidget> {
  late ExploitationBloc blocExploitation;
  late TypeChargeExploitationsIdproduitBloc
      blocTypeChargeExploitationsIdproduit;
  //late EceIdExploitationBloc blocEceIdExploitation;
  late EceByExploitationBloc blocEceByExploitation;

  late List<String> _mutiSelectedVarietesIds = [];
  late List<String> _mutiSelectedSaisonsIds = [];
  late List<String> _mutiSelectedAnneesIds = [];
  late List<String> _mutiSelectedProducteursIds = [];

  var mesEmballages = [];
  bool _isDropdownEmballageEnabled = false;

  String pagination = '(${Constants.num_page}/${Constants.nb_page})';

  String _singleSelectedOpId = "";

  late final bool allowDecimal;

  // late Map<String, dynamic> _singleSelectedMapVarieteId = {};

  var _singleSelectedMapVarieteId = new Map();
  var _singleSelectedMapVarieteName = new Map();

  var _singleSelectedMapSaisonId = new Map();
  var _singleSelectedMapSaisonName = new Map();

  var _singleSelectedMapAnneeId = new Map();
  var _singleSelectedMapAnneeName = new Map();

  var _singleSelectedMapEmballageId = new Map();
  var _singleSelectedMapEmballageName = new Map();

  late int _OpId = 0;

  late int idProduit = 0;

  late int idTypeChargeExploitation = 0;

  late int idExploitation = 0;

  // final _filtterController = TextEditingController();
  final _compte = TextEditingController();
  final _pagination = TextEditingController();

  final Map<int, TextEditingController> _mapSurfaceControlleur = {};
  Map<int, TextEditingController> mapSurfaceControlleur = {};

  final int _currentSortColumn = 0;
  final bool _isAscending = true;

  String? _sortColumnCompte;
  bool _sortAscendingCompte = true;

  int tappedIndex = 0;
  var _tappedIndex = new Map();

  @override
  void initState() {
    super.initState();

    _OpId = Constants.idOp;
    _singleSelectedOpId = Constants.idOp.toString();
    //_compte = _filtterController.text.toString();

    pagination = '(${Constants.num_page}/${Constants.nb_page})';

    _pagination.text = '(${Constants.num_page}/${Constants.nb_page})';

    final mxcampagnesBox = ObjectBox.mxcampagnesBox;

    MxCampagneObject? valueCampagne =
        mxcampagnesBox!.query().build().findFirst();

    Constants.campagneObject = valueCampagne!;

    _mutiSelectedAnneesIds
        .add(Constants.campagneObject.mxanneeObject.target!.id.toString());
    _mutiSelectedSaisonsIds
        .add(Constants.campagneObject.mxsaisonObject.target!.id.toString());

/*
    blocExploitation = context.read<ExploitationBloc>();
    blocExploitation.add(LoadExploitationEvent(
        compte: _compte.text.trim().toString(),
        listStringVarieteId: _mutiSelectedVarietesIds,
        listStringAnneeId: _mutiSelectedAnneesIds,
        listStringSaisonId: _mutiSelectedSaisonsIds,
        opId: int.parse(_singleSelectedOpId),
        listStringProducteurId: _mutiSelectedProducteursIds));
*/
    _generateFiltersUpdate();

    blocTypeChargeExploitationsIdproduit =
        context.read<TypeChargeExploitationsIdproduitBloc>();
    blocEceByExploitation = context.read<EceByExploitationBloc>();
  }

  _generateFiltersUpdate() async {
    /*
    BlocProvider.of<ExploitationBloc>(context).add(LoadExploitationEvent(
        compte: _compte.text.trim().toString(),
        listStringVarieteId: _mutiSelectedVarietesIds,
        listStringAnneeId: _mutiSelectedAnneesIds,
        listStringSaisonId: _mutiSelectedSaisonsIds,
        opId: int.parse(_singleSelectedOpId),
        listStringProducteurId: _mutiSelectedProducteursIds));
    */

    blocExploitation = context.read<ExploitationBloc>();
    blocExploitation.add(LoadExploitationEvent(
        compte: _compte.text.trim().toString(),
        listStringVarieteId: _mutiSelectedVarietesIds,
        listStringAnneeId: _mutiSelectedAnneesIds,
        listStringSaisonId: _mutiSelectedSaisonsIds,
        opId: int.parse(_singleSelectedOpId),
        listStringProducteurId: _mutiSelectedProducteursIds));
/*
    print('compte: ' + _compte.text.trim().toString());
    print('listStringVarieteId: ' + _mutiSelectedVarietesIds.toString());
    print('listStringAnneeId: ' + _mutiSelectedAnneesIds.toString());
    print('listStringSaisonId: ' + _mutiSelectedSaisonsIds.toString());
    print('opId: ' + _singleSelectedOpId.toString());
    print('listStringProducteurId: ' + _mutiSelectedProducteursIds.toString());
*/
  }

  List<DataColumn> _createMontantColumns() {
    return [
      const DataColumn(
        label: Text('Désignation'),
        numeric: false,
      ),
      const DataColumn(
        label: Text('Somme'),
        numeric: true,
      ),
    ];
  }

  DataRow _createMontantRow(Montant montant) {
    return DataRow(
      // index: item.id, // for DataRow.byIndex
      key: ValueKey(montant.name),

      color: MaterialStateColor.resolveWith((Set<MaterialState> states) =>
          states.contains(MaterialState.selected) ? Colors.red : Colors.white),
      cells: [
        DataCell(Text(montant.name)),
        DataCell(Text(montant.somme.toString())),
      ],
    );
  }

  Widget loaderMontantTable(BuildContext context, List<Montant> montants) {
    return SizedBox(
      width: MediaQuery.of(context).size.width * 0.88,
      child: SingleChildScrollView(
        child: DataTable(
          sortColumnIndex: _currentSortColumn,
          sortAscending: _isAscending,
          columnSpacing: 0,
          dividerThickness: 5,
          decoration: BoxDecoration(
            border: Border.all(color: Colors.purple, width: 5),
            color: const Color.fromRGBO(237, 239, 245, 1),
            borderRadius: const BorderRadius.all(Radius.circular(8)),
          ),
          dataRowColor: MaterialStateColor.resolveWith(
              (Set<MaterialState> states) =>
                  states.contains(MaterialState.selected)
                      ? Colors.blue
                      : const Color.fromARGB(100, 215, 217, 219)),
          dataRowHeight: 35,
          dataTextStyle:
              const TextStyle(fontStyle: FontStyle.italic, color: Colors.black),
          headingRowColor: MaterialStateColor.resolveWith(
              (states) => const Color.fromARGB(100, 215, 217, 219)),
          headingRowHeight: 35,
          headingTextStyle:
              const TextStyle(fontWeight: FontWeight.bold, color: Colors.black),
          horizontalMargin: 10,
          showBottomBorder: true,
          showCheckboxColumn: false,
          columns: _createMontantColumns(),
          rows: montants.map((montant) => _createMontantRow(montant)).toList(),
        ),
      ),
    );
  }

  List<DataColumn> _createCompteLocaleColumns() {
    return [
      const DataColumn(
        label: Text('Id'),
        numeric: false,
      ),
      const DataColumn(
        label: Text('An. | Sai.'),
        numeric: false,
      ),
      const DataColumn(
        label: Text('Variété'),
        numeric: false,
      ),
      const DataColumn(
        label: Text('Surf.(Ha)'),
        numeric: true,
      ),
      const DataColumn(
        label: Text('Action'),
        numeric: true,
      ),
    ];
  }

  DataRow _createCompteLocaleRow(CompteLocale compte) {
    return DataRow(
      // index: item.id, // for DataRow.byIndex
      key: ValueKey(compte.id),

      color: MaterialStateColor.resolveWith((Set<MaterialState> states) =>
          states.contains(MaterialState.selected)
              ? Colors.amber
              : Colors.white),
      cells: [
        DataCell(Text(compte.id.toString())),
        DataCell(Text(compte.annee_saison)),
        DataCell(Text(compte.variete)),
        DataCell(Text(compte.surface.toString())),
        DataCell(IconButton(
            icon: Icon(Icons.open_in_browser_outlined),
            //iconSize: 25,
            color: Colors.green,
            onPressed: () {
              //print('Bouton de la première ligne pressé : ${compte.id}');

              Constants.exploitationObject.exploitation_id = compte.id;
              final mxexploitationsBox = ObjectBox.mxexploitationBox;
              MxExploitationObject? value = mxexploitationsBox!
                  .query(MxExploitationObject_.id.equals(compte.id))
                  .build()
                  .findFirst();

              Constants.exploitationObject.unite = value!.unite;
              Constants.exploitationObject.producteurid =
                  value.mxproducteurObject.target!.id;
              Constants.exploitationObject.prenom =
                  value.mxproducteurObject.target!.prenom;
              Constants.exploitationObject.nom =
                  value.mxproducteurObject.target!.nom;
              Constants.exploitationObject.opid = value.mxopObject.target!.id;
              Constants.exploitationObject.opname =
                  value.mxopObject.target!.name;
              /*
              Constants.exploitationObject.typeopid =
                  value.mxopObject.target!.mxTypeOpObject.target!.id;
              Constants.exploitationObject.typeopname =
                  value.mxopObject.target!.mxTypeOpObject.target!.name;
              */
              Constants.exploitationObject.exploitation_id = value.id;
              Constants.exploitationObject.compte = value.compte;
              Constants.exploitationObject.date = value.date;
              Constants.exploitationObject.surface = value.surface;
              /*
              Constants.exploitationObject.production = value.production;
              Constants.exploitationObject.pu = value.pu;
              */
              Constants.exploitationObject.filiereid = value.mxvarieteObject
                  .target!.mxProduitObject.target!.mxFiliereObject.target!.id;
              Constants.exploitationObject.filierename = value.mxvarieteObject
                  .target!.mxProduitObject.target!.mxFiliereObject.target!.name;
              Constants.exploitationObject.produitid =
                  value.mxvarieteObject.target!.mxProduitObject.target!.id;
              Constants.exploitationObject.produitname =
                  value.mxvarieteObject.target!.mxProduitObject.target!.name;
              Constants.exploitationObject.varieteid =
                  value.mxvarieteObject.target!.id;
              Constants.exploitationObject.varietename =
                  value.mxvarieteObject.target!.name;
              Constants.exploitationObject.saisonid =
                  value.mxsaisonObject.target!.id;
              Constants.exploitationObject.saisonname =
                  value.mxsaisonObject.target!.name;
              Constants.exploitationObject.anneeid =
                  value.mxanneeObject.target!.id;
              Constants.exploitationObject.anneename =
                  value.mxanneeObject.target!.name;
              print(Constants.exploitationObject.toJson());

              Navigator.of(context).pushReplacementNamed('/editExploitation');
            })),
      ],
      /*
      onSelectChanged: (value) {
        if(value == true){
          print('Bouton de la première ligne pressé : ${compte.id}');
        }
      },
      */
    );
  }

  Widget loaderCompteLocaleTable(
      BuildContext context, List<CompteLocale> comptes) {
    return SizedBox(
      width: MediaQuery.of(context).size.width * 0.96,
      child: SingleChildScrollView(
        child: DataTable(
          sortColumnIndex: _currentSortColumn,
          sortAscending: _isAscending,
          columnSpacing: 0,
          dividerThickness: 3,
          decoration: BoxDecoration(
            border: Border.all(color: Colors.greenAccent, width: 3),
            color: const Color.fromRGBO(237, 239, 245, 1),
            borderRadius: const BorderRadius.all(Radius.circular(8)),
          ),
          dataRowColor: MaterialStateColor.resolveWith(
              (Set<MaterialState> states) =>
                  states.contains(MaterialState.selected)
                      ? Colors.blue
                      : const Color.fromARGB(100, 215, 217, 219)),
          dataRowHeight: 35,
          dataTextStyle:
              const TextStyle(fontStyle: FontStyle.italic, color: Colors.black),
          headingRowColor: MaterialStateColor.resolveWith(
              (states) => const Color.fromARGB(100, 215, 217, 219)),
          headingRowHeight: 35,
          headingTextStyle:
              const TextStyle(fontWeight: FontWeight.bold, color: Colors.black),
          horizontalMargin: 10,
          showBottomBorder: true,
          showCheckboxColumn: false,
          columns: _createCompteLocaleColumns(),
          rows: comptes
              .map((CompteLocale) => _createCompteLocaleRow(CompteLocale))
              .toList(),
        ),
      ),
    );
  }

  List<DataColumn> _createCompteColumns() {
    return [
      const DataColumn(
        label: Text('Compte'),
        numeric: false,
      ),
      const DataColumn(
        label: Text('Saison'),
        numeric: false,
      ),
      const DataColumn(
        label: Text('Variété'),
        numeric: false,
      ),
      const DataColumn(
        label: Text('Surf.(Ha)'),
        numeric: true,
      ),
    ];
  }

  DataRow _createCompteRow(Compte compte) {
    return DataRow(
      // index: item.id, // for DataRow.byIndex
      key: ValueKey(compte.compte),

      color: MaterialStateColor.resolveWith((Set<MaterialState> states) =>
          states.contains(MaterialState.selected) ? Colors.red : Colors.white),
      cells: [
        DataCell(Text(compte.compte.toString())),
        DataCell(Text(compte.saison)),
        DataCell(Text(compte.variete)),
        DataCell(Text(compte.surface.toString())),
      ],
    );
  }

  Widget loaderCompteTable(BuildContext context, List<Compte> comptes) {
    return SizedBox(
      width: MediaQuery.of(context).size.width * 0.88,
      child: SingleChildScrollView(
        child: DataTable(
          sortColumnIndex: _currentSortColumn,
          sortAscending: _isAscending,
          columnSpacing: 0,
          dividerThickness: 3,
          decoration: BoxDecoration(
            border: Border.all(color: Colors.greenAccent, width: 3),
            color: const Color.fromRGBO(237, 239, 245, 1),
            borderRadius: const BorderRadius.all(Radius.circular(8)),
          ),
          /*
          border: const TableBorder(
            top: BorderSide(color: Colors.blue, width: 15),
            bottom: BorderSide(color: Colors.grey, width: 0.5),
            left: BorderSide(color: Colors.grey, width: 0.5),
            right: BorderSide(color: Colors.grey, width: 0.5),
            horizontalInside: BorderSide(color: Colors.grey, width: 0.5),
            verticalInside: BorderSide(color: Colors.grey, width: 0.5),
          ),
          */
          dataRowColor: MaterialStateColor.resolveWith(
              (Set<MaterialState> states) =>
                  states.contains(MaterialState.selected)
                      ? Colors.blue
                      : const Color.fromARGB(100, 215, 217, 219)),
          dataRowHeight: 35,
          dataTextStyle:
              const TextStyle(fontStyle: FontStyle.italic, color: Colors.black),
          headingRowColor: MaterialStateColor.resolveWith(
              (states) => const Color.fromARGB(100, 215, 217, 219)),
          headingRowHeight: 35,
          headingTextStyle:
              const TextStyle(fontWeight: FontWeight.bold, color: Colors.black),
          horizontalMargin: 10,
          showBottomBorder: true,
          showCheckboxColumn: false,
          columns: _createCompteColumns(),
          rows: comptes.map((compte) => _createCompteRow(compte)).toList(),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final double height = MediaQuery.of(context).size.height;
    //return Container();
    return itemsExploitation([]);

/*
    return BlocConsumer<Producteur_idOpBloc, Producteur_idOpState>(
        listener: (context, stateidOpProducteur) {},
        builder: (context, stateidOpProducteur) {
          if (stateidOpProducteur is Producteur_idOpInitialState) {
            print('xxxxx INITIAL PRODUCTEUR xxxxxxx');
            context.read<Producteur_idOpBloc>().add(
                LoadProducteur_idOpEvent(idOp: int.parse(_singleSelectedOpId)));
            return const CircularProgressIndicator();
          } else if (stateidOpProducteur is Producteur_idOpLoadingState) {
            print('xxxxx LODING PRODUCTEUR  xxxxxxx');
            return const Center(child: CircularProgressIndicator());
          } else if (stateidOpProducteur is Producteur_idOpLoadedState) {
            print('xxxxx LODAED PRODUCTEUR  xxxxxxx');
            List<MxProducteurObject> mesProducteurs =
                stateidOpProducteur.apiResult;
            for (var element in mesProducteurs) {
              print('element.name: ${element.prenom}');
            }

            // return itemsExploitation(mesProducteurs);
            return itemsExploitation([]);
          } else if (stateidOpProducteur is Producteur_idOpErrorState) {
            return const Center(
              child: Text("Uh oh! 😭 Something went wrong!"),
            );
          }
          return const Text("Error");
        });
        */
  }

  Widget loadingEmptyWidget(BuildContext context) {
    return Container();
    /*
    return EmptyWidget(
      image: null,
      packageImage: PackageImage.Image_2,
      title: 'PAS DE DONNEES',
      subTitle: 'No  Data available yet',
      titleTextStyle: TextStyle(
        fontSize: 22,
        color: Color.fromARGB(255, 31, 150, 47),
        fontWeight: FontWeight.w500,
      ),
      subtitleTextStyle: TextStyle(
        fontSize: 16,
        color: Color.fromARGB(255, 21, 226, 199),
      ),
    );
    */
  }

  Widget itemExploitation(ExploitationObject Model) {
    var value = Model;
    var exploitationId = value.exploitation_id;
    var compte = value.compte;
    var filiere = value.filierename;
    var produit = value.produitname;
    var variete = value.varietename;
    var surface = 'Surf.: ${value.surface} Ha';
    // var op = 'OP.: ${value.typeopname} ${value.opname}';
    // var producteur = 'Producteur: ${value.prenom} ${value.nom}';
    var producteur = '${value.prenom} ${value.nom}';
    var production = 'Prod.: ${value.production} ${value.unite}';
    var annee = 'Annee: ${value.anneename}';
    var saison = value.saisonname;
    var taux = 'Taux/Ha';
    var montantproduction = 1000 * value.production * value.pu;
    Constants.idExploitation = value.exploitation_id;

    List<Montant> montants = [];

    Montant myMontantDepense = Montant(
        name: 'Montant Dépenses',
        somme: ObjectBox.sumAllExploitationItems(exploitationId));
    Montant myMontantProduit =
        Montant(name: 'Montant Produits', somme: montantproduction);
    Montant myMontantRBE = Montant(name: 'R.B.E', somme: 0);

    montants.add(myMontantDepense);
    montants.add(myMontantProduit);
    montants.add(myMontantRBE);

    const headerStyle = TextStyle(
        color: Color(0xffffffff), fontSize: 15, fontWeight: FontWeight.bold);
    const contentStyleHeader = TextStyle(
        color: Color(0xff999999), fontSize: 14, fontWeight: FontWeight.w700);
    const contentStyle = TextStyle(
        color: Color(0xff999999), fontSize: 14, fontWeight: FontWeight.normal);
    final double width = MediaQuery.of(context).size.width * 0.98;
    return Column(
      children: [
        Expanded(
            child: InkWell(
          child: Card(
            key: ValueKey(value.id),
            shape: RoundedRectangleBorder(
              side: BorderSide(
                color: Colors.green.shade300,
              ),
              borderRadius: BorderRadius.circular(15.0),
            ),
            child: SizedBox(
              width: width,
              height: 650,
              child: Stack(
                children: [
                  Positioned(
                      child: Material(
                    child: Container(
                      height: 650,
                      //width: width,
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(0.0),
                        boxShadow: [
                          BoxShadow(
                              color: Colors.grey.withOpacity(0.3),
                              offset: const Offset(-10.0, 10.0),
                              blurRadius: 20.0,
                              spreadRadius: 4.0),
                          //BoxShadow
                        ],
                      ),
                    ),
                  )),
                  Positioned(
                    top: 20,
                    left: 20,
                    bottom: 20,
                    child: Table(
                      border: TableBorder.all(width: 1, color: Colors.black45),
                      columnWidths: {
                        0: FixedColumnWidth(width * 0.4), // fixed to 100 width
                        1: FixedColumnWidth(width * 0.5), //fixed to 100 width
                      }, //table border
                      children: [
                        TableRow(children: [
                          TableCell(
                            child: Padding(
                              padding: EdgeInsets.all(5),
                              child: Text(
                                'N°: ${(compte)}',
                                style: const TextStyle(
                                    fontSize: 14,
                                    color: Color(0xFF363f93),
                                    fontWeight: FontWeight.bold),
                              ),
                            ),
                          ),
                          TableCell(
                            child: Padding(
                              padding: EdgeInsets.all(5),
                              child: Text(
                                '${producteur}',
                                style: const TextStyle(
                                    fontSize: 14,
                                    color: Color(0xFF363f93),
                                    fontWeight: FontWeight.bold),
                              ),
                            ),
                          ),
                        ]),
                      ],
                    ),
                  ),
                  Positioned(
                    top: 50,
                    left: 20,
                    bottom: 20,
                    child: Table(
                      border: TableBorder.all(width: 0, color: Colors.black45),
                      columnWidths: {
                        0: FixedColumnWidth(width * 0.9), // fixed to 100 width
                      }, //table border
                      children: [
                        TableRow(children: [
                          TableCell(
                            child: Padding(
                              padding: EdgeInsets.all(5),
                              child: Text(
                                '$filiere | $produit | $variete',
                                style: const TextStyle(
                                  fontSize: 14,
                                  color: Colors.black,
                                  //fontWeight: FontWeight.bold
                                ),
                              ),
                            ),
                          ),
                        ]),
                        TableRow(children: [
                          TableCell(
                            child: Padding(
                              padding: EdgeInsets.all(5),
                              child: Text(
                                '$annee | $saison',
                                style: const TextStyle(
                                  fontSize: 14,
                                  color: Colors.black,
                                  //fontWeight: FontWeight.bold
                                ),
                              ),
                            ),
                          ),
                        ]),
                        TableRow(children: [
                          TableCell(
                            child: Padding(
                              padding: EdgeInsets.all(5),
                              child: Text(
                                '$surface | $production | $taux',
                                style: const TextStyle(
                                  fontSize: 14,
                                  color: Colors.black,
                                  //fontWeight: FontWeight.bold
                                ),
                              ),
                            ),
                          ),
                        ]),
                        TableRow(children: [
                          TableCell(
                            child: Padding(
                              padding: EdgeInsets.all(5),
                              child: Text(
                                'Dépense: ${ObjectBox.sumAllExploitationItems(exploitationId)}',
                                style: const TextStyle(
                                  fontSize: 14,
                                  color: Colors.black,
                                  //fontWeight: FontWeight.bold
                                ),
                              ),
                            ),
                          ),
                        ]),
                        TableRow(children: [
                          TableCell(
                            child: Padding(
                              padding: EdgeInsets.all(5),
                              child: Text(
                                'Produits: ${montantproduction}',
                                style: const TextStyle(
                                  fontSize: 14,
                                  color: Colors.black,
                                  //fontWeight: FontWeight.bold
                                ),
                              ),
                            ),
                          ),
                        ]),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
          onDoubleTap: () {
            Constants.exploitationObject.id = value.id;
            Constants.exploitationObject.compte = value.compte;
            Constants.exploitationObject.unite = value.unite;
            Constants.exploitationObject.surface_prevision =
                value.surface_prevision;
            Constants.exploitationObject.production_prevision =
                value.production_prevision;
            Constants.exploitationObject.pu_prevision = value.pu_prevision;
            Constants.exploitationObject.surface = value.surface;
            Constants.exploitationObject.production = value.production;
            Constants.exploitationObject.pu = value.pu;
            Constants.exploitationObject.anneeid = value.anneeid;
            Constants.exploitationObject.anneename = value.anneename;
            Constants.exploitationObject.saisonid = value.saisonid;
            Constants.exploitationObject.saisonname = value.saisonname;
            Constants.exploitationObject.varieteid = value.varieteid;
            Constants.exploitationObject.varietename = value.varietename;
            Constants.exploitationObject.produitid = value.produitid;
            Constants.exploitationObject.produitname = value.produitname;

            Get.toNamed('/editExploitationPage', arguments: {
              "AddOrUpdate": "UPDATE",
              "title": "Update Exploitation",
              "utilisateur": Constants.utilisateur,
              "exploitationObject": Constants.exploitationObject
            });
          },
        )),
      ],
    );
  }

  Widget itemsExploitation(List<MxOpObject> apiResult) {
    return BlocConsumer<ExploitationBloc, ExploitationState>(
      listener: (context, state) {},
      builder: (context, state) {
        if (state is ExploitationInitialState ||
            state is ExploitationLoadingState) {
          print('xxxxx INITIAL OR LOADING EXPLOITATION xxxxxxx ');
          _generateFiltersUpdate();
          return const CircularProgressIndicator();
        } else if (state is ExploitationLoadedState) {
          print('xxxxx LOADED EXPLOITATION xxxxxxx ' +
              _singleSelectedOpId.toString());

          List<MxExploitationObject> dataExploitation = state.apiResult;
          print('xxxxx LOADED EXPLOITATION BEFORE xxxxxxx ' +
              dataExploitation.length.toString());
          /*
          const headerStyle = TextStyle(
              color: Color(0xffffffff),
              fontSize: 15,
              fontWeight: FontWeight.bold);
          const contentStyleHeader = TextStyle(
              color: Color(0xff999999),
              fontSize: 14,
              fontWeight: FontWeight.w700);
          const contentStyle = TextStyle(
              color: Color(0xff999999),
              fontSize: 14,
              fontWeight: FontWeight.normal);

          final double height = MediaQuery.of(context).size.height;
          */
          print('xxxxx LOADED EXPLOITATION AFTER xxxxxxx ' +
              _OpId.toString() +
              ' - ' +
              dataExploitation.length.toString());
          List<Compte> retourTable = [];

          dataExploitation.forEach((element) {
            //print(element.toJson());
            Compte myItem = Compte(
                compte: element.compte,
                variete: '${element.variete['name']}',
                saison: '${element.saison['name']}',
                surface: element.surface);
            //print('${element.compte} - ${element.variete} - ${element.saison['name']} - ${element.surface} ');
            retourTable.add(myItem);
          });

          List<CompteLocale> retourTableLocale = [];

          dataExploitation.forEach((element) {
            CompteLocale myItem = CompteLocale(
                id: element.id,
                annee_saison:
                    '${element.mxanneeObject.target!.name} | ${element.mxsaisonObject.target!.name}',
                variete: element.mxvarieteObject.target!.name,
                surface: element.surface);

            retourTableLocale.add(myItem);
          });

          return Column(
            children: [
              Container(child: loadingFiltersWidget(context)),
              if (dataExploitation.length > 0)
                //loaderCompteLocaleTable(context, retourTableLocale),
                loaderExploitation(context, dataExploitation),
              if (dataExploitation.length == 0) loadingEmptyWidget(context),
              SizedBox(
                height: 12,
              ),
            ],
          );
        } else if (state is ExploitationErrorState) {
          return const Center(
            child: Text("Uh oh! 😭 Something went wrong!"),
          );
        }
        return const Text("Error");
      },
    );
  }

  Widget loaderExploitation(
      BuildContext context, List<MxExploitationObject> myDataExploitation) {
    return ListView.builder(
      itemCount: myDataExploitation.length,
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      itemBuilder: (context, index) {
        return Card(
          color: Colors.white,
          clipBehavior: Clip.antiAlias,
          child: Column(
            children: [
              ListTile(
                leading: CircleAvatar(
                  backgroundColor: const Color(0xff764abc),
                  child: Icon(Icons.account_circle),
                ),
                title: Text('N°: ${myDataExploitation[index].compte}',
                    style: TextStyle(
                      color: Colors.black.withOpacity(0.6),
                      fontSize: 20,
                    )),
                subtitle: Text(
                  'Date: ' +
                      DateFormat('dd/MM/yyyy')
                          .format(myDataExploitation[index].date),
                  style: TextStyle(
                      color: Colors.black.withOpacity(0.6), fontSize: 16),
                ),
                trailing: GestureDetector(
                    onTap: () {
                      print(myDataExploitation[index].id);
                      Constants.idExploitation = myDataExploitation[index].id;
                      Constants.exploitationObject.exploitation_id =
                          myDataExploitation[index].id;
                      Constants.exploitationObject.unite =
                          myDataExploitation[index].unite;
                      Constants.exploitationObject.compte =
                          myDataExploitation[index].compte;
                      Constants.exploitationObject.date =
                          myDataExploitation[index].date;
                      Constants.exploitationObject.surface =
                          myDataExploitation[index].surface;
                      Constants.exploitationObject.opid =
                          myDataExploitation[index].mxopObject.target!.id;
                      Constants.exploitationObject.opname =
                          myDataExploitation[index].mxopObject.target!.name;
                      Constants.exploitationObject.filiereid =
                          myDataExploitation[index]
                              .mxvarieteObject
                              .target!
                              .mxProduitObject
                              .target!
                              .mxFiliereObject
                              .target!
                              .id;

                      Constants.exploitationObject.filierename =
                          myDataExploitation[index]
                              .mxvarieteObject
                              .target!
                              .mxProduitObject
                              .target!
                              .mxFiliereObject
                              .target!
                              .name;

                      Constants.exploitationObject.produitid =
                          myDataExploitation[index]
                              .mxvarieteObject
                              .target!
                              .mxProduitObject
                              .target!
                              .id;

                      Constants.exploitationObject.produitname =
                          myDataExploitation[index]
                              .mxvarieteObject
                              .target!
                              .mxProduitObject
                              .target!
                              .name;

                      Constants.exploitationObject.varieteid =
                          myDataExploitation[index].mxvarieteObject.target!.id;

                      Constants.exploitationObject.varietename =
                          myDataExploitation[index]
                              .mxvarieteObject
                              .target!
                              .name;

                      // get Variete

                      final mxvarietesBox = ObjectBox.mxvarietesBox;
                      MxVarieteObject? valueVariete = mxvarietesBox!
                          .query(MxVarieteObject_.id
                              .equals(Constants.exploitationObject.varieteid))
                          .build()
                          .findFirst();
                      print(
                          'valueVariete: ' + valueVariete!.toJson().toString());

                      Constants.exploitationObject.varietepu =
                          valueVariete.pu_unite!;

                      Constants.exploitationObject.saisonid =
                          myDataExploitation[index].mxsaisonObject.target!.id;

                      Constants.exploitationObject.saisonname =
                          myDataExploitation[index].mxsaisonObject.target!.name;

                      Constants.exploitationObject.anneeid =
                          myDataExploitation[index].mxanneeObject.target!.id;

                      Constants.exploitationObject.anneename =
                          myDataExploitation[index].mxanneeObject.target!.name;

                      // get Emballage
                      final mxemballageBox = ObjectBox.mxemballagesBox;
                      MxEmballageObject? valueEmballage = mxemballageBox!
                          .query(MxEmballageObject_.mxProduitObject
                              .equals(myDataExploitation[index]
                                  .mxvarieteObject
                                  .target!
                                  .mxProduitObject
                                  .target!
                                  .id)
                              .and(MxEmballageObject_.isDefault.equals(true)))
                          .build()
                          .findFirst();
                      print('valueEmballage: ' +
                          valueEmballage!.toJson().toString());

                      Constants.exploitationObject.emballageid =
                          valueEmballage!.id;
                      Constants.exploitationObject.emballagename =
                          valueEmballage.name;

                      print('Constants.exploitationObject.emballagepu: ' +
                          Constants.exploitationObject.emballagepu.toString());
                      /*
                      final mxexploitationsBox = ObjectBox.mxexploitationBox;
                      MxExploitationObject? value = mxexploitationsBox!
                          .query(MxExploitationObject_.id
                              .equals(myDataExploitation[index].id))
                          .build()
                          .findFirst();

                      Constants.exploitationObject.unite = value!.unite;

                      Constants.exploitationObject.opid =
                          value.mxopObject.target!.id;
                      Constants.exploitationObject.opname =
                          value.mxopObject.target!.name;
                      Constants.exploitationObject.exploitation_id = value.id;
                      Constants.exploitationObject.compte = value.compte;
                      Constants.exploitationObject.date = value.date;
                      Constants.exploitationObject.surface = value.surface;
                      Constants.exploitationObject.filiereid = value
                          .mxvarieteObject
                          .target!
                          .mxProduitObject
                          .target!
                          .mxFiliereObject
                          .target!
                          .id;
                      Constants.exploitationObject.filierename = value
                          .mxvarieteObject
                          .target!
                          .mxProduitObject
                          .target!
                          .mxFiliereObject
                          .target!
                          .name;
                      Constants.exploitationObject.produitid = value
                          .mxvarieteObject.target!.mxProduitObject.target!.id;
                      Constants.exploitationObject.produitname = value
                          .mxvarieteObject.target!.mxProduitObject.target!.name;
                      Constants.exploitationObject.varieteid =
                          value.mxvarieteObject.target!.id;
                      Constants.exploitationObject.varietename =
                          value.mxvarieteObject.target!.name;
                      Constants.exploitationObject.saisonid =
                          value.mxsaisonObject.target!.id;
                      Constants.exploitationObject.saisonname =
                          value.mxsaisonObject.target!.name;
                      Constants.exploitationObject.anneeid =
                          value.mxanneeObject.target!.id;
                      Constants.exploitationObject.anneename =
                          value.mxanneeObject.target!.name;
                      //print(Constants.exploitationObject.toJson());
                      //print(myDataExploitation[index].toJson());

                      print(
                          'id: ${value.id} - ${myDataExploitation[index].id}');
                      print(
                          'Unite: ${value.unite} - ${myDataExploitation[index].unite}');
                      print(
                          'compte: ${value.compte} - ${myDataExploitation[index].compte}');
                      print(
                          'date: ${value.date} - ${myDataExploitation[index].date}');
                      print(
                          'surface: ${value.surface} - ${myDataExploitation[index].surface}');
                      print(
                          'op id: ${value.mxopObject.target!.id} - ${myDataExploitation[index].mxopObject.target!.id}');
                      print(
                          'op name: ${value.mxopObject.target!.name} - ${myDataExploitation[index].mxopObject.target!.name}');
                      print(
                          'filiere id: ${value.mxvarieteObject.target!.mxProduitObject.target!.mxFiliereObject.target!.id} - ${myDataExploitation[index].mxvarieteObject.target!.mxProduitObject.target!.mxFiliereObject.target!.id}');
                      print(
                          'filiere name: ${value.mxvarieteObject.target!.mxProduitObject.target!.mxFiliereObject.target!.name} - ${myDataExploitation[index].mxvarieteObject.target!.mxProduitObject.target!.mxFiliereObject.target!.name}');
                      print(
                          'produit id: ${value.mxvarieteObject.target!.mxProduitObject.target!.id} - ${myDataExploitation[index].mxvarieteObject.target!.mxProduitObject.target!.id}');
                      print(
                          'produit name: ${value.mxvarieteObject.target!.mxProduitObject.target!.name} - ${myDataExploitation[index].mxvarieteObject.target!.mxProduitObject.target!.name}');
                      print(
                          'variete id: ${value.mxvarieteObject.target!.id} - ${myDataExploitation[index].mxvarieteObject.target!.id}');
                      print(
                          'variete name: ${value.mxvarieteObject.target!.name} - ${myDataExploitation[index].mxvarieteObject.target!.name}');
                      print(
                          'saison id: ${value.mxsaisonObject.target!.id} - ${myDataExploitation[index].mxsaisonObject.target!.id}');
                      print(
                          'saison name: ${value.mxsaisonObject.target!.name} - ${myDataExploitation[index].mxsaisonObject.target!.name}');
                      print(
                          'annee id: ${value.mxanneeObject.target!.id} - ${myDataExploitation[index].mxanneeObject.target!.id}');
                      print(
                          'annee name: ${value.mxanneeObject.target!.name} - ${myDataExploitation[index].mxanneeObject.target!.name}');
                      */
                      Navigator.of(context)
                          .pushReplacementNamed('/editExploitation');
                    },
                    child: Icon(Icons.chevron_right)),
              ),
              const Divider(
                color: Colors.blue,
                height: 25,
                thickness: 2,
                indent: 5,
                endIndent: 5,
              ),
              Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(children: [
                  Row(children: [
                    Text(
                        'Campagne: ${myDataExploitation[index].mxanneeObject.target!.name} | ${myDataExploitation[index].mxsaisonObject.target!.name}',
                        style: TextStyle(
                          color: Colors.black.withOpacity(0.6),
                          fontSize: 18,
                        )),
                  ]),
                  Row(children: [
                    Text(
                        'Spéculation: ${myDataExploitation[index].mxvarieteObject.target!.mxProduitObject.target!.name} | ${myDataExploitation[index].mxvarieteObject.target!.name}',
                        style: TextStyle(
                          color: Colors.black.withOpacity(0.6),
                          fontSize: 18,
                        )),
                  ]),
                  Row(children: [
                    Text(
                        'Surface: ${myDataExploitation[index].surface} ${myDataExploitation[index].unite}',
                        style: TextStyle(
                          color: Colors.black.withOpacity(0.6),
                          fontSize: 18,
                        )),
                  ])
                ]),
              ),
            ],
          ),
        );
      },
    );
  }

  Widget loadingFiltersWidget(BuildContext context) {
    final double height = MediaQuery.of(context).size.height;
    return Column(
      children: [
        Container(
          child: GFAccordion(
              title: 'FILTRAGE ${_pagination.text.toString()}',
              collapsedTitleBackgroundColor: Colors.cyan,
              contentChild: Container(
                  child: Column(
                children: [
                  loadingCompteWidget(context),
                  SizedBox(
                    height: height * 0.02,
                  ),
                  loadingFiltersOpsWidget(context),
                  SizedBox(
                    height: height * 0.02,
                  ),
                  /*
                  loadingFiltersProducteursWidget(context),
                  SizedBox(
                    height: height * 0.02,
                  ),
                  */
                  loadingFiltersVarietesWidget(context),
                  SizedBox(
                    height: height * 0.02,
                  ),
                  /*
                  loadingFilterFiliereWidget(context),
                  SizedBox(
                    height: height * 0.02,
                  ),
                  */
                  loadingFiltersAnneesWidget(context),
                  SizedBox(
                    height: height * 0.02,
                  ),
                  loadingFiltersSaisonsWidget(context),
                ],
              )),
              collapsedIcon: const Icon(Icons.add),
              expandedIcon: const Icon(Icons.minimize)),
        ),
        SizedBox(
          height: height * 0.005,
        ),
      ],
    );
  }

  Widget loadingCompteWidget(BuildContext context) {
    final double height = MediaQuery.of(context).size.height;

    print('_compte: ' + _compte.text.trim().toString());
    return Container(
      child: TextField(
        controller: _compte,
        onSubmitted: (value) {
          print('value: ' + value);
          _generateFiltersUpdate();
        },
        decoration: const InputDecoration(
            labelText: 'Search', suffixIcon: Icon(Icons.search)),
      ),
    );
  }

  Widget loadingFiltersAnneesWidget(BuildContext context) {
    final double height = MediaQuery.of(context).size.height;
    List<DropdownItem> _itemAnneesList = [];

    String _singleSelectedMapAnneeId = "";

    //return BlocBuilder<AllAnneesBloc, AllAnneesState>(
    //builder: (context, anneeState) {
    List<DropdownItem> list = [];

    final mxanneesBox = ObjectBox.mxanneesBox;
    var mesAnnees = mxanneesBox?.getAll();
    mesAnnees?.forEach((element) {
      list.add(DropdownItem(
          id: element.id.toString(),
          value: element.name.toString(),
          data: MxAnneeObject(
            id: element.id,
            valeur: element.valeur,
            name: element.name,
          )));
    });

    _itemAnneesList = list;
    return Column(
      children: [
        Dropdown.multiSelection(
            title: "CHOISIR ANNEES",
            labelText: "ANNEES",
            //hintText: "Selection annees",
            list: _itemAnneesList,
            selectedIds: _mutiSelectedAnneesIds,
            isAllSelection: true,
            onMultipleItemListener: (selectedItemList) {
              for (DropdownItem selectedItem in selectedItemList) {
                String itemId = selectedItem.id;
                String itemName = selectedItem.value;
                MxAnneeObject mxanneeObject =
                    selectedItem.data as MxAnneeObject;
                print("Item Id: $itemId -- Item Name: $itemName }");
              }

              if (selectedItemList.length > 0) {
                MxAnneeObject mxanneeObject =
                    selectedItemList.first.data as MxAnneeObject;
                print('----- selectedItemList id ---- ${mxanneeObject.id}');
                print('----- selectedItemList name ---- ${mxanneeObject.name}');

                Constants.singleSelectedAnneeId_ = mxanneeObject.id.toString();
                Constants.singleSelectedAnneeName_ = mxanneeObject.name;
              }

              Constants.listStringAnneeId = _mutiSelectedAnneesIds;
              //_listStringAnneeId = _mutiSelectedAnneesIds;
              _generateFiltersUpdate();
              // _onLoginButtonPressed();
            }),
        /*
          Dropdown.singleSelection(
              title: "Single Selection Dropdown",
              labelText: "Single",
              hintText: "Single Selection",
              list: _itemAnneesList,
              selectedId: _singleSelectedMapAnneeId,
              onSingleItemListener: (selectedItem) {
                setState(() {
                  _singleSelectedMapAnneeId = selectedItem.id;
                });
                String itemId = selectedItem.id;
                String itemName = selectedItem.value;
                MxAnneeObject mxanneeObject = selectedItem.data as MxAnneeObject;
                print("Item Id: $itemId -- Item Name: $itemName }");
              }),
              */
      ],
    );
    // });
  }

  Widget loadingFiltersSaisonsWidget(BuildContext context) {
    final double height = MediaQuery.of(context).size.height;
    List<DropdownItem> _itemSaisonsList = [];

    String _singleSelectedMapSaisonId = "";

    //return BlocBuilder<AllSaisonsBloc, AllSaisonsState>(
    //builder: (context, saisonState) {
    List<DropdownItem> list = [];

    final mxsaisonsBox = ObjectBox.mxsaisonsBox;
    var mesSaisons = mxsaisonsBox?.getAll();
    mesSaisons?.forEach((element) {
      list.add(DropdownItem(
          id: element.id.toString(),
          value: element.name.toString(),
          data: MxSaisonObject(
            id: element.id,
            name: element.name,
            description: element.description,
          )));
    });

    _itemSaisonsList = list;
    return Column(
      children: [
        Dropdown.multiSelection(
            title: "CHOISIR SAISONS",
            labelText: "SAISONS",
            //hintText: "Selection saisons",
            list: _itemSaisonsList,
            selectedIds: _mutiSelectedSaisonsIds,
            isAllSelection: true,
            onMultipleItemListener: (selectedItemList) {
              for (DropdownItem selectedItem in selectedItemList) {
                String itemId = selectedItem.id;
                String itemName = selectedItem.value;
                MxSaisonObject mxsaisonObject =
                    selectedItem.data as MxSaisonObject;
                print("Item Id: $itemId -- Item Name: $itemName }");
              }
              if (selectedItemList.length > 0) {
                MxSaisonObject mxsaisonObject =
                    selectedItemList.first.data as MxSaisonObject;
                print('----- selectedItemList id ---- ${mxsaisonObject.id}');
                print(
                    '----- selectedItemList name ---- ${mxsaisonObject.description}');

                Constants.singleSelectedSaisonId_ =
                    mxsaisonObject.id.toString();
                Constants.singleSelectedSaisonName_ =
                    mxsaisonObject.description;
              }

              Constants.listStringSaisonId = _mutiSelectedSaisonsIds;
              //_listStringSaisonId = _mutiSelectedSaisonsIds;
              _generateFiltersUpdate();
              // _onLoginButtonPressed();
            }),
        /*
          Dropdown.singleSelection(
              title: "Single Selection Dropdown",
              labelText: "Single",
              hintText: "Single Selection",
              list: _itemSaisonsList,
              selectedId: _singleSelectedMapSaisonId,
              onSingleItemListener: (selectedItem) {
                setState(() {
                  _singleSelectedMapSaisonId = selectedItem.id;
                });
                String itemId = selectedItem.id;
                String itemName = selectedItem.value;
                SaisonObject saisonObject = selectedItem.data as SaisonObject;
                print("Item Id: $itemId -- Item Name: $itemName }");
              }),
              */
      ],
    );
    // });
  }

  Widget loadingFiltersVarietesWidget(BuildContext context) {
    final double height = MediaQuery.of(context).size.height;
    List<DropdownItem> itemVarietesList = [];

    String singleSelectedVarieteId = "";

    //return BlocBuilder<AllVarietesBloc, AllVarietesState>(
    //builder: (context, stateVariete) {
    List<DropdownItem> list = [];

    //var mesVarietes = stateVariete.varietes;

    //for (var element in mesVarietes) {
    //print('element.name: ${element.name}');
    final mxvarietesBox = ObjectBox.mxvarietesBox;
    var mesVarietes = mxvarietesBox?.getAll();
    mesVarietes?.forEach((element) {
      list.add(DropdownItem(
          id: element.id.toString(),
          //value:'${element.produitname.toString().toUpperCase()} | ${element.name.toString().toUpperCase()}',
          value:
              '${element.mxProduitObject.target!.name.toString().toUpperCase()} | ${element.name.toString().toUpperCase()}',
          data: MxVarieteObject(
              id: element.id,
              name: element.name,
              surface_unite: element.surface_unite,
              quantite_unite: element.quantite_unite,
              pu_unite: element.pu_unite,
              rendement_unite: element.rendement_unite,
              isActive: element.isActive)));
    });

    itemVarietesList = list;
    // print('itemVarietesList: ${itemVarietesList.toString()}');

    return Column(
      children: [
        Dropdown.multiSelection(
            title: "CHOISIR VARIETES",
            labelText: "VARIETES",
            //hintText: "Selection varietes",
            list: itemVarietesList,
            selectedIds: _mutiSelectedVarietesIds,
            isAllSelection: true,
            onMultipleItemListener: (selectedItemList) {
              for (DropdownItem selectedItem in selectedItemList) {
                String itemId = selectedItem.id;
                String itemName = selectedItem.value;
                MxVarieteObject mxvarieteObject =
                    selectedItem.data as MxVarieteObject;
                //print("Item Id: $itemId -- Item Name: $itemName }");
              }

              if (selectedItemList.length > 0) {
                setState(() {
                  MxVarieteObject varieteObject =
                      selectedItemList.first.data as MxVarieteObject;
                  print('----- selectedItemList id ---- ${varieteObject.id}');
                  print(
                      '----- selectedItemList name ---- ${varieteObject.name}');

                  Constants.singleSelectedVarieteId_ =
                      varieteObject.id.toString();
                  Constants.singleSelectedVarieteName_ = varieteObject.name;
                });

/*
                  final mxemballageBox = ObjectBox.mxemballagesBox;
                  MxEmballageObject monEmballage;
                  Query<MxEmballageObject> query = mxemballageBox!
                      .query(MxEmballageObject_.produitid
                          .equals(varieteObject.produitid))
                      .build();
                  monEmballage = query.find()[0];
                  query.close();

                            _singleSelectedMapEmballageId[val] =
                                Constants.singleSelectedEmballageId_;
                            _singleSelectedMapEmballageName[val] =
                                Constants.singleSelectedEmballageName_;

*/
              }

              Constants.listStringVarieteId = _mutiSelectedVarietesIds;
              //_listStringVarieteId = _mutiSelectedVarietesIds;

              _generateFiltersUpdate();
/*
                for (int i = 0; i < _mutiSelectedVarietesIds.length; i++) {
                  print('-----${_mutiSelectedVarietesIds[i].toString()} ----');
                }
                */
            }),
      ],
    );
    // });
  }

  Widget loadingFilterAnneeWidget(BuildContext context, int id) {
    final double height = MediaQuery.of(context).size.height;
    List<DropdownItem> _itemAnneesList = [];

    //return BlocBuilder<AllAnneesBloc, AllAnneesState>(
    //builder: (context, anneeState) {

    List<DropdownItem> list = [];
    final mxanneesBox = ObjectBox.mxanneesBox;
    var mesAnnees = mxanneesBox?.getAll();
    mesAnnees?.forEach((element) {
      list.add(DropdownItem(
          id: element.id.toString(),
          value: element.name.toString(),
          data: MxAnneeObject(
            id: element.id,
            name: element.name,
            valeur: element.valeur,
          )));
    });

    _itemAnneesList = list;
    return Column(
      children: [
        Dropdown.singleSelection(
            title: "CHOISIR ANNEE",
            labelText: "ANNEE",
            //hintText: "Annee",
            list: _itemAnneesList,
            border: OutlineInputBorder(borderRadius: BorderRadius.circular(20)),
            selectedId: _singleSelectedMapAnneeId[id] ?? "",
            onSingleItemListener: (selectedItem) {
              //setState(() {
              _singleSelectedMapAnneeId[id] = selectedItem.id;
              MxAnneeObject mxanneeObject = selectedItem.data as MxAnneeObject;
              _singleSelectedMapAnneeName[id] = mxanneeObject.name;
              //});
              String itemId = selectedItem.id;
              String itemName = selectedItem.value;
              // MxAnneeObject mxanneeObject = selectedItem.data as MxAnneeObject;
              // print("Item Id: $itemId -- Item Name: $itemName }");

              Constants.singleSelectedAnneeId_ = mxanneeObject.id.toString();
              Constants.singleSelectedAnneeName_ = mxanneeObject.name;

              setState(() {});
            }),
      ],
    );

    //});
  }

  Widget loadingFilterSaisonWidget(BuildContext context, int id) {
    final double height = MediaQuery.of(context).size.height;
    List<DropdownItem> _itemSaisonsList = [];
    //return BlocBuilder<AllSaisonsBloc, AllSaisonsState>(
    //builder: (context, saisonState) {
    List<DropdownItem> list = [];
    final mxsaisonsBox = ObjectBox.mxsaisonsBox;
    var mesSaisons = mxsaisonsBox?.getAll();
    mesSaisons?.forEach((element) {
      list.add(DropdownItem(
          id: element.id.toString(),
          value: element.description.toString() + ' ( ${element.name} )',
          data: MxSaisonObject(
            id: element.id,
            name: element.name,
            description: element.description,
          )));
    });
    _itemSaisonsList = list;
    return Column(
      children: [
        Dropdown.singleSelection(
            title: "CHOISIR SAISON",
            labelText: "SAISON",
            //hintText: "Saison",
            list: _itemSaisonsList,
            border: OutlineInputBorder(borderRadius: BorderRadius.circular(20)),
            selectedId: _singleSelectedMapSaisonId[id] ?? "",
            onSingleItemListener: (selectedItem) {
              //setState(() {
              _singleSelectedMapSaisonId[id] = selectedItem.id;
              MxSaisonObject saisonObject = selectedItem.data as MxSaisonObject;
              _singleSelectedMapSaisonName[id] = saisonObject.description;
              //});
              String itemId = selectedItem.id;
              String itemName = selectedItem.value;
              // SaisonObject saisonObject = selectedItem.data as SaisonObject;
              // print("Item Id: $itemId -- Item Name: $itemName }");

              Constants.singleSelectedSaisonId_ = saisonObject.id.toString();
              Constants.singleSelectedSaisonName_ = saisonObject.name;

              setState(() {});
            }),
      ],
    );
    //});
  }

  Widget loadingFilterVarieteWidget(BuildContext context, int id) {
    final double height = MediaQuery.of(context).size.height;
    List<DropdownItem> itemVarietesList = [];
    //return BlocBuilder<AllVarietesBloc, AllVarietesState>(
    // builder: (context, stateVariete) {
    List<DropdownItem> list = [];
    //var mesVarietes = stateVariete.varietes;
    //for (var element in mesVarietes) {
    final mxvarieteBox = ObjectBox.mxvarietesBox;
    var mesVarietes = mxvarieteBox?.getAll();
    mesVarietes?.forEach((element) {
      list.add(DropdownItem(
          id: element.id.toString(),
          value:
              '${element.mxProduitObject.target!.name.toString().toUpperCase()} | ${element.name.toString().toUpperCase()}',
          data: MxVarieteObject(
            id: element.id,
            name: element.name,
            surface_unite: element.surface_unite,
            quantite_unite: element.quantite_unite,
            pu_unite: element.pu_unite,
            rendement_unite: element.rendement_unite,
            isActive: element.isActive,
          )));
    });
    itemVarietesList = list;
    // print('itemVarietesList: ${itemVarietesList.toString()}');

    return Column(
      children: [
        Dropdown.singleSelection(
            title: "CHOISIR VARIETE",
            labelText: "VARIETE",
            //hintText: "Variete",
            list: itemVarietesList,
            border: OutlineInputBorder(borderRadius: BorderRadius.circular(20)),
            selectedId: _singleSelectedMapVarieteId[id] ?? "",
            onSingleItemListener: (selectedItem) async {
              //setState(() {
              _singleSelectedMapVarieteId[id] = selectedItem.id;
              MxVarieteObject myVar = selectedItem.data as MxVarieteObject;

              Query<MxVarieteObject> varieteQuery = mxvarieteBox!
                  .query(MxVarieteObject_.id.equals(myVar.id))
                  .build();

              MxVarieteObject? maVariete = varieteQuery.findFirst();

              _singleSelectedMapVarieteName[id] = myVar.name;
              //});
              String itemId = selectedItem.id;
              String itemName = selectedItem.value;

              int itemIdProduit = maVariete!.mxProduitObject.target!.id;
              Constants.idProduit = maVariete!.mxProduitObject.target!.id;
              String itemNameProduit = maVariete!.mxProduitObject.target!.name;

              Constants.singleSelectedVarieteId_ = myVar.id.toString();
              Constants.singleSelectedVarieteName_ = myVar.name;
              print(
                  "Item Id xxxxxxxxxxxxxxxxx : $itemId -- Item Name: $itemName }");
              print(
                  "Item produit: $itemIdProduit -- Item Name: $itemNameProduit }");
              setState(() {
                final mxemballageBox = ObjectBox.mxemballagesBox;
                Query<MxEmballageObject> queryEmballage = mxemballageBox!
                    .query(MxEmballageObject_.mxProduitObject
                        .equals(Constants.idProduit))
                    .build();
                mesEmballages = queryEmballage.find();
                _isDropdownEmballageEnabled = true;
                queryEmballage.close();
              });
            }),
      ],
    );
    //});
  }

  Widget loadingFilterEmballageWidget(BuildContext context, int id) {
    final double height = MediaQuery.of(context).size.height;
    List<DropdownItem> _itemEmballagesList = [];

    //return BlocBuilder<AllEmballagesBloc, AllEmballagesState>(
    //builder: (context, emballageState) {
    List<DropdownItem> list = [];

    if (Constants.singleSelectedVarieteId_ != "") {
      mesEmballages.forEach((element) {
        list.add(DropdownItem(
            id: element.id.toString(),
            value: element.name.toString(),
            data: MxEmballageObject(
                id: element.id,
                name: element.name,
                conditionnement: element.conditionnement,
                quantite: element.quantite,
                pu: element.pu,
                valeur: element.valeur,
                isActive: element.isActive,
                isDefault: element.isDefault)));
      });
    }

    _itemEmballagesList = list;
    return Column(
      children: [
        Dropdown.singleSelection(
            title: "CHOISIR EMBALLAGE",
            labelText: "Emballage ",
            //hintText: "Emballage",
            list: _itemEmballagesList,
            enabled: _isDropdownEmballageEnabled,
            border: OutlineInputBorder(borderRadius: BorderRadius.circular(20)),
            selectedId: _singleSelectedMapEmballageId[id] ?? "",
            onSingleItemListener: (selectedItem) {
              //setState(() {
              _singleSelectedMapEmballageId[id] = selectedItem.id;
              MxEmballageObject mxemballageObject =
                  selectedItem.data as MxEmballageObject;
              _singleSelectedMapEmballageName[id] = mxemballageObject.name;
              //});

              String itemId = selectedItem.id;
              String itemName = selectedItem.value;

              Constants.singleSelectedEmballageId_ =
                  mxemballageObject.id.toString();
              Constants.singleSelectedEmballageName_ = mxemballageObject.name;

              setState(() {});

              // EmballageObject emballageObject = selectedItem.data as EmballageObject;
              // print("Item Id: $itemId -- Item Name: $itemName }");
            }),
      ],
    );
    //});
  }

/*
  Widget loadingFilterFiliereWidget(BuildContext context) {
    final double height = MediaQuery.of(context).size.height;
    // List<DropdownItem> itemVarietesList = [];
    List<DropdownItem> itemFilieresList = [];

    return BlocBuilder<AllVarietesBloc, AllVarietesState>(
        builder: (context, stateVariete) {
      List<DropdownItem> list = [];

      var mesVarietes = stateVariete.varietes;
      Map mesFilieres = {};

      for (var element in mesVarietes) {
        var usdKey = mesFilieres.keys.firstWhere(
            (k) => mesFilieres[k] == element.filiereid,
            orElse: () => null);
        if (usdKey == null) {
          mesFilieres[element.filiereid] = element.filierename;
        }
      }

      mesFilieres.forEach((k, v) {
        list.add(DropdownItem(
            id: k.toString(),
            value: '$v',
            data: FiliereObject(
              id: int.parse(k.toString()),
              name: '$v',
            )));
      });

      itemFilieresList = list;
      print('itemFilieresList: ${itemFilieresList.toString()}');

      return Column(
        children: [
          Dropdown.singleSelection(
              title: "CHOISIR FILIERE",
              labelText: "SINGLE-FILIERE",
              hintText: "Selection Filiere",
              list: itemFilieresList,
              selectedId: _singleSelectedFiliereId,
              onSingleItemListener: (selectedItem) async {
                setState(() {
                  _singleSelectedFiliereId = selectedItem.id;
                });
                String itemId = selectedItem.id;
                String itemName = selectedItem.value;

                FiliereObject filiereObject =
                    selectedItem.data as FiliereObject;
                print("Item Id: $itemId -- Item Name: $itemName }");
              }),
        ],
      );
    });
  }
*/
  /*
  Widget loadingDropdownVarieteWidget(int id) {
    final double height = MediaQuery.of(context).size.height;
    List<DropdownItem> itemVarietesList = [];

    VarieteObject dropdownvalue = VarieteObject(
        id: 1,
        name: '',
        surface_unite: '',
        quantite_unite: '',
        rendement_unite: 0,
        produitid: 0,
        produitname: '',
        filiereid: 0,
        filierename: '',
        familleemplacementid: 0,
        familleemplacementname: '');

    _singleSelectedMapVarieteId['$id'] = "";

    return BlocBuilder<AllVarietesBloc, AllVarietesState>(
        builder: (context, stateVariete) {
      //List<DropdownItem> list = [];

      var mesVarietes = stateVariete.varietes;
      /*
      for (var element in mesVarietes) {
        list.add(DropdownItem(
            id: element.id.toString(),
            value:
                '${element.produitname.toString().toUpperCase()} | ${element.name.toString().toUpperCase()}',
            data: VarieteObject(
              id: element.id,
              name: element.name,
              surface_unite: element.surface_unite,
              quantite_unite: element.quantite_unite,
              rendement_unite: element.rendement_unite,
              produitid: element.produitid,
              produitname: element.produitname,
              filiereid: element.filiereid,
              filierename: element.filierename,
              familleemplacementid: element.familleemplacementid,
              familleemplacementname: element.familleemplacementname,
            )));
      }

      itemVarietesList = list;
      print('itemVarietesList: ${itemVarietesList.toString()}');
*/
      List<DropdownMenuItem<MxVarieteObject>> _items = mesVarietes.map((item) {
        return DropdownMenuItem(
          value: item,
          child: Text(item.name),
        );
      }).toList();

      return Column(
        children: [
          /*
          Dropdown.singleSelection(
              title: "CHOISIR VARIETE",
              labelText: "VARIETE",
              hintText: "Variete",
              list: itemVarietesList,
              selectedId: _singleSelectedMapVarieteId['$id'],
              onSingleItemListener: (selectedItem) async {
                setState(() {
                  _singleSelectedMapVarieteId['$id'] = selectedItem.id;
                });
                String itemId = selectedItem.id;
                String itemName = selectedItem.value;

                VarieteObject varieteObject =
                    selectedItem.data as VarieteObject;
                print("Item Id: $itemId -- Item Name: $itemName }");
              }),
              */
          DropdownButton(
            // value: dropdownvalue,
            icon: const Icon(Icons.keyboard_arrow_down),
            items: _items,
            onChanged: (value) {
              setState(() {
                //dropdownvalue = newValue!;
              });
            },
          )
        ],
      );
    });
  }
*/
  Widget loadingFiltersProducteursWidget(BuildContext context) {
    final double height = MediaQuery.of(context).size.height;
    List<DropdownItem> _itemProducteursList = [];

    String singleSelectedProducteurId = "";

    return BlocBuilder<Producteur_idOpBloc, Producteur_idOpState>(
        //listener: (context, state) {},

        builder: (context, stateidOpProducteur) {
      List<DropdownItem> list = [];

      if (stateidOpProducteur is Producteur_idOpInitialState) {
        print('xxxxx INITIAL EXPLOITATION xxxxxxx');
        context.read<Producteur_idOpBloc>().add(
            LoadProducteur_idOpEvent(idOp: int.parse(_singleSelectedOpId)));
        return const CircularProgressIndicator();
      } else if (stateidOpProducteur is Producteur_idOpLoadingState) {
        print('xxxxx LODING EXPLOITATION  xxxxxxx');
        return const Center(child: CircularProgressIndicator());
      } else if (stateidOpProducteur is Producteur_idOpLoadedState) {
        var mesProducteurs = stateidOpProducteur.apiResult;
        for (var element in mesProducteurs) {
          //print('element.name: ${element.name}');
          list.add(DropdownItem(
              id: element.id.toString(),
              value:
                  '${element.prenom.toString().toUpperCase()} | ${element.nom.toString().toUpperCase()}',
              data: MxProducteurObject(
                  id: element.id,
                  compte: element.compte,
                  prenom: element.prenom,
                  nom: element.nom,
                  cni: element.cni,
                  email: element.email,
                  telephone: element.telephone,
                  adresse: element.adresse,
                  isActive:
                      element.isActive.toString() == 'true' ? true : false)));
        }
      }

      _itemProducteursList = list;
      // print('itemVarietesList: ${itemVarietesList.toString()}');

      return Column(
        children: [
          Dropdown.multiSelection(
              title: "${Constants.utilisateurObject['opName']}",
              labelText: "PRODUCTEURS",
              //hintText: "Selection producteurs",
              list: _itemProducteursList,
              selectedIds: _mutiSelectedProducteursIds,
              isAllSelection: true,
              onMultipleItemListener: (selectedItemList) {
                for (DropdownItem selectedItem in selectedItemList) {
                  String itemId = selectedItem.id;
                  String itemName = selectedItem.value;
                  MxProducteurObject producteurObject =
                      selectedItem.data as MxProducteurObject;
                  //print("Item Id: $itemId -- Item Name: $itemName }");
                }

                // Constants.listStringProducteurId = _mutiSelectedProducteursIds;
                // _generateFilters();
                _generateFiltersUpdate();
/*
                for (int i = 0; i < _mutiSelectedProducteursIds.length; i++) {
                  print(
                      '-----${_mutiSelectedProducteursIds[i].toString()} ----');
                }
                */
              }),
        ],
      );
    });
  }

  Widget loadingFiltersOpsWidget(BuildContext context) {
    final double height = MediaQuery.of(context).size.height;
    List<DropdownItem> _itemOpsList = [];
    final List<String> _mutiSelectedOpsIds = [];

    List<DropdownItem> list = [];

    final mxuserOpBox = ObjectBox.mxuserOpBox;
    var mesUserOp = mxuserOpBox?.getAll();

    // print('Constants.mxUserObject.id: ${Constants.mxUserObject.id}');

    Query<MxUserOpObject> query = mxuserOpBox!
        .query(MxUserOpObject_.userId.equals(Constants.mxUserObject.id))
        .build();
    mesUserOp = query.find();

    // print('mesUserOp: ${mesUserOp.toString()}');

    mesUserOp.forEach((element) {
      Map<String, dynamic> myOp = {
        'id': element.mxOpObject.target!.id,
        'name': element.mxOpObject.target!.name
      };

      list.add(DropdownItem(
          id: element.mxOpObject.target!.id.toString(),
          value: '${element.mxOpObject.target!.name.toUpperCase()}',
          data: MxUserOpObject(
              id: element.id, userId: element.userId, op: myOp)));
    });
    // print('list: ${list.toString()}');
    _itemOpsList = list;
    return Column(
      children: [
        Dropdown.singleSelection(
            title: "CHOISIR OP",
            labelText: "ORGANISATIONS PAYSANNES",
            //hintText: "Selection Op",
            list: _itemOpsList,
            selectedId: _singleSelectedOpId,
            onSingleItemListener: (selectedItem) async {
              setState(() {
                _singleSelectedOpId = selectedItem.id;
              });
              String itemId = selectedItem.id;
              String itemName = selectedItem.value;
              _OpId = int.parse(selectedItem.id);
              MxUserOpObject mxuserOpObject =
                  selectedItem.data as MxUserOpObject;
              print("Item Id: $itemId -- Item Name: $itemName }");

              Constants.utilisateurObject['opId'] = int.parse(itemId);
              Constants.utilisateurObject['opName'] = itemName;
              print(Constants.utilisateurObject);
              Constants.idOp = int.parse(itemId);
              print(Constants.utilisateurObject);
              _mutiSelectedProducteursIds = [];
              _generateFiltersUpdate();

              context.read<Producteur_idOpBloc>().add(LoadProducteur_idOpEvent(
                  idOp: int.parse(_singleSelectedOpId)));
            }),
      ],
    );
  }

  Widget loadingDetailExploitationLignesWidget(
      BuildContext context, int idTCE) {
    return BlocBuilder<EceIdProduitIdTypeChargeIdExploitationBloc,
            EceIdProduitIdTypeChargeIdExploitationState>(
        builder: (context, stateECE) {
      BlocProvider.of<EceIdProduitIdTypeChargeIdExploitationBloc>(context).add(
          GenerateEceIdProduitIdTypeChargeIdExploitationEvent(
              idProduit: idProduit,
              idTypeChargeExploitation: idTCE,
              idExploitation: idExploitation));

      List<MxExploitationChargeExploitationObject>
          listExploitationChargeExploitationObject =
          stateECE.exploitationChargeExploitations;

      return Column(
        children: <Widget>[
          for (var retour in listExploitationChargeExploitationObject)
            Text(
              '${retour.unite} | Qté: ${retour.quantite} PU: ${retour.pu} | Total: ${retour.valeur} |',
              style: const TextStyle(
                fontSize: 13,
                color: Colors.white,
              ),
            ),
          const SizedBox(
            height: 2,
          ),
          const Text(
            'TOTAUX: SOMME FCFA ',
            style: TextStyle(
                fontSize: 14, color: Colors.white, fontWeight: FontWeight.bold),
          ),
          Text(
            'IDPRODUIT: $idProduit IDTCE $idTCE IDEX: $idExploitation NOMBRE: ${listExploitationChargeExploitationObject.length}',
            style: const TextStyle(
                fontSize: 14, color: Colors.white, fontWeight: FontWeight.bold),
          ),
          Text(
            'IDPRODUIT: ${stateECE.idProduit} IDTCE ${stateECE.idTypeChargeExploitation} IDEX: ${stateECE.idExploitation} NOMBRE: ${listExploitationChargeExploitationObject.length}',
            style: const TextStyle(
                fontSize: 14, color: Colors.white, fontWeight: FontWeight.bold),
          ),
        ],
      );
    });
  }

  Widget loadingTypeChargeExploitationWidget(BuildContext context) {
    return BlocBuilder<TypeChargeExploitationsIdproduitBloc,
        TypeChargeExploitationsIdproduitState>(
      builder: (context, state) {
        List<TypeChargeExploitationObject> listTypeChargeExploitationObject =
            state.typeExploitationCharges;

        return Column(
          children: [
            Container(
              child: MediaQuery.removePadding(
                  context: context,
                  removeTop: true,
                  child: ListView.builder(
                      scrollDirection: Axis.vertical,
                      shrinkWrap: true,
                      itemCount: listTypeChargeExploitationObject == null
                          ? 0
                          : listTypeChargeExploitationObject.length,
                      itemBuilder: (context, index) {
                        return Container(
                          key:
                              ValueKey(listTypeChargeExploitationObject[index]),

                          margin: const EdgeInsets.only(bottom: 10, top: 12),
                          // height: 100,
                          padding: const EdgeInsets.only(
                              left: 20, right: 20, bottom: 5),
                          child: Container(
                            decoration: BoxDecoration(
                              color: const Color(0xFF363f93),
                              borderRadius: const BorderRadius.only(
                                  topRight: Radius.circular(20.0)),
                              boxShadow: [
                                BoxShadow(
                                    color: const Color(0xFF363f93)
                                        .withOpacity(0.3),
                                    offset: const Offset(-10.0, 10.0),
                                    blurRadius: 20.0,
                                    spreadRadius: 4.0),
                                //BoxShadow
                              ],
                            ),
                            padding: const EdgeInsets.only(
                                left: 6, top: 8.0, bottom: 6),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: <Widget>[
                                Text(
                                  listTypeChargeExploitationObject[index].name,
                                  style: const TextStyle(
                                      fontSize: 14,
                                      color: Colors.white,
                                      fontWeight: FontWeight.bold),
                                ),
                                const SizedBox(
                                  height: 2,
                                ),
                                loadingDetailExploitationLignesWidget(context,
                                    listTypeChargeExploitationObject[index].id),
                                /* -------- ICI ----------------- 

                                DetailExploitationLignesWidget(
                                  idProduit: state.idProduit,
                                  idTypeChargeExploitation:
                                      listTypeChargeExploitationObject[index]
                                          .id,
                                  idExploitation: 1,
                                ),

                                -------- ICI FIN -------------*/
                              ],
                            ),
                          ),
                        );
                      })),
            )
          ],
        );
      },
    );
  }

  Widget itemsExploitationDetails() {
    return BlocConsumer<EceByExploitationBloc, EceByExploitationState>(
        listener: (context, state) {},
        builder: (context, state) {
          if (state is EceByExploitationInitialState) {
            print('xxxx INITIAL:  $idExploitation  xxxxxxx');
            return const CircularProgressIndicator();
          } else if (state is EceByExploitationLoadingState) {
            print('xxxx LOADING:  $idExploitation  xxxxxx');
            // _generateExploitationChargeExploitation(idExploitation);
            return const Center(child: CircularProgressIndicator());
          } else if (state is EceByExploitationLoadedState) {
            print('xxxxx LODEAD:  $idExploitation  xxxxxxx');

            var mesECE = state.apiResult;
            print(mesECE.toList());

            return Container(
              child: Text(idExploitation.toString()),
            );
          } else if (state is EceByExploitationErrorState) {
            return const Center(
              child: Text("Uh oh! 😭 Something went wrong!"),
            );
          }
          return const Text("Error");
        });
  }

  Future<MxExploitationObject?> insertBoxMxExploitationObject(
      MxExploitationObject myExploitationObject,
      int idAnnee,
      int idSaison,
      int idVariete,
      int idProducteur,
      int idOp) async {
    try {
      final mxexploitationBox = ObjectBox.mxexploitationBox;
      MxExploitationObject exploitationToInsert = MxExploitationObject(
        id: myExploitationObject.id,
        compte: myExploitationObject.compte,
        date: myExploitationObject.date,
        unite: myExploitationObject.unite,
        //pu: double.parse(myExploitationObject.pu.toString()),
        //production: double.parse(myExploitationObject.production.toString()),
        surface: double.parse(myExploitationObject.surface.toString()),
        createdAt: myExploitationObject.createdAt,
        updatedAt: myExploitationObject.updatedAt,
      );

      final mxanneesBox = ObjectBox.mxanneesBox;
      MxAnneeObject myAnnee = mxanneesBox!.get(idAnnee)!;
      exploitationToInsert.mxanneeObject.target = myAnnee;

      final mxsaisonsBox = ObjectBox.mxsaisonsBox;
      MxSaisonObject mySaison = mxsaisonsBox!.get(idSaison)!;
      exploitationToInsert.mxsaisonObject.target = mySaison;

      final mxvarietesBox = ObjectBox.mxvarietesBox;
      MxVarieteObject myVAriete = mxvarietesBox!.get(idVariete)!;
      exploitationToInsert.mxvarieteObject.target = myVAriete;

      final mxproducteursBox = ObjectBox.mxproducteursBox;
      MxProducteurObject myProducteur = mxproducteursBox!.get(idProducteur)!;
      exploitationToInsert.mxproducteurObject.target = myProducteur;

      final mxopsBox = ObjectBox.mxopsBox;
      MxOpObject myOp = mxopsBox!.get(idOp)!;
      exploitationToInsert.mxopObject.target = myOp;

      int idExploitation = mxexploitationBox!.put(exploitationToInsert);
      MxExploitationObject? monExploitation =
          mxexploitationBox.get(idExploitation);
      return monExploitation;
    } catch (e) {
      return null;
    }
  }

  Future<ExploitationObject?> insertBoxExploitationObject(
      ExploitationObject exploitationObject) async {
    // int idExploitation = 0;
    try {
      final exploitationsBox = ObjectBox.exploitationsBox;
      ExploitationObject object = ExploitationObject(
        id: exploitationObject.id,
        date: exploitationObject.date,
        compte: exploitationObject.compte,
        producteurid: exploitationObject.producteurid,
        prenom: exploitationObject.prenom,
        nom: exploitationObject.nom,
        opid: exploitationObject.opid,
        opname: exploitationObject.opname,
        typeopid: exploitationObject.typeopid,
        typeopname: exploitationObject.typeopname,
        exploitation_id: exploitationObject.exploitation_id,
        unite: exploitationObject.unite,
        surface_prevision:
            double.parse(exploitationObject.surface_prevision.toString()),
        production_prevision:
            double.parse(exploitationObject.production_prevision.toString()),
        pu_prevision: double.parse(exploitationObject.pu_prevision.toString()),
        varieteprevisionid:
            int.parse(exploitationObject.varieteprevisionid.toString()),
        varieteprevisionname: exploitationObject.varieteprevisionname,
        surface: double.parse(exploitationObject.surface.toString()),
        production: double.parse(exploitationObject.production.toString()),
        pu: double.parse(exploitationObject.pu.toString()),
        filiereid: int.parse(exploitationObject.filiereid.toString()),
        filierename: exploitationObject.filierename,
        produitid: int.parse(exploitationObject.produitid.toString()),
        produitname: exploitationObject.produitname,
        varieteid: int.parse(exploitationObject.varieteid.toString()),
        varietepu: double.parse(exploitationObject.varietepu.toString()),
        varietename: exploitationObject.varietename,
        saisonid: int.parse(exploitationObject.saisonid.toString()),
        saisonname: exploitationObject.saisonname,
        emballageid: int.parse(exploitationObject.emballageid.toString()),
        emballagename: exploitationObject.emballagename,
        emballagequantite: exploitationObject.emballagequantite,
        emballagepu: exploitationObject.emballagepu,
        emballagetypeemballageid:
            int.parse(exploitationObject.emballagetypeemballageid.toString()),
        emballagetypeemballagename:
            exploitationObject.emballagetypeemballagename,
        emballageunitegrandeurid:
            int.parse(exploitationObject.emballageunitegrandeurid.toString()),
        emballageunitegrandeurname:
            exploitationObject.emballageunitegrandeurname,
        emballageunitevaleurreference:
            exploitationObject.emballageunitevaleurreference,
        anneeid: int.parse(exploitationObject.anneeid.toString()),
        anneename: exploitationObject.anneename,
      );

/*
      int idExploitation = exploitationsBox!.put(object);

      ExploitationObject? monExploitation =
          exploitationsBox.get(idExploitation);

      return monExploitation;
      */
      print(object.toJson());
      return null;
    } catch (e) {
      print(' ---Error------- $e');
      return null;
    }
  }

  void _generateFilters() async {
    blocExploitation.add((LoadExploitationEvent(
        compte: _compte.text.trim().toString(),
        listStringVarieteId: _mutiSelectedVarietesIds,
        listStringAnneeId: _mutiSelectedAnneesIds,
        listStringSaisonId: _mutiSelectedSaisonsIds,
        opId: int.parse(_singleSelectedOpId),
        listStringProducteurId: _mutiSelectedProducteursIds)));
  }

  void _generateTypeChargeExploitation() {
    blocTypeChargeExploitationsIdproduit.add(
        (GenerateTypeChargeExploitationsIdProduitEvent(idProduit: idProduit)));
  }

  void _generateExploitationChargeExploitationx(int idEx) {
    blocEceByExploitation
        .add((LoadEceByExploitationEvent(idExploitation: idEx)));
  }

  void _generateExploitationChargeExploitation() {
    blocEceByExploitation
        .add((LoadEceByExploitationEvent(idExploitation: idExploitation)));
  }

  String _getRegexString() =>
      allowDecimal ? r'[0-9]+[,.]{0,1}[0-9]*' : r'[0-9]';
}

class Compte {
  Compte({
    required this.compte,
    required this.variete,
    required this.saison,
    required this.surface,
  });

  int compte;
  String variete;
  String saison;
  double surface;
}

class CompteLocale {
  CompteLocale({
    required this.id,
    required this.annee_saison,
    required this.variete,
    required this.surface,
  });
  int id;
  String annee_saison;
  String variete;
  double surface;
}

class Montant {
  Montant({
    required this.name,
    required this.somme,
  });

  String name;
  double somme;
}
