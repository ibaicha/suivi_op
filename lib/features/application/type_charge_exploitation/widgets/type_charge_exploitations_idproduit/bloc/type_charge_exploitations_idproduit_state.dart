part of 'type_charge_exploitations_idproduit_bloc.dart';

enum TypeChargeExploitationsIdproduitStatus {
  initial,
  success,
  error,
  loading,
  selected
}

extension ExploitationStatusX on TypeChargeExploitationsIdproduitStatus {
  bool get isInitial => this == TypeChargeExploitationsIdproduitStatus.initial;
  bool get isSuccess => this == TypeChargeExploitationsIdproduitStatus.success;
  bool get isError => this == TypeChargeExploitationsIdproduitStatus.error;
  bool get isLoading => this == TypeChargeExploitationsIdproduitStatus.loading;
  bool get isSelected =>
      this == TypeChargeExploitationsIdproduitStatus.selected;
}

class TypeChargeExploitationsIdproduitState extends Equatable {
  const TypeChargeExploitationsIdproduitState({
    this.status = TypeChargeExploitationsIdproduitStatus.initial,
    List<TypeChargeExploitationObject>? typeExploitationCharges,
    int idProduit = 0,
  })  : typeExploitationCharges = typeExploitationCharges ?? const [],
        idProduit = idProduit;

  final TypeChargeExploitationsIdproduitStatus status;
  final List<TypeChargeExploitationObject> typeExploitationCharges;
  final int idProduit;

  @override
  List<Object?> get props => [status, idProduit];

  TypeChargeExploitationsIdproduitState copyWith({
    List<TypeChargeExploitationObject>? typeExploitationCharges,
    TypeChargeExploitationsIdproduitStatus? status,
    int idProduit = 0,
  }) {
    return TypeChargeExploitationsIdproduitState(
        typeExploitationCharges:
            typeExploitationCharges ?? this.typeExploitationCharges,
        status: status ?? this.status,
        idProduit: idProduit);
  }
}
