import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
 

import '../../../../../../core/data/model/ObjectBox/objectBoxModels.dart';
import '../../../data/repository/type_charge_exploitation_repository.dart';
 

part 'type_charge_exploitations_idproduit_event.dart';
part 'type_charge_exploitations_idproduit_state.dart';

class TypeChargeExploitationsIdproduitBloc extends Bloc<
    TypeChargeExploitationsIdproduitEvent,
    TypeChargeExploitationsIdproduitState> {
  TypeChargeExploitationsIdproduitBloc({
    required this.typeChargeExploitationRepository,
  }) : super(const TypeChargeExploitationsIdproduitState()) {
    on<GenerateTypeChargeExploitationsIdProduitEvent>(
        _mapGetExploitationsFiltersEventToState);
  }

  final TypeChargeExploitationRepository typeChargeExploitationRepository;

  void _mapGetExploitationsFiltersEventToState(
      GenerateTypeChargeExploitationsIdProduitEvent event,
      Emitter<TypeChargeExploitationsIdproduitState> emit) async {
    try {
      emit(state.copyWith(
          status: TypeChargeExploitationsIdproduitStatus.loading));
      print('-------LODING TECE--------');

      final retourTypeExploitationCharges =
          await typeChargeExploitationRepository
              .generateTypeChargeExploitationsIdProduitBox(event.idProduit);
      emit(
        state.copyWith(
            status: TypeChargeExploitationsIdproduitStatus.success,
            typeExploitationCharges: retourTypeExploitationCharges,
            idProduit: event.idProduit),
      );
      print('-------SUCCESS TECE--------');
    } catch (error, stacktrace) {
      print(stacktrace);
      emit(
          state.copyWith(status: TypeChargeExploitationsIdproduitStatus.error));
      print('-------ERROR TECE--------');
    }
  }
}
