import '../../../../../core/data/model/ObjectBox/objectBoxModels.dart';
import '../../../../../core/data/service/ObjectBoxHelper.dart';
import '../../../../../objectbox.g.dart';

class ExploitationChargeExploitationService {
  Future<List<MxExploitationChargeExploitationObject>> getAllECE(
      int idExploitation) async {
    final mxexploitationsBox = ObjectBox.mxexploitationBox;
    final mxchargeExploitationsBox = ObjectBox.mxchargeExploitationsBox;

/***************REVOIR LE CODE QUI SUIT */
    final queryExploitations = mxexploitationsBox!
        .query(MxExploitationObject_.id.equals(idExploitation))
        .build();

    print('$idExploitation | ${queryExploitations.count()}');
    //final idProduit = queryExploitations.find().first.produitid;
    //queryExploitations.close();

    final mxexploitationChargeExploitationBox =
        ObjectBox.mxexploitationChargeExploitationObjectBox;

    List<MxExploitationChargeExploitationObject> mesECE = [];

    Query<MxExploitationChargeExploitationObject> query =
        mxexploitationChargeExploitationBox!.query().build();
    mesECE = query.find();
    query.close();
    return mesECE;
  }

  Future<List<ExploitationChargeExploitationObject>> getECEbyExploitation(
      int idExploitation) async {
    print('idExploitation in: ' + idExploitation.toString());

    final mxproduitChargeExploitationsBox = ObjectBox.mxproduitchargeexploitationsBox;
    final mxexploitationChargeExploitationObjectBox =
        ObjectBox.mxexploitationChargeExploitationObjectBox;
    final mxexploitationsBox = ObjectBox.mxexploitationBox;

    MxExploitationObject? myexploitation = mxexploitationsBox!
        .query(MxExploitationObject_.id.equals(idExploitation))
        .build()
        .findFirst();
    int idProduit = await myexploitation!
        .mxvarieteObject.target!.mxProduitObject.target!.id;

    print('idProduit in: ' + idProduit.toString());

    final queryProduitChargeExploitations = mxproduitChargeExploitationsBox!
        .query(MxProduitChargeExploitationObject_.mxProduitObject.equals(idProduit))
        // .query()
        .build();
    List<MxProduitChargeExploitationObject> mesProduitChargeExploitationsBox =
        queryProduitChargeExploitations.find();
    queryProduitChargeExploitations.close();

    List<ExploitationChargeExploitationObject>
        ListExploitationChargeExploitationObject = [];

    for (var element in mesProduitChargeExploitationsBox.map( (elem) => elem.mxChargeExploitationObject
      )) {
      //print(element.toJson());
      // print(' xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx');
      ExploitationChargeExploitationObject MonObjet =
          ExploitationChargeExploitationObject(
        id: 0,
        exploitationchargeexploitationid: 0,
        unite: element.target!.unite.toString(),
        date: DateTime.now(),
        pu: 0,
        quantite: 0,
        valeur: 0,
        observation: '',
        chargeexploitationid: int.parse(element.target!.id.toString()),
        chargeexploitationname: element.target!.name,
        typechargeexploitationid: int.parse(
            element.target!.mxtypeChargeExploitationObject.target!.id.toString()),
        typechargeexploitationname:
            element.target!.mxtypeChargeExploitationObject.target!.name,
        famillechargeexploitationid: int.parse(
            element.target!.mxfamilleChargeExploitationObject.target!.id.toString()),
        famillechargeexploitationname:
            element.target!.mxfamilleChargeExploitationObject.target!.name,
        exploitationid: int.parse(idExploitation.toString()),
      );

/*
      MxExploitationChargeExploitationObject? elem = await ObjectBox
          .getMxExploitationChargeExploitationsByExploitationEtData(
              idExploitation, element.id);
*/

      final queryExploitationChargeExploitations =
          mxexploitationChargeExploitationObjectBox!
              .query(MxExploitationChargeExploitationObject_.mxexploitation
                  .equals(idExploitation)
                  .and(MxExploitationChargeExploitationObject_
                      .mxchargeexploitationObject
                      .equals(element.target!.id)))
              //.query()
              .build();
      MxExploitationChargeExploitationObject? elem =
          queryExploitationChargeExploitations.findFirst();
      queryProduitChargeExploitations.close();

      //print('idExploitation: $idExploitation element.id: ${element.id} element.name: ${element.name}');

      //var elem = await elems.then((value) => value);

      // ignore: unnecessary_null_comparison
      if (elem != null) {
        //print(elem.toJson());

        MonObjet.id = elem.id;
        MonObjet.quantite = elem.quantite;
        MonObjet.pu = elem.pu;
        MonObjet.date = DateTime.parse(elem.date.toString());
        double pu = MonObjet.pu.toString().isNotEmpty
            ? double.parse(MonObjet.pu.toString())
            : 0;
        double quantite = MonObjet.quantite.toString().isNotEmpty
            ? double.parse(MonObjet.quantite.toString())
            : 0;
        double produit = pu * quantite;
        MonObjet.valeur = produit;
      } else {
        print('nul alors');
      }
      ListExploitationChargeExploitationObject.add(MonObjet);
    }
    //print('ListExploitationChargeExploitationObject: ' +ListExploitationChargeExploitationObject.toString());
    return ListExploitationChargeExploitationObject;
  }

  Future<List<ExploitationChargeExploitationObject>> getECEbyExploitationXXZ(
      int idExploitation) async {
    print('idExploitation in: ' + idExploitation.toString());
    //final exploitationsBox = ObjectBox.exploitationsBox;
    final mxchargeExploitationsBox = ObjectBox.mxchargeExploitationsBox;
    final mxexploitationChargeExploitationObjectBox =
        ObjectBox.mxexploitationChargeExploitationObjectBox;

/*
    Future<ExploitationObject?> exploitationsBox =
        ObjectBox.getExploitationByIdData(idExploitation);

    int idProduit = await exploitationsBox.then((value) => value!.produitid);
    print('idProduit in: ' + idProduit.toString());
*/

    final mxexploitationsBox = ObjectBox.mxexploitationBox;
    MxExploitationObject? myexploitation = mxexploitationsBox!
        .query(MxExploitationObject_.id.equals(idExploitation))
        .build()
        .findFirst();
    int idProduit = await myexploitation!
        .mxvarieteObject.target!.mxProduitObject.target!.id;

    print('idProduit in: ' + idProduit.toString());

    final queryChargeExploitations = mxchargeExploitationsBox!
        //.query(MxChargeExploitationObject_.mxproduitObject.equals(idProduit))
        .query()
        .build();
    List<MxChargeExploitationObject> mesChargeExploitationsBox =
        queryChargeExploitations.find();
    queryChargeExploitations.close();

/*
    mesChargeExploitationsBox.forEach((element) {
      print(element.toJson());
    });
*/
    //print('mesChargeExploitationsBox: ' + mesChargeExploitationsBox.toString());

    List<ExploitationChargeExploitationObject>
        ListExploitationChargeExploitationObject = [];

    for (var element in mesChargeExploitationsBox) {
      //print(element.toJson());
      // print(' xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx');
      ExploitationChargeExploitationObject MonObjet =
          ExploitationChargeExploitationObject(
        id: 0,
        exploitationchargeexploitationid: 0,
        unite: element.unite.toString(),
        date: DateTime.now(),
        pu: 0,
        quantite: 0,
        valeur: 0,
        observation: '',
        chargeexploitationid: int.parse(element.id.toString()),
        chargeexploitationname: element.name,
        typechargeexploitationid: int.parse(
            element.mxtypeChargeExploitationObject.target!.id.toString()),
        typechargeexploitationname:
            element.mxtypeChargeExploitationObject.target!.name,
        famillechargeexploitationid: int.parse(
            element.mxfamilleChargeExploitationObject.target!.id.toString()),
        famillechargeexploitationname:
            element.mxfamilleChargeExploitationObject.target!.name,
        exploitationid: int.parse(idExploitation.toString()),
      );

/*
      MxExploitationChargeExploitationObject? elem = await ObjectBox
          .getMxExploitationChargeExploitationsByExploitationEtData(
              idExploitation, element.id);
*/

      final queryExploitationChargeExploitations =
          mxexploitationChargeExploitationObjectBox!
              .query(MxExploitationChargeExploitationObject_.mxexploitation
                  .equals(idExploitation)
                  .and(MxExploitationChargeExploitationObject_
                      .mxchargeexploitationObject
                      .equals(element.id)))
              //.query()
              .build();
      MxExploitationChargeExploitationObject? elem =
          queryExploitationChargeExploitations.findFirst();
      queryChargeExploitations.close();

      //print('idExploitation: $idExploitation element.id: ${element.id} element.name: ${element.name}');

      //var elem = await elems.then((value) => value);

      // ignore: unnecessary_null_comparison
      if (elem != null) {
        //print(elem.toJson());

        MonObjet.id = elem.id;
        MonObjet.quantite = elem.quantite;
        MonObjet.pu = elem.pu;
        MonObjet.date = DateTime.parse(elem.date.toString());
        double pu = MonObjet.pu.toString().isNotEmpty
            ? double.parse(MonObjet.pu.toString())
            : 0;
        double quantite = MonObjet.quantite.toString().isNotEmpty
            ? double.parse(MonObjet.quantite.toString())
            : 0;
        double produit = pu * quantite;
        MonObjet.valeur = produit;
      } else {
        print('nul alors');
      }
      ListExploitationChargeExploitationObject.add(MonObjet);
    }
    //print('ListExploitationChargeExploitationObject: ' +ListExploitationChargeExploitationObject.toString());
    return ListExploitationChargeExploitationObject;
  }

  Future<List<MxExploitationChargeExploitationObject>> getECEbyExploitationXX(
      int idExploitation) async {
    final exploitationsBox = ObjectBox.exploitationsBox;
    final chargeExploitationsBox = ObjectBox.chargeExploitationsBox;

    final queryExploitations = exploitationsBox!
        .query(ExploitationObject_.exploitation_id.equals(idExploitation))
        .build();

    final idProduit = queryExploitations.find().first.produitid;
    queryExploitations.close();

    final queryChargeExploitations = chargeExploitationsBox!
        .query(ChargeExploitationObject_.produitid.equals(idProduit))
        .build();
    final mesChargeExploitationsBox = queryChargeExploitations.find();
    queryChargeExploitations.close();

    List<MxExploitationChargeExploitationObject>
        ListExploitationChargeExploitationObject = [];

    for (var element in mesChargeExploitationsBox) {
      MxExploitationChargeExploitationObject MonObjet =
          MxExploitationChargeExploitationObject(
        id: 0,
        unite: element.unite.toString(),
        date: DateTime.now(),
        pu: 0,
        quantite: 0,
        valeur: 0,
        observation: '',
      );

      final exploitationChargeExploitationBox =
          ObjectBox.mxexploitationChargeExploitationObjectBox;
      final queryECE = exploitationChargeExploitationBox!
          .query(MxExploitationChargeExploitationObject_.id
              .equals(idExploitation)
              .and(MxExploitationChargeExploitationObject_.id
                  .equals(element.id)))
          .build();
      final mesExploitationChargeExploitationBox = queryECE.find();
      queryECE.close();

      if (mesExploitationChargeExploitationBox.isNotEmpty) {
        MonObjet.id = mesExploitationChargeExploitationBox.first.id;
        MonObjet.id = mesExploitationChargeExploitationBox.first.id;
        MonObjet.quantite = mesExploitationChargeExploitationBox.first.quantite;
        MonObjet.pu = mesExploitationChargeExploitationBox.first.pu;

        MonObjet.date = DateTime.parse(
            mesExploitationChargeExploitationBox.first.date.toString());

        double pu = MonObjet.pu.toString().isNotEmpty
            ? double.parse(MonObjet.pu.toString())
            : 0;
        double quantite = MonObjet.quantite.toString().isNotEmpty
            ? double.parse(MonObjet.quantite.toString())
            : 0;
        double produit = pu * quantite;
        MonObjet.valeur = produit;
      }
      ListExploitationChargeExploitationObject.add(MonObjet);
    }
    return ListExploitationChargeExploitationObject;
  }

  Future<List<MxExploitationChargeExploitationObject>> getECEidExploitation(
      int idExploitation) async {
    final exploitationsBox = ObjectBox.exploitationsBox;
    final chargeExploitationsBox = ObjectBox.chargeExploitationsBox;

    final queryExploitations = exploitationsBox!
        .query(ExploitationObject_.id.equals(idExploitation))
        .build();

    final idProduit = queryExploitations.find().first.produitid;
    queryExploitations.close();

    final queryChargeExploitations = chargeExploitationsBox!
        .query(ChargeExploitationObject_.produitid.equals(idProduit))
        .build();
    final mesChargeExploitationsBox = queryChargeExploitations.find();
    queryChargeExploitations.close();

    List<MxExploitationChargeExploitationObject>
        ListExploitationChargeExploitationObject = [];

    for (var element in mesChargeExploitationsBox) {
      MxExploitationChargeExploitationObject MonObjet =
          MxExploitationChargeExploitationObject(
        id: 0,
        unite: element.unite.toString(),
        date: DateTime.now(),
        pu: 0,
        quantite: 0,
        valeur: 0,
        observation: '',
      );

      final exploitationChargeExploitationBox =
          ObjectBox.mxexploitationChargeExploitationObjectBox;
      final queryECE = exploitationChargeExploitationBox!
          .query(MxExploitationChargeExploitationObject_.id
              .equals(idExploitation)
              .and(MxExploitationChargeExploitationObject_.id
                  .equals(element.id)))
          .build();
      final mesExploitationChargeExploitationBox = queryECE.find();
      queryECE.close();

      if (mesExploitationChargeExploitationBox.isNotEmpty) {
        MonObjet.id = mesExploitationChargeExploitationBox.first.id;
        MonObjet.id = mesExploitationChargeExploitationBox.first.id;
        MonObjet.quantite = mesExploitationChargeExploitationBox.first.quantite;
        MonObjet.pu = mesExploitationChargeExploitationBox.first.pu;

        MonObjet.date = DateTime.parse(
            mesExploitationChargeExploitationBox.first.date.toString());

        double pu = MonObjet.pu.toString().isNotEmpty
            ? double.parse(MonObjet.pu.toString())
            : 0;
        double quantite = MonObjet.quantite.toString().isNotEmpty
            ? double.parse(MonObjet.quantite.toString())
            : 0;
        double produit = pu * quantite;
        MonObjet.valeur = produit;
      }
      ListExploitationChargeExploitationObject.add(MonObjet);
    }
    return ListExploitationChargeExploitationObject;
  }

  Future<List<MxExploitationChargeExploitationObject>>
      getECEidProduitidTypeCharge(int idProduit, int idTypeChargeExploitation,
          int idExploitation) async {
    final chargeExploitationsBox = ObjectBox.chargeExploitationsBox;

    final query = chargeExploitationsBox!
        .query(ChargeExploitationObject_.typechargeexploitationid
            .equals(idTypeChargeExploitation)
            .and(ChargeExploitationObject_.produitid.equals(idProduit)))
        .build();
    final mesChargeExploitationsBox = query.find();
    query.close();

    List<MxExploitationChargeExploitationObject>
        ListExploitationChargeExploitationObject = [];

    for (var element in mesChargeExploitationsBox) {
      MxExploitationChargeExploitationObject MonObjet =
          MxExploitationChargeExploitationObject(
        id: 0,
        unite: element.unite.toString(),
        // date: DateTime.parse(item.date.toString()),
        date: DateTime.now(),
        pu: 0,
        quantite: 0,
        valeur: 0,
        observation: '',
      );

      final exploitationChargeExploitationBox =
          ObjectBox.mxexploitationChargeExploitationObjectBox;
      final quer = exploitationChargeExploitationBox!
          .query(MxExploitationChargeExploitationObject_.id
              .equals(idExploitation)
              .and(MxExploitationChargeExploitationObject_.id
                  .equals(element.id)))
          .build();
      final mesExploitationChargeExploitationBox = quer.find();

      if (mesExploitationChargeExploitationBox.isNotEmpty) {
        MonObjet.id = mesExploitationChargeExploitationBox.first.id;
        MonObjet.id = mesExploitationChargeExploitationBox.first.id;
        MonObjet.quantite = mesExploitationChargeExploitationBox.first.quantite;
        MonObjet.pu = mesExploitationChargeExploitationBox.first.pu;

        MonObjet.date = DateTime.parse(
            mesExploitationChargeExploitationBox.first.date.toString());

        double pu = MonObjet.pu.toString().isNotEmpty
            ? double.parse(MonObjet.pu.toString())
            : 0;
        double quantite = MonObjet.quantite.toString().isNotEmpty
            ? double.parse(MonObjet.quantite.toString())
            : 0;
        double produit = pu * quantite;
        MonObjet.valeur = produit;
      }
      ListExploitationChargeExploitationObject.add(MonObjet);
    }
    return ListExploitationChargeExploitationObject;
  }
}
