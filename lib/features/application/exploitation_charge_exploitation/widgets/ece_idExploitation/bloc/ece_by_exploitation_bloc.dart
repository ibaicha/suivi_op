import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';

import '../../../../../../core/data/model/ObjectBox/objectBoxModels.dart';
import '../../../../../../core/data/repository/repositories.dart';

part 'ece_by_exploitation_event.dart';
part 'ece_by_exploitation_state.dart';

class EceByExploitationBloc
    extends Bloc<EceByExploitationEvent, EceByExploitationState> {
  final ExploitationChargeExploitationRepository EceByExploitationRepository;

  EceByExploitationBloc(
    this.EceByExploitationRepository,
  ) : super(EceByExploitationInitialState()) {
    print('apiResult ini: ');
    on<LoadEceByExploitationEvent>(_EceByExploitationEvent);
    on<ResetEventEceByExploitation>(_ResetEceByExploitationEvent);
  }

  void _EceByExploitationEvent(
    LoadEceByExploitationEvent event,
    Emitter<EceByExploitationState> emitter,

  ) async {
    if (event is LoadEceByExploitationEvent) {
      emitter(EceByExploitationLoadingState());
      // await Future.delayed(const Duration(milliseconds: 500));
      List<ExploitationChargeExploitationObject>? apiResult =
          await EceByExploitationRepository.getECEbyExploitation(
              event.idExploitation);
      print('apiResult compteur: ${apiResult.length}');
      if (apiResult == null) {
        emitter(EceByExploitationErrorState());
      } else {
        emitter(EceByExploitationLoadedState(
            apiResult: apiResult, idExploitation: event.idExploitation));
      }
    }
 
  }


    void _ResetEceByExploitationEvent(
    ResetEventEceByExploitation event,
    Emitter<EceByExploitationState> emitter,

  ) async {
    if (event is ResetEventEceByExploitation) {
      emitter(EceByExploitationInitialState());
    }
  }
}
